// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/PatientActions.proto

#include "pulse/cdm/bind/PatientActions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActionData_pulse_2fcdm_2fbind_2fActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AcuteRespiratoryDistressSyndromeExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AcuteStressData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AirwayObstructionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AnyConsciousRespirationCommandData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AsthmaAttackData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BrainInjuryData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BronchoconstrictionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CardiacArrestData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChestCompressionForceData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ChestCompressionForceScaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChestOcclusiveDressingData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChronicObstructivePulmonaryDiseaseExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConsciousRespirationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConsumeNutrientsData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DyspneaData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ExerciseData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ForcedExhaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ForcedInhaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ForcedPauseData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_HemorrhageData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ImpairedAlveolarExchangeExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntubationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LobarPneumoniaExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_MechanicalVentilationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NeedleDecompressionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NutritionData_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PatientAssessmentRequestData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PericardialEffusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PulmonaryShuntExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RespiratoryFatigueData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarForceData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SubstanceBolusData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SubstanceCompoundInfusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fSubstance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubstanceConcentrationData_pulse_2fcdm_2fbind_2fSubstance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fSubstance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubstanceFractionData_pulse_2fcdm_2fbind_2fSubstance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SubstanceInfusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SupplementalOxygenData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TensionPneumothoraxData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UrinateData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseInhalerData_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class AnyPatientActionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnyPatientActionData> _instance;
} _AnyPatientActionData_default_instance_;
class PatientActionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatientActionData> _instance;
} _PatientActionData_default_instance_;
class PatientAssessmentRequestDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatientAssessmentRequestData> _instance;
} _PatientAssessmentRequestData_default_instance_;
class AcuteRespiratoryDistressSyndromeExacerbationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcuteRespiratoryDistressSyndromeExacerbationData> _instance;
} _AcuteRespiratoryDistressSyndromeExacerbationData_default_instance_;
class AcuteStressDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcuteStressData> _instance;
} _AcuteStressData_default_instance_;
class AirwayObstructionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AirwayObstructionData> _instance;
} _AirwayObstructionData_default_instance_;
class AsthmaAttackDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AsthmaAttackData> _instance;
} _AsthmaAttackData_default_instance_;
class BrainInjuryDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BrainInjuryData> _instance;
} _BrainInjuryData_default_instance_;
class BronchoconstrictionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BronchoconstrictionData> _instance;
} _BronchoconstrictionData_default_instance_;
class CardiacArrestDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CardiacArrestData> _instance;
} _CardiacArrestData_default_instance_;
class ChestCompressionForceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChestCompressionForceData> _instance;
} _ChestCompressionForceData_default_instance_;
class ChestCompressionForceScaleDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChestCompressionForceScaleData> _instance;
} _ChestCompressionForceScaleData_default_instance_;
class ChestOcclusiveDressingDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChestOcclusiveDressingData> _instance;
} _ChestOcclusiveDressingData_default_instance_;
class ChronicObstructivePulmonaryDiseaseExacerbationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChronicObstructivePulmonaryDiseaseExacerbationData> _instance;
} _ChronicObstructivePulmonaryDiseaseExacerbationData_default_instance_;
class DyspneaDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DyspneaData> _instance;
} _DyspneaData_default_instance_;
class ForcedInhaleDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForcedInhaleData> _instance;
} _ForcedInhaleData_default_instance_;
class ForcedExhaleDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForcedExhaleData> _instance;
} _ForcedExhaleData_default_instance_;
class ForcedPauseDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForcedPauseData> _instance;
} _ForcedPauseData_default_instance_;
class UseInhalerDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UseInhalerData> _instance;
} _UseInhalerData_default_instance_;
class AnyConsciousRespirationCommandDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnyConsciousRespirationCommandData> _instance;
} _AnyConsciousRespirationCommandData_default_instance_;
class ConsciousRespirationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsciousRespirationData> _instance;
} _ConsciousRespirationData_default_instance_;
class ConsumeNutrientsDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsumeNutrientsData> _instance;
} _ConsumeNutrientsData_default_instance_;
class ExerciseDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExerciseData> _instance;
} _ExerciseData_default_instance_;
class HemorrhageDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HemorrhageData> _instance;
} _HemorrhageData_default_instance_;
class ImpairedAlveolarExchangeExacerbationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImpairedAlveolarExchangeExacerbationData> _instance;
} _ImpairedAlveolarExchangeExacerbationData_default_instance_;
class IntubationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntubationData> _instance;
} _IntubationData_default_instance_;
class LobarPneumoniaExacerbationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LobarPneumoniaExacerbationData> _instance;
} _LobarPneumoniaExacerbationData_default_instance_;
class MechanicalVentilationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MechanicalVentilationData> _instance;
} _MechanicalVentilationData_default_instance_;
class NeedleDecompressionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NeedleDecompressionData> _instance;
} _NeedleDecompressionData_default_instance_;
class PericardialEffusionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PericardialEffusionData> _instance;
} _PericardialEffusionData_default_instance_;
class PulmonaryShuntExacerbationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PulmonaryShuntExacerbationData> _instance;
} _PulmonaryShuntExacerbationData_default_instance_;
class RespiratoryFatigueDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RespiratoryFatigueData> _instance;
} _RespiratoryFatigueData_default_instance_;
class SubstanceBolusDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstanceBolusData> _instance;
} _SubstanceBolusData_default_instance_;
class SubstanceCompoundInfusionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstanceCompoundInfusionData> _instance;
} _SubstanceCompoundInfusionData_default_instance_;
class SubstanceInfusionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstanceInfusionData> _instance;
} _SubstanceInfusionData_default_instance_;
class SupplementalOxygenDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SupplementalOxygenData> _instance;
} _SupplementalOxygenData_default_instance_;
class TensionPneumothoraxDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TensionPneumothoraxData> _instance;
} _TensionPneumothoraxData_default_instance_;
class UrinateDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UrinateData> _instance;
} _UrinateData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_AcuteRespiratoryDistressSyndromeExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AcuteRespiratoryDistressSyndromeExacerbationData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AcuteRespiratoryDistressSyndromeExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AcuteRespiratoryDistressSyndromeExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_AcuteStressData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AcuteStressData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AcuteStressData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AcuteStressData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AcuteStressData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_AirwayObstructionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AirwayObstructionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AirwayObstructionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AirwayObstructionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AirwayObstructionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_AnyConsciousRespirationCommandData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnyConsciousRespirationCommandData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnyConsciousRespirationCommandData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AnyConsciousRespirationCommandData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_AnyConsciousRespirationCommandData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_ForcedInhaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_ForcedExhaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_ForcedPauseData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_UseInhalerData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,}};

static void InitDefaultsscc_info_AnyPatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnyPatientActionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnyPatientActionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<31> scc_info_AnyPatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 31, 0, InitDefaultsscc_info_AnyPatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientAssessmentRequestData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_AcuteRespiratoryDistressSyndromeExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_AcuteStressData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_AirwayObstructionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_AsthmaAttackData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_BrainInjuryData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_BronchoconstrictionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_CardiacArrestData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_ChestCompressionForceData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_ChestCompressionForceScaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_ChestOcclusiveDressingData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_ChronicObstructivePulmonaryDiseaseExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_ConsciousRespirationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_ConsumeNutrientsData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_DyspneaData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_ExerciseData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_HemorrhageData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_ImpairedAlveolarExchangeExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_IntubationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_LobarPneumoniaExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_MechanicalVentilationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_NeedleDecompressionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_PericardialEffusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_PulmonaryShuntExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_RespiratoryFatigueData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_SubstanceBolusData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_SubstanceCompoundInfusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_SubstanceInfusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_SupplementalOxygenData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_TensionPneumothoraxData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_UrinateData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,}};

static void InitDefaultsscc_info_AsthmaAttackData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AsthmaAttackData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AsthmaAttackData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AsthmaAttackData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AsthmaAttackData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_BrainInjuryData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_BrainInjuryData_default_instance_;
    new (ptr) ::pulse::cdm::bind::BrainInjuryData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BrainInjuryData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BrainInjuryData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_BronchoconstrictionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_BronchoconstrictionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::BronchoconstrictionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BronchoconstrictionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BronchoconstrictionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_CardiacArrestData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_CardiacArrestData_default_instance_;
    new (ptr) ::pulse::cdm::bind::CardiacArrestData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CardiacArrestData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CardiacArrestData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,}};

static void InitDefaultsscc_info_ChestCompressionForceData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ChestCompressionForceData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ChestCompressionForceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChestCompressionForceData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChestCompressionForceData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_ScalarForceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ChestCompressionForceScaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ChestCompressionForceScaleData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ChestCompressionForceScaleData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ChestCompressionForceScaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ChestCompressionForceScaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ChestOcclusiveDressingData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ChestOcclusiveDressingData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ChestOcclusiveDressingData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChestOcclusiveDressingData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChestOcclusiveDressingData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,}};

static void InitDefaultsscc_info_ChronicObstructivePulmonaryDiseaseExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ChronicObstructivePulmonaryDiseaseExacerbationData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChronicObstructivePulmonaryDiseaseExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChronicObstructivePulmonaryDiseaseExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ConsciousRespirationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ConsciousRespirationData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ConsciousRespirationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConsciousRespirationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ConsciousRespirationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_AnyConsciousRespirationCommandData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,}};

static void InitDefaultsscc_info_ConsumeNutrientsData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ConsumeNutrientsData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ConsumeNutrientsData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConsumeNutrientsData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ConsumeNutrientsData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_NutritionData_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto.base,}};

static void InitDefaultsscc_info_DyspneaData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_DyspneaData_default_instance_;
    new (ptr) ::pulse::cdm::bind::DyspneaData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DyspneaData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DyspneaData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ExerciseData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ExerciseData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ExerciseData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ExerciseData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ExerciseData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ForcedExhaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ForcedExhaleData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ForcedExhaleData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ForcedExhaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ForcedExhaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ForcedInhaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ForcedInhaleData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ForcedInhaleData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ForcedInhaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ForcedInhaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ForcedPauseData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ForcedPauseData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ForcedPauseData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ForcedPauseData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ForcedPauseData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_HemorrhageData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_HemorrhageData_default_instance_;
    new (ptr) ::pulse::cdm::bind::HemorrhageData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_HemorrhageData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_HemorrhageData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ImpairedAlveolarExchangeExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ImpairedAlveolarExchangeExacerbationData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ImpairedAlveolarExchangeExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ImpairedAlveolarExchangeExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_ScalarAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_IntubationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_IntubationData_default_instance_;
    new (ptr) ::pulse::cdm::bind::IntubationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntubationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IntubationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,}};

static void InitDefaultsscc_info_LobarPneumoniaExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_LobarPneumoniaExacerbationData_default_instance_;
    new (ptr) ::pulse::cdm::bind::LobarPneumoniaExacerbationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LobarPneumoniaExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LobarPneumoniaExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_MechanicalVentilationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_MechanicalVentilationData_default_instance_;
    new (ptr) ::pulse::cdm::bind::MechanicalVentilationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_MechanicalVentilationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_MechanicalVentilationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_SubstanceFractionData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
      &scc_info_SubstanceConcentrationData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,}};

static void InitDefaultsscc_info_NeedleDecompressionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_NeedleDecompressionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::NeedleDecompressionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NeedleDecompressionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NeedleDecompressionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,}};

static void InitDefaultsscc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_PatientActionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::PatientActionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_ActionData_pulse_2fcdm_2fbind_2fActions_2eproto.base,}};

static void InitDefaultsscc_info_PatientAssessmentRequestData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_PatientAssessmentRequestData_default_instance_;
    new (ptr) ::pulse::cdm::bind::PatientAssessmentRequestData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PatientAssessmentRequestData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PatientAssessmentRequestData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,}};

static void InitDefaultsscc_info_PericardialEffusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_PericardialEffusionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::PericardialEffusionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PericardialEffusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PericardialEffusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_PulmonaryShuntExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_PulmonaryShuntExacerbationData_default_instance_;
    new (ptr) ::pulse::cdm::bind::PulmonaryShuntExacerbationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PulmonaryShuntExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PulmonaryShuntExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_RespiratoryFatigueData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_RespiratoryFatigueData_default_instance_;
    new (ptr) ::pulse::cdm::bind::RespiratoryFatigueData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RespiratoryFatigueData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RespiratoryFatigueData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_SubstanceBolusData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_SubstanceBolusData_default_instance_;
    new (ptr) ::pulse::cdm::bind::SubstanceBolusData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SubstanceBolusData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_SubstanceBolusData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_SubstanceCompoundInfusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_SubstanceCompoundInfusionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::SubstanceCompoundInfusionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SubstanceCompoundInfusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SubstanceCompoundInfusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_SubstanceInfusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_SubstanceInfusionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::SubstanceInfusionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SubstanceInfusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SubstanceInfusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_SupplementalOxygenData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_SupplementalOxygenData_default_instance_;
    new (ptr) ::pulse::cdm::bind::SupplementalOxygenData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SupplementalOxygenData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SupplementalOxygenData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_TensionPneumothoraxData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_TensionPneumothoraxData_default_instance_;
    new (ptr) ::pulse::cdm::bind::TensionPneumothoraxData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TensionPneumothoraxData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TensionPneumothoraxData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_UrinateData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_UrinateData_default_instance_;
    new (ptr) ::pulse::cdm::bind::UrinateData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UrinateData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UrinateData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {
      &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,}};

static void InitDefaultsscc_info_UseInhalerData_pulse_2fcdm_2fbind_2fPatientActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_UseInhalerData_default_instance_;
    new (ptr) ::pulse::cdm::bind::UseInhalerData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseInhalerData_pulse_2fcdm_2fbind_2fPatientActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UseInhalerData_pulse_2fcdm_2fbind_2fPatientActions_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fPatientActions_2eproto[38];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPatientActions_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fPatientActions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyPatientActionData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyPatientActionData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyPatientActionData, Action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientActionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientActionData, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientAssessmentRequestData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientAssessmentRequestData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientAssessmentRequestData, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData, severity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData, leftlungaffected_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData, rightlungaffected_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AcuteStressData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AcuteStressData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AcuteStressData, severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AirwayObstructionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AirwayObstructionData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AirwayObstructionData, severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AsthmaAttackData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AsthmaAttackData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AsthmaAttackData, severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BrainInjuryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BrainInjuryData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BrainInjuryData, type_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BrainInjuryData, severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BronchoconstrictionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BronchoconstrictionData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BronchoconstrictionData, severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiacArrestData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiacArrestData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiacArrestData, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChestCompressionForceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChestCompressionForceData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChestCompressionForceData, force_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChestCompressionForceScaleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChestCompressionForceScaleData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChestCompressionForceScaleData, forcescale_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChestCompressionForceScaleData, forceperiod_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChestOcclusiveDressingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChestOcclusiveDressingData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChestOcclusiveDressingData, state_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChestOcclusiveDressingData, side_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData, bronchitisseverity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData, emphysemaseverity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DyspneaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DyspneaData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DyspneaData, severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ForcedInhaleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ForcedInhaleData, inspiratorycapacityfraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ForcedInhaleData, inhaleperiod_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ForcedInhaleData, holdperiod_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ForcedInhaleData, releaseperiod_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ForcedExhaleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ForcedExhaleData, expiratoryreservevolumefraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ForcedExhaleData, exhaleperiod_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ForcedExhaleData, holdperiod_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ForcedExhaleData, releaseperiod_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ForcedPauseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ForcedPauseData, period_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UseInhalerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyConsciousRespirationCommandData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyConsciousRespirationCommandData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyConsciousRespirationCommandData, comment_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyConsciousRespirationCommandData, Command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ConsciousRespirationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ConsciousRespirationData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ConsciousRespirationData, startimmediately_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ConsciousRespirationData, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ConsumeNutrientsData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ConsumeNutrientsData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ConsumeNutrientsData, patientaction_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ConsumeNutrientsData, Option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ExerciseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ExerciseData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ExerciseData, intensity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::HemorrhageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::HemorrhageData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::HemorrhageData, type_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::HemorrhageData, compartment_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::HemorrhageData, flowrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::HemorrhageData, severity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::HemorrhageData, totalbloodlost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData, patientaction_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData, Value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::IntubationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::IntubationData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::IntubationData, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LobarPneumoniaExacerbationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LobarPneumoniaExacerbationData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LobarPneumoniaExacerbationData, severity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LobarPneumoniaExacerbationData, leftlungaffected_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LobarPneumoniaExacerbationData, rightlungaffected_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilationData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilationData, state_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilationData, flow_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilationData, pressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilationData, gasfraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilationData, aerosol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NeedleDecompressionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NeedleDecompressionData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NeedleDecompressionData, state_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NeedleDecompressionData, side_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PericardialEffusionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PericardialEffusionData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PericardialEffusionData, effusionrate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryShuntExacerbationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryShuntExacerbationData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryShuntExacerbationData, severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratoryFatigueData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratoryFatigueData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratoryFatigueData, severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceBolusData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceBolusData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceBolusData, substance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceBolusData, administrationroute_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceBolusData, administrationduration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceBolusData, concentration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceBolusData, dose_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceBolusData, totalinfuseddose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceCompoundInfusionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceCompoundInfusionData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceCompoundInfusionData, substancecompound_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceCompoundInfusionData, bagvolume_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceCompoundInfusionData, rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceInfusionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceInfusionData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceInfusionData, substance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceInfusionData, concentration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceInfusionData, rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SupplementalOxygenData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SupplementalOxygenData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SupplementalOxygenData, device_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SupplementalOxygenData, flow_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SupplementalOxygenData, volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TensionPneumothoraxData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TensionPneumothoraxData, patientaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TensionPneumothoraxData, type_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TensionPneumothoraxData, side_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TensionPneumothoraxData, severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinateData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinateData, patientaction_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::AnyPatientActionData)},
  { 37, -1, sizeof(::pulse::cdm::bind::PatientActionData)},
  { 43, -1, sizeof(::pulse::cdm::bind::PatientAssessmentRequestData)},
  { 50, -1, sizeof(::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData)},
  { 59, -1, sizeof(::pulse::cdm::bind::AcuteStressData)},
  { 66, -1, sizeof(::pulse::cdm::bind::AirwayObstructionData)},
  { 73, -1, sizeof(::pulse::cdm::bind::AsthmaAttackData)},
  { 80, -1, sizeof(::pulse::cdm::bind::BrainInjuryData)},
  { 88, -1, sizeof(::pulse::cdm::bind::BronchoconstrictionData)},
  { 95, -1, sizeof(::pulse::cdm::bind::CardiacArrestData)},
  { 102, -1, sizeof(::pulse::cdm::bind::ChestCompressionForceData)},
  { 109, -1, sizeof(::pulse::cdm::bind::ChestCompressionForceScaleData)},
  { 117, -1, sizeof(::pulse::cdm::bind::ChestOcclusiveDressingData)},
  { 125, -1, sizeof(::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData)},
  { 133, -1, sizeof(::pulse::cdm::bind::DyspneaData)},
  { 140, -1, sizeof(::pulse::cdm::bind::ForcedInhaleData)},
  { 149, -1, sizeof(::pulse::cdm::bind::ForcedExhaleData)},
  { 158, -1, sizeof(::pulse::cdm::bind::ForcedPauseData)},
  { 164, -1, sizeof(::pulse::cdm::bind::UseInhalerData)},
  { 169, -1, sizeof(::pulse::cdm::bind::AnyConsciousRespirationCommandData)},
  { 180, -1, sizeof(::pulse::cdm::bind::ConsciousRespirationData)},
  { 188, -1, sizeof(::pulse::cdm::bind::ConsumeNutrientsData)},
  { 197, -1, sizeof(::pulse::cdm::bind::ExerciseData)},
  { 204, -1, sizeof(::pulse::cdm::bind::HemorrhageData)},
  { 215, -1, sizeof(::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData)},
  { 225, -1, sizeof(::pulse::cdm::bind::IntubationData)},
  { 232, -1, sizeof(::pulse::cdm::bind::LobarPneumoniaExacerbationData)},
  { 241, -1, sizeof(::pulse::cdm::bind::MechanicalVentilationData)},
  { 252, -1, sizeof(::pulse::cdm::bind::NeedleDecompressionData)},
  { 260, -1, sizeof(::pulse::cdm::bind::PericardialEffusionData)},
  { 267, -1, sizeof(::pulse::cdm::bind::PulmonaryShuntExacerbationData)},
  { 274, -1, sizeof(::pulse::cdm::bind::RespiratoryFatigueData)},
  { 281, -1, sizeof(::pulse::cdm::bind::SubstanceBolusData)},
  { 293, -1, sizeof(::pulse::cdm::bind::SubstanceCompoundInfusionData)},
  { 302, -1, sizeof(::pulse::cdm::bind::SubstanceInfusionData)},
  { 311, -1, sizeof(::pulse::cdm::bind::SupplementalOxygenData)},
  { 320, -1, sizeof(::pulse::cdm::bind::TensionPneumothoraxData)},
  { 329, -1, sizeof(::pulse::cdm::bind::UrinateData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnyPatientActionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_PatientActionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_PatientAssessmentRequestData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AcuteRespiratoryDistressSyndromeExacerbationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AcuteStressData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AirwayObstructionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AsthmaAttackData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_BrainInjuryData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_BronchoconstrictionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_CardiacArrestData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ChestCompressionForceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ChestCompressionForceScaleData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ChestOcclusiveDressingData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ChronicObstructivePulmonaryDiseaseExacerbationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_DyspneaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ForcedInhaleData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ForcedExhaleData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ForcedPauseData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_UseInhalerData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnyConsciousRespirationCommandData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ConsciousRespirationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ConsumeNutrientsData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ExerciseData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_HemorrhageData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ImpairedAlveolarExchangeExacerbationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_IntubationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_LobarPneumoniaExacerbationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_MechanicalVentilationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_NeedleDecompressionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_PericardialEffusionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_PulmonaryShuntExacerbationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_RespiratoryFatigueData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_SubstanceBolusData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_SubstanceCompoundInfusionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_SubstanceInfusionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_SupplementalOxygenData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_TensionPneumothoraxData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_UrinateData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fPatientActions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#pulse/cdm/bind/PatientActions.proto\022\016p"
  "ulse.cdm.bind\032\032pulse/cdm/bind/Enums.prot"
  "o\032\037pulse/cdm/bind/Properties.proto\032\036puls"
  "e/cdm/bind/Substance.proto\032%pulse/cdm/bi"
  "nd/PatientNutrition.proto\032\034pulse/cdm/bin"
  "d/Actions.proto\032\'pulse/cdm/bind/PatientA"
  "ssessments.proto\"\344\021\n\024AnyPatientActionDat"
  "a\022B\n\nAssessment\030\001 \001(\0132,.pulse.cdm.bind.P"
  "atientAssessmentRequestDataH\000\022x\n,AcuteRe"
  "spiratoryDistressSyndromeExacerbation\030\002 "
  "\001(\0132@.pulse.cdm.bind.AcuteRespiratoryDis"
  "tressSyndromeExacerbationDataH\000\0226\n\013Acute"
  "Stress\030\003 \001(\0132\037.pulse.cdm.bind.AcuteStres"
  "sDataH\000\022B\n\021AirwayObstruction\030\004 \001(\0132%.pul"
  "se.cdm.bind.AirwayObstructionDataH\000\0228\n\014A"
  "sthmaAttack\030\005 \001(\0132 .pulse.cdm.bind.Asthm"
  "aAttackDataH\000\0226\n\013BrainInjury\030\006 \001(\0132\037.pul"
  "se.cdm.bind.BrainInjuryDataH\000\022F\n\023Broncho"
  "constriction\030\007 \001(\0132\'.pulse.cdm.bind.Bron"
  "choconstrictionDataH\000\022:\n\rCardiacArrest\030\010"
  " \001(\0132!.pulse.cdm.bind.CardiacArrestDataH"
  "\000\022J\n\025ChestCompressionForce\030\t \001(\0132).pulse"
  ".cdm.bind.ChestCompressionForceDataH\000\022T\n"
  "\032ChestCompressionForceScale\030\n \001(\0132..puls"
  "e.cdm.bind.ChestCompressionForceScaleDat"
  "aH\000\022L\n\026ChestOcclusiveDressing\030\013 \001(\0132*.pu"
  "lse.cdm.bind.ChestOcclusiveDressingDataH"
  "\000\022|\n.ChronicObstructivePulmonaryDiseaseE"
  "xacerbation\030\014 \001(\0132B.pulse.cdm.bind.Chron"
  "icObstructivePulmonaryDiseaseExacerbatio"
  "nDataH\000\022H\n\024ConsciousRespiration\030\r \001(\0132(."
  "pulse.cdm.bind.ConsciousRespirationDataH"
  "\000\022@\n\020ConsumeNutrients\030\016 \001(\0132$.pulse.cdm."
  "bind.ConsumeNutrientsDataH\000\022.\n\007Dyspnea\030\017"
  " \001(\0132\033.pulse.cdm.bind.DyspneaDataH\000\0220\n\010E"
  "xercise\030\020 \001(\0132\034.pulse.cdm.bind.ExerciseD"
  "ataH\000\0224\n\nHemorrhage\030\021 \001(\0132\036.pulse.cdm.bi"
  "nd.HemorrhageDataH\000\022h\n$ImpairedAlveolarE"
  "xchangeExacerbation\030\022 \001(\01328.pulse.cdm.bi"
  "nd.ImpairedAlveolarExchangeExacerbationD"
  "ataH\000\0224\n\nIntubation\030\023 \001(\0132\036.pulse.cdm.bi"
  "nd.IntubationDataH\000\022T\n\032LobarPneumoniaExa"
  "cerbation\030\024 \001(\0132..pulse.cdm.bind.LobarPn"
  "eumoniaExacerbationDataH\000\022J\n\025MechanicalV"
  "entilation\030\025 \001(\0132).pulse.cdm.bind.Mechan"
  "icalVentilationDataH\000\022F\n\023NeedleDecompres"
  "sion\030\026 \001(\0132\'.pulse.cdm.bind.NeedleDecomp"
  "ressionDataH\000\022F\n\023PericardialEffusion\030\027 \001"
  "(\0132\'.pulse.cdm.bind.PericardialEffusionD"
  "ataH\000\022T\n\032PulmonaryShuntExacerbation\030\030 \001("
  "\0132..pulse.cdm.bind.PulmonaryShuntExacerb"
  "ationDataH\000\022D\n\022RespiratoryFatigue\030\031 \001(\0132"
  "&.pulse.cdm.bind.RespiratoryFatigueDataH"
  "\000\022<\n\016SubstanceBolus\030\032 \001(\0132\".pulse.cdm.bi"
  "nd.SubstanceBolusDataH\000\022R\n\031SubstanceComp"
  "oundInfusion\030\033 \001(\0132-.pulse.cdm.bind.Subs"
  "tanceCompoundInfusionDataH\000\022B\n\021Substance"
  "Infusion\030\034 \001(\0132%.pulse.cdm.bind.Substanc"
  "eInfusionDataH\000\022D\n\022SupplementalOxygen\030\035 "
  "\001(\0132&.pulse.cdm.bind.SupplementalOxygenD"
  "ataH\000\022F\n\023TensionPneumothorax\030\036 \001(\0132\'.pul"
  "se.cdm.bind.TensionPneumothoraxDataH\000\022.\n"
  "\007Urinate\030\037 \001(\0132\033.pulse.cdm.bind.UrinateD"
  "ataH\000B\010\n\006Action\"\?\n\021PatientActionData\022*\n\006"
  "Action\030\001 \001(\0132\032.pulse.cdm.bind.ActionData"
  "\"\216\001\n\034PatientAssessmentRequestData\0228\n\rPat"
  "ientAction\030\001 \001(\0132!.pulse.cdm.bind.Patien"
  "tActionData\0224\n\004Type\030\002 \001(\0162&.pulse.cdm.bi"
  "nd.ePatientAssessmentType\"\223\002\n0AcuteRespi"
  "ratoryDistressSyndromeExacerbationData\0228"
  "\n\rPatientAction\030\001 \001(\0132!.pulse.cdm.bind.P"
  "atientActionData\0220\n\010Severity\030\002 \001(\0132\036.pul"
  "se.cdm.bind.Scalar0To1Data\0228\n\020LeftLungAf"
  "fected\030\003 \001(\0132\036.pulse.cdm.bind.Scalar0To1"
  "Data\0229\n\021RightLungAffected\030\004 \001(\0132\036.pulse."
  "cdm.bind.Scalar0To1Data\"}\n\017AcuteStressDa"
  "ta\0228\n\rPatientAction\030\001 \001(\0132!.pulse.cdm.bi"
  "nd.PatientActionData\0220\n\010Severity\030\002 \001(\0132\036"
  ".pulse.cdm.bind.Scalar0To1Data\"\203\001\n\025Airwa"
  "yObstructionData\0228\n\rPatientAction\030\001 \001(\0132"
  "!.pulse.cdm.bind.PatientActionData\0220\n\010Se"
  "verity\030\002 \001(\0132\036.pulse.cdm.bind.Scalar0To1"
  "Data\"~\n\020AsthmaAttackData\0228\n\rPatientActio"
  "n\030\001 \001(\0132!.pulse.cdm.bind.PatientActionDa"
  "ta\0220\n\010Severity\030\002 \001(\0132\036.pulse.cdm.bind.Sc"
  "alar0To1Data\"\347\001\n\017BrainInjuryData\0228\n\rPati"
  "entAction\030\001 \001(\0132!.pulse.cdm.bind.Patient"
  "ActionData\0223\n\004Type\030\002 \001(\0162%.pulse.cdm.bin"
  "d.BrainInjuryData.eType\0220\n\010Severity\030\003 \001("
  "\0132\036.pulse.cdm.bind.Scalar0To1Data\"3\n\005eTy"
  "pe\022\013\n\007Diffuse\020\000\022\r\n\tLeftFocal\020\001\022\016\n\nRightF"
  "ocal\020\002\"\205\001\n\027BronchoconstrictionData\0228\n\rPa"
  "tientAction\030\001 \001(\0132!.pulse.cdm.bind.Patie"
  "ntActionData\0220\n\010Severity\030\002 \001(\0132\036.pulse.c"
  "dm.bind.Scalar0To1Data\"u\n\021CardiacArrestD"
  "ata\0228\n\rPatientAction\030\001 \001(\0132!.pulse.cdm.b"
  "ind.PatientActionData\022&\n\005State\030\002 \001(\0162\027.p"
  "ulse.cdm.bind.eSwitch\"\205\001\n\031ChestCompressi"
  "onForceData\0228\n\rPatientAction\030\001 \001(\0132!.pul"
  "se.cdm.bind.PatientActionData\022.\n\005Force\030\002"
  " \001(\0132\037.pulse.cdm.bind.ScalarForceData\"\303\001"
  "\n\036ChestCompressionForceScaleData\0228\n\rPati"
  "entAction\030\001 \001(\0132!.pulse.cdm.bind.Patient"
  "ActionData\0222\n\nForceScale\030\002 \001(\0132\036.pulse.c"
  "dm.bind.Scalar0To1Data\0223\n\013ForcePeriod\030\003 "
  "\001(\0132\036.pulse.cdm.bind.ScalarTimeData\"\243\001\n\032"
  "ChestOcclusiveDressingData\0228\n\rPatientAct"
  "ion\030\001 \001(\0132!.pulse.cdm.bind.PatientAction"
  "Data\022&\n\005State\030\002 \001(\0162\027.pulse.cdm.bind.eSw"
  "itch\022#\n\004Side\030\003 \001(\0162\025.pulse.cdm.bind.eSid"
  "e\"\345\001\n2ChronicObstructivePulmonaryDisease"
  "ExacerbationData\0228\n\rPatientAction\030\001 \001(\0132"
  "!.pulse.cdm.bind.PatientActionData\022:\n\022Br"
  "onchitisSeverity\030\002 \001(\0132\036.pulse.cdm.bind."
  "Scalar0To1Data\0229\n\021EmphysemaSeverity\030\003 \001("
  "\0132\036.pulse.cdm.bind.Scalar0To1Data\"y\n\013Dys"
  "pneaData\0228\n\rPatientAction\030\001 \001(\0132!.pulse."
  "cdm.bind.PatientActionData\0220\n\010Severity\030\002"
  " \001(\0132\036.pulse.cdm.bind.Scalar0To1Data\"\370\001\n"
  "\020ForcedInhaleData\022C\n\033InspiratoryCapacity"
  "Fraction\030\001 \001(\0132\036.pulse.cdm.bind.Scalar0T"
  "o1Data\0224\n\014InhalePeriod\030\002 \001(\0132\036.pulse.cdm"
  ".bind.ScalarTimeData\0222\n\nHoldPeriod\030\003 \001(\013"
  "2\036.pulse.cdm.bind.ScalarTimeData\0225\n\rRele"
  "asePeriod\030\004 \001(\0132\036.pulse.cdm.bind.ScalarT"
  "imeData\"\374\001\n\020ForcedExhaleData\022G\n\037Expirato"
  "ryReserveVolumeFraction\030\001 \001(\0132\036.pulse.cd"
  "m.bind.Scalar0To1Data\0224\n\014ExhalePeriod\030\002 "
  "\001(\0132\036.pulse.cdm.bind.ScalarTimeData\0222\n\nH"
  "oldPeriod\030\003 \001(\0132\036.pulse.cdm.bind.ScalarT"
  "imeData\0225\n\rReleasePeriod\030\004 \001(\0132\036.pulse.c"
  "dm.bind.ScalarTimeData\"A\n\017ForcedPauseDat"
  "a\022.\n\006Period\030\001 \001(\0132\036.pulse.cdm.bind.Scala"
  "rTimeData\"\020\n\016UseInhalerData\"\242\002\n\"AnyConsc"
  "iousRespirationCommandData\022\017\n\007Comment\030\001 "
  "\001(\t\0228\n\014ForcedInhale\030\002 \001(\0132 .pulse.cdm.bi"
  "nd.ForcedInhaleDataH\000\0228\n\014ForcedExhale\030\003 "
  "\001(\0132 .pulse.cdm.bind.ForcedExhaleDataH\000\022"
  "6\n\013ForcedPause\030\004 \001(\0132\037.pulse.cdm.bind.Fo"
  "rcedPauseDataH\000\0224\n\nUseInhaler\030\005 \001(\0132\036.pu"
  "lse.cdm.bind.UseInhalerDataH\000B\t\n\007Command"
  "\"\263\001\n\030ConsciousRespirationData\0228\n\rPatient"
  "Action\030\001 \001(\0132!.pulse.cdm.bind.PatientAct"
  "ionData\022\030\n\020StartImmediately\030\002 \001(\010\022C\n\007Com"
  "mand\030\003 \003(\01322.pulse.cdm.bind.AnyConscious"
  "RespirationCommandData\"\247\001\n\024ConsumeNutrie"
  "ntsData\0228\n\rPatientAction\030\001 \001(\0132!.pulse.c"
  "dm.bind.PatientActionData\0222\n\tNutrition\030\002"
  " \001(\0132\035.pulse.cdm.bind.NutritionDataH\000\022\027\n"
  "\rNutritionFile\030\003 \001(\tH\000B\010\n\006Option\"{\n\014Exer"
  "ciseData\0228\n\rPatientAction\030\001 \001(\0132!.pulse."
  "cdm.bind.PatientActionData\0221\n\tIntensity\030"
  "\002 \001(\0132\036.pulse.cdm.bind.Scalar0To1Data\"\337\002"
  "\n\016HemorrhageData\0228\n\rPatientAction\030\001 \001(\0132"
  "!.pulse.cdm.bind.PatientActionData\0222\n\004Ty"
  "pe\030\002 \001(\0162$.pulse.cdm.bind.HemorrhageData"
  ".eType\022\023\n\013Compartment\030\003 \001(\t\0229\n\010FlowRate\030"
  "\004 \001(\0132\'.pulse.cdm.bind.ScalarVolumePerTi"
  "meData\0220\n\010Severity\030\005 \001(\0132\036.pulse.cdm.bin"
  "d.Scalar0To1Data\0228\n\016TotalBloodLost\030\006 \001(\013"
  "2 .pulse.cdm.bind.ScalarVolumeData\"#\n\005eT"
  "ype\022\014\n\010External\020\000\022\014\n\010Internal\020\001\"\234\002\n(Impa"
  "iredAlveolarExchangeExacerbationData\0228\n\r"
  "PatientAction\030\001 \001(\0132!.pulse.cdm.bind.Pat"
  "ientActionData\022=\n\023ImpairedSurfaceArea\030\002 "
  "\001(\0132\036.pulse.cdm.bind.ScalarAreaDataH\000\022:\n"
  "\020ImpairedFraction\030\003 \001(\0132\036.pulse.cdm.bind"
  ".Scalar0To1DataH\000\0222\n\010Severity\030\004 \001(\0132\036.pu"
  "lse.cdm.bind.Scalar0To1DataH\000B\007\n\005Value\"\323"
  "\001\n\016IntubationData\0228\n\rPatientAction\030\001 \001(\013"
  "2!.pulse.cdm.bind.PatientActionData\0222\n\004T"
  "ype\030\002 \001(\0162$.pulse.cdm.bind.IntubationDat"
  "a.eType\"S\n\005eType\022\007\n\003Off\020\000\022\016\n\nEsophageal\020"
  "\001\022\020\n\014LeftMainstem\020\002\022\021\n\rRightMainstem\020\003\022\014"
  "\n\010Tracheal\020\004\"\201\002\n\036LobarPneumoniaExacerbat"
  "ionData\0228\n\rPatientAction\030\001 \001(\0132!.pulse.c"
  "dm.bind.PatientActionData\0220\n\010Severity\030\002 "
  "\001(\0132\036.pulse.cdm.bind.Scalar0To1Data\0228\n\020L"
  "eftLungAffected\030\003 \001(\0132\036.pulse.cdm.bind.S"
  "calar0To1Data\0229\n\021RightLungAffected\030\004 \001(\013"
  "2\036.pulse.cdm.bind.Scalar0To1Data\"\343\002\n\031Mec"
  "hanicalVentilationData\0228\n\rPatientAction\030"
  "\001 \001(\0132!.pulse.cdm.bind.PatientActionData"
  "\022&\n\005State\030\002 \001(\0162\027.pulse.cdm.bind.eSwitch"
  "\0225\n\004Flow\030\003 \001(\0132\'.pulse.cdm.bind.ScalarVo"
  "lumePerTimeData\0224\n\010Pressure\030\004 \001(\0132\".puls"
  "e.cdm.bind.ScalarPressureData\022:\n\013GasFrac"
  "tion\030\005 \003(\0132%.pulse.cdm.bind.SubstanceFra"
  "ctionData\022;\n\007Aerosol\030\006 \003(\0132*.pulse.cdm.b"
  "ind.SubstanceConcentrationData\"\240\001\n\027Needl"
  "eDecompressionData\0228\n\rPatientAction\030\001 \001("
  "\0132!.pulse.cdm.bind.PatientActionData\022&\n\005"
  "State\030\002 \001(\0162\027.pulse.cdm.bind.eSwitch\022#\n\004"
  "Side\030\003 \001(\0162\025.pulse.cdm.bind.eSide\"\222\001\n\027Pe"
  "ricardialEffusionData\0228\n\rPatientAction\030\001"
  " \001(\0132!.pulse.cdm.bind.PatientActionData\022"
  "=\n\014EffusionRate\030\002 \001(\0132\'.pulse.cdm.bind.S"
  "calarVolumePerTimeData\"\214\001\n\036PulmonaryShun"
  "tExacerbationData\0228\n\rPatientAction\030\001 \001(\013"
  "2!.pulse.cdm.bind.PatientActionData\0220\n\010S"
  "everity\030\002 \001(\0132\036.pulse.cdm.bind.Scalar0To"
  "1Data\"\204\001\n\026RespiratoryFatigueData\0228\n\rPati"
  "entAction\030\001 \001(\0132!.pulse.cdm.bind.Patient"
  "ActionData\0220\n\010Severity\030\002 \001(\0132\036.pulse.cdm"
  ".bind.Scalar0To1Data\"\334\004\n\022SubstanceBolusD"
  "ata\0228\n\rPatientAction\030\001 \001(\0132!.pulse.cdm.b"
  "ind.PatientActionData\022\021\n\tSubstance\030\002 \001(\t"
  "\022F\n\023AdministrationRoute\030\003 \001(\0162).pulse.cd"
  "m.bind.SubstanceBolusData.eRoute\022>\n\026Admi"
  "nistrationDuration\030\004 \001(\0132\036.pulse.cdm.bin"
  "d.ScalarTimeData\022>\n\rConcentration\030\005 \001(\0132"
  "\'.pulse.cdm.bind.ScalarMassPerVolumeData"
  "\022.\n\004Dose\030\006 \001(\0132 .pulse.cdm.bind.ScalarVo"
  "lumeData\022:\n\020TotalInfusedDose\030\007 \001(\0132 .pul"
  "se.cdm.bind.ScalarVolumeData\"\304\001\n\006eRoute\022"
  "\017\n\013Intravenous\020\000\022\014\n\010Epidural\020\001\022\020\n\014Intrao"
  "sseous\020\002\022\021\n\rIntraarterial\020\003\022\020\n\014Intracard"
  "iac\020\004\022\021\n\rIntracerebral\020\005\022\033\n\027Intracerebro"
  "ventricular\020\006\022\017\n\013Intradermal\020\007\022\021\n\rIntram"
  "uscular\020\010\022\020\n\014Subcutaneous\020\t\"\340\001\n\035Substanc"
  "eCompoundInfusionData\0228\n\rPatientAction\030\001"
  " \001(\0132!.pulse.cdm.bind.PatientActionData\022"
  "\031\n\021SubstanceCompound\030\002 \001(\t\0223\n\tBagVolume\030"
  "\003 \001(\0132 .pulse.cdm.bind.ScalarVolumeData\022"
  "5\n\004Rate\030\004 \001(\0132\'.pulse.cdm.bind.ScalarVol"
  "umePerTimeData\"\333\001\n\025SubstanceInfusionData"
  "\0228\n\rPatientAction\030\001 \001(\0132!.pulse.cdm.bind"
  ".PatientActionData\022\021\n\tSubstance\030\002 \001(\t\022>\n"
  "\rConcentration\030\003 \001(\0132\'.pulse.cdm.bind.Sc"
  "alarMassPerVolumeData\0225\n\004Rate\030\004 \001(\0132\'.pu"
  "lse.cdm.bind.ScalarVolumePerTimeData\"\311\002\n"
  "\026SupplementalOxygenData\0228\n\rPatientAction"
  "\030\001 \001(\0132!.pulse.cdm.bind.PatientActionDat"
  "a\022>\n\006Device\030\002 \001(\0162..pulse.cdm.bind.Suppl"
  "ementalOxygenData.eDevice\0225\n\004Flow\030\003 \001(\0132"
  "\'.pulse.cdm.bind.ScalarVolumePerTimeData"
  "\0220\n\006Volume\030\004 \001(\0132 .pulse.cdm.bind.Scalar"
  "VolumeData\"L\n\007eDevice\022\010\n\004None\020\000\022\020\n\014Nasal"
  "Cannula\020\001\022\016\n\nSimpleMask\020\002\022\025\n\021NonRebreath"
  "erMask\020\003\"\317\001\n\027TensionPneumothoraxData\0228\n\r"
  "PatientAction\030\001 \001(\0132!.pulse.cdm.bind.Pat"
  "ientActionData\022#\n\004Type\030\002 \001(\0162\025.pulse.cdm"
  ".bind.eGate\022#\n\004Side\030\003 \001(\0162\025.pulse.cdm.bi"
  "nd.eSide\0220\n\010Severity\030\004 \001(\0132\036.pulse.cdm.b"
  "ind.Scalar0To1Data\"G\n\013UrinateData\0228\n\rPat"
  "ientAction\030\001 \001(\0132!.pulse.cdm.bind.Patien"
  "tActionDataB/\n\032com.kitware.pulse.cdm.bin"
  "dH\001\252\002\016pulse.cdm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto_deps[6] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fActions_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fEnums_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto_sccs[38] = {
  &scc_info_AcuteRespiratoryDistressSyndromeExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_AcuteStressData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_AirwayObstructionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_AnyConsciousRespirationCommandData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_AnyPatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_AsthmaAttackData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_BrainInjuryData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_BronchoconstrictionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_CardiacArrestData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_ChestCompressionForceData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_ChestCompressionForceScaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_ChestOcclusiveDressingData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_ChronicObstructivePulmonaryDiseaseExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_ConsciousRespirationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_ConsumeNutrientsData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_DyspneaData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_ExerciseData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_ForcedExhaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_ForcedInhaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_ForcedPauseData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_HemorrhageData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_ImpairedAlveolarExchangeExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_IntubationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_LobarPneumoniaExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_MechanicalVentilationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_NeedleDecompressionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_PatientAssessmentRequestData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_PericardialEffusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_PulmonaryShuntExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_RespiratoryFatigueData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_SubstanceBolusData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_SubstanceCompoundInfusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_SubstanceInfusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_SupplementalOxygenData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_TensionPneumothoraxData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_UrinateData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
  &scc_info_UseInhalerData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcdm_2fbind_2fPatientActions_2eproto, "pulse/cdm/bind/PatientActions.proto", 9908,
  &descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto_deps, 38, 6,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fPatientActions_2eproto, 38, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPatientActions_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fPatientActions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fPatientActions_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto)), true);
namespace pulse {
namespace cdm {
namespace bind {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BrainInjuryData_eType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPatientActions_2eproto[0];
}
bool BrainInjuryData_eType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BrainInjuryData_eType BrainInjuryData::Diffuse;
constexpr BrainInjuryData_eType BrainInjuryData::LeftFocal;
constexpr BrainInjuryData_eType BrainInjuryData::RightFocal;
constexpr BrainInjuryData_eType BrainInjuryData::eType_MIN;
constexpr BrainInjuryData_eType BrainInjuryData::eType_MAX;
constexpr int BrainInjuryData::eType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HemorrhageData_eType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPatientActions_2eproto[1];
}
bool HemorrhageData_eType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HemorrhageData_eType HemorrhageData::External;
constexpr HemorrhageData_eType HemorrhageData::Internal;
constexpr HemorrhageData_eType HemorrhageData::eType_MIN;
constexpr HemorrhageData_eType HemorrhageData::eType_MAX;
constexpr int HemorrhageData::eType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntubationData_eType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPatientActions_2eproto[2];
}
bool IntubationData_eType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr IntubationData_eType IntubationData::Off;
constexpr IntubationData_eType IntubationData::Esophageal;
constexpr IntubationData_eType IntubationData::LeftMainstem;
constexpr IntubationData_eType IntubationData::RightMainstem;
constexpr IntubationData_eType IntubationData::Tracheal;
constexpr IntubationData_eType IntubationData::eType_MIN;
constexpr IntubationData_eType IntubationData::eType_MAX;
constexpr int IntubationData::eType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubstanceBolusData_eRoute_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPatientActions_2eproto[3];
}
bool SubstanceBolusData_eRoute_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SubstanceBolusData_eRoute SubstanceBolusData::Intravenous;
constexpr SubstanceBolusData_eRoute SubstanceBolusData::Epidural;
constexpr SubstanceBolusData_eRoute SubstanceBolusData::Intraosseous;
constexpr SubstanceBolusData_eRoute SubstanceBolusData::Intraarterial;
constexpr SubstanceBolusData_eRoute SubstanceBolusData::Intracardiac;
constexpr SubstanceBolusData_eRoute SubstanceBolusData::Intracerebral;
constexpr SubstanceBolusData_eRoute SubstanceBolusData::Intracerebroventricular;
constexpr SubstanceBolusData_eRoute SubstanceBolusData::Intradermal;
constexpr SubstanceBolusData_eRoute SubstanceBolusData::Intramuscular;
constexpr SubstanceBolusData_eRoute SubstanceBolusData::Subcutaneous;
constexpr SubstanceBolusData_eRoute SubstanceBolusData::eRoute_MIN;
constexpr SubstanceBolusData_eRoute SubstanceBolusData::eRoute_MAX;
constexpr int SubstanceBolusData::eRoute_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SupplementalOxygenData_eDevice_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPatientActions_2eproto[4];
}
bool SupplementalOxygenData_eDevice_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SupplementalOxygenData_eDevice SupplementalOxygenData::None;
constexpr SupplementalOxygenData_eDevice SupplementalOxygenData::NasalCannula;
constexpr SupplementalOxygenData_eDevice SupplementalOxygenData::SimpleMask;
constexpr SupplementalOxygenData_eDevice SupplementalOxygenData::NonRebreatherMask;
constexpr SupplementalOxygenData_eDevice SupplementalOxygenData::eDevice_MIN;
constexpr SupplementalOxygenData_eDevice SupplementalOxygenData::eDevice_MAX;
constexpr int SupplementalOxygenData::eDevice_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class AnyPatientActionData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientAssessmentRequestData& assessment(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData& acuterespiratorydistresssyndromeexacerbation(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::AcuteStressData& acutestress(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::AirwayObstructionData& airwayobstruction(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::AsthmaAttackData& asthmaattack(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::BrainInjuryData& braininjury(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::BronchoconstrictionData& bronchoconstriction(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::CardiacArrestData& cardiacarrest(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::ChestCompressionForceData& chestcompressionforce(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::ChestCompressionForceScaleData& chestcompressionforcescale(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::ChestOcclusiveDressingData& chestocclusivedressing(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData& chronicobstructivepulmonarydiseaseexacerbation(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::ConsciousRespirationData& consciousrespiration(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::ConsumeNutrientsData& consumenutrients(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::DyspneaData& dyspnea(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::ExerciseData& exercise(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::HemorrhageData& hemorrhage(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData& impairedalveolarexchangeexacerbation(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::IntubationData& intubation(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::LobarPneumoniaExacerbationData& lobarpneumoniaexacerbation(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::MechanicalVentilationData& mechanicalventilation(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::NeedleDecompressionData& needledecompression(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::PericardialEffusionData& pericardialeffusion(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::PulmonaryShuntExacerbationData& pulmonaryshuntexacerbation(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::RespiratoryFatigueData& respiratoryfatigue(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::SubstanceBolusData& substancebolus(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::SubstanceCompoundInfusionData& substancecompoundinfusion(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::SubstanceInfusionData& substanceinfusion(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::SupplementalOxygenData& supplementaloxygen(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::TensionPneumothoraxData& tensionpneumothorax(const AnyPatientActionData* msg);
  static const ::pulse::cdm::bind::UrinateData& urinate(const AnyPatientActionData* msg);
};

const ::pulse::cdm::bind::PatientAssessmentRequestData&
AnyPatientActionData::_Internal::assessment(const AnyPatientActionData* msg) {
  return *msg->Action_.assessment_;
}
const ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData&
AnyPatientActionData::_Internal::acuterespiratorydistresssyndromeexacerbation(const AnyPatientActionData* msg) {
  return *msg->Action_.acuterespiratorydistresssyndromeexacerbation_;
}
const ::pulse::cdm::bind::AcuteStressData&
AnyPatientActionData::_Internal::acutestress(const AnyPatientActionData* msg) {
  return *msg->Action_.acutestress_;
}
const ::pulse::cdm::bind::AirwayObstructionData&
AnyPatientActionData::_Internal::airwayobstruction(const AnyPatientActionData* msg) {
  return *msg->Action_.airwayobstruction_;
}
const ::pulse::cdm::bind::AsthmaAttackData&
AnyPatientActionData::_Internal::asthmaattack(const AnyPatientActionData* msg) {
  return *msg->Action_.asthmaattack_;
}
const ::pulse::cdm::bind::BrainInjuryData&
AnyPatientActionData::_Internal::braininjury(const AnyPatientActionData* msg) {
  return *msg->Action_.braininjury_;
}
const ::pulse::cdm::bind::BronchoconstrictionData&
AnyPatientActionData::_Internal::bronchoconstriction(const AnyPatientActionData* msg) {
  return *msg->Action_.bronchoconstriction_;
}
const ::pulse::cdm::bind::CardiacArrestData&
AnyPatientActionData::_Internal::cardiacarrest(const AnyPatientActionData* msg) {
  return *msg->Action_.cardiacarrest_;
}
const ::pulse::cdm::bind::ChestCompressionForceData&
AnyPatientActionData::_Internal::chestcompressionforce(const AnyPatientActionData* msg) {
  return *msg->Action_.chestcompressionforce_;
}
const ::pulse::cdm::bind::ChestCompressionForceScaleData&
AnyPatientActionData::_Internal::chestcompressionforcescale(const AnyPatientActionData* msg) {
  return *msg->Action_.chestcompressionforcescale_;
}
const ::pulse::cdm::bind::ChestOcclusiveDressingData&
AnyPatientActionData::_Internal::chestocclusivedressing(const AnyPatientActionData* msg) {
  return *msg->Action_.chestocclusivedressing_;
}
const ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData&
AnyPatientActionData::_Internal::chronicobstructivepulmonarydiseaseexacerbation(const AnyPatientActionData* msg) {
  return *msg->Action_.chronicobstructivepulmonarydiseaseexacerbation_;
}
const ::pulse::cdm::bind::ConsciousRespirationData&
AnyPatientActionData::_Internal::consciousrespiration(const AnyPatientActionData* msg) {
  return *msg->Action_.consciousrespiration_;
}
const ::pulse::cdm::bind::ConsumeNutrientsData&
AnyPatientActionData::_Internal::consumenutrients(const AnyPatientActionData* msg) {
  return *msg->Action_.consumenutrients_;
}
const ::pulse::cdm::bind::DyspneaData&
AnyPatientActionData::_Internal::dyspnea(const AnyPatientActionData* msg) {
  return *msg->Action_.dyspnea_;
}
const ::pulse::cdm::bind::ExerciseData&
AnyPatientActionData::_Internal::exercise(const AnyPatientActionData* msg) {
  return *msg->Action_.exercise_;
}
const ::pulse::cdm::bind::HemorrhageData&
AnyPatientActionData::_Internal::hemorrhage(const AnyPatientActionData* msg) {
  return *msg->Action_.hemorrhage_;
}
const ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData&
AnyPatientActionData::_Internal::impairedalveolarexchangeexacerbation(const AnyPatientActionData* msg) {
  return *msg->Action_.impairedalveolarexchangeexacerbation_;
}
const ::pulse::cdm::bind::IntubationData&
AnyPatientActionData::_Internal::intubation(const AnyPatientActionData* msg) {
  return *msg->Action_.intubation_;
}
const ::pulse::cdm::bind::LobarPneumoniaExacerbationData&
AnyPatientActionData::_Internal::lobarpneumoniaexacerbation(const AnyPatientActionData* msg) {
  return *msg->Action_.lobarpneumoniaexacerbation_;
}
const ::pulse::cdm::bind::MechanicalVentilationData&
AnyPatientActionData::_Internal::mechanicalventilation(const AnyPatientActionData* msg) {
  return *msg->Action_.mechanicalventilation_;
}
const ::pulse::cdm::bind::NeedleDecompressionData&
AnyPatientActionData::_Internal::needledecompression(const AnyPatientActionData* msg) {
  return *msg->Action_.needledecompression_;
}
const ::pulse::cdm::bind::PericardialEffusionData&
AnyPatientActionData::_Internal::pericardialeffusion(const AnyPatientActionData* msg) {
  return *msg->Action_.pericardialeffusion_;
}
const ::pulse::cdm::bind::PulmonaryShuntExacerbationData&
AnyPatientActionData::_Internal::pulmonaryshuntexacerbation(const AnyPatientActionData* msg) {
  return *msg->Action_.pulmonaryshuntexacerbation_;
}
const ::pulse::cdm::bind::RespiratoryFatigueData&
AnyPatientActionData::_Internal::respiratoryfatigue(const AnyPatientActionData* msg) {
  return *msg->Action_.respiratoryfatigue_;
}
const ::pulse::cdm::bind::SubstanceBolusData&
AnyPatientActionData::_Internal::substancebolus(const AnyPatientActionData* msg) {
  return *msg->Action_.substancebolus_;
}
const ::pulse::cdm::bind::SubstanceCompoundInfusionData&
AnyPatientActionData::_Internal::substancecompoundinfusion(const AnyPatientActionData* msg) {
  return *msg->Action_.substancecompoundinfusion_;
}
const ::pulse::cdm::bind::SubstanceInfusionData&
AnyPatientActionData::_Internal::substanceinfusion(const AnyPatientActionData* msg) {
  return *msg->Action_.substanceinfusion_;
}
const ::pulse::cdm::bind::SupplementalOxygenData&
AnyPatientActionData::_Internal::supplementaloxygen(const AnyPatientActionData* msg) {
  return *msg->Action_.supplementaloxygen_;
}
const ::pulse::cdm::bind::TensionPneumothoraxData&
AnyPatientActionData::_Internal::tensionpneumothorax(const AnyPatientActionData* msg) {
  return *msg->Action_.tensionpneumothorax_;
}
const ::pulse::cdm::bind::UrinateData&
AnyPatientActionData::_Internal::urinate(const AnyPatientActionData* msg) {
  return *msg->Action_.urinate_;
}
void AnyPatientActionData::set_allocated_assessment(::pulse::cdm::bind::PatientAssessmentRequestData* assessment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (assessment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(assessment);
    if (message_arena != submessage_arena) {
      assessment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assessment, submessage_arena);
    }
    set_has_assessment();
    Action_.assessment_ = assessment;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.Assessment)
}
void AnyPatientActionData::set_allocated_acuterespiratorydistresssyndromeexacerbation(::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData* acuterespiratorydistresssyndromeexacerbation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (acuterespiratorydistresssyndromeexacerbation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(acuterespiratorydistresssyndromeexacerbation);
    if (message_arena != submessage_arena) {
      acuterespiratorydistresssyndromeexacerbation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acuterespiratorydistresssyndromeexacerbation, submessage_arena);
    }
    set_has_acuterespiratorydistresssyndromeexacerbation();
    Action_.acuterespiratorydistresssyndromeexacerbation_ = acuterespiratorydistresssyndromeexacerbation;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.AcuteRespiratoryDistressSyndromeExacerbation)
}
void AnyPatientActionData::set_allocated_acutestress(::pulse::cdm::bind::AcuteStressData* acutestress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (acutestress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(acutestress);
    if (message_arena != submessage_arena) {
      acutestress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acutestress, submessage_arena);
    }
    set_has_acutestress();
    Action_.acutestress_ = acutestress;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.AcuteStress)
}
void AnyPatientActionData::set_allocated_airwayobstruction(::pulse::cdm::bind::AirwayObstructionData* airwayobstruction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (airwayobstruction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(airwayobstruction);
    if (message_arena != submessage_arena) {
      airwayobstruction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, airwayobstruction, submessage_arena);
    }
    set_has_airwayobstruction();
    Action_.airwayobstruction_ = airwayobstruction;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.AirwayObstruction)
}
void AnyPatientActionData::set_allocated_asthmaattack(::pulse::cdm::bind::AsthmaAttackData* asthmaattack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (asthmaattack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(asthmaattack);
    if (message_arena != submessage_arena) {
      asthmaattack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asthmaattack, submessage_arena);
    }
    set_has_asthmaattack();
    Action_.asthmaattack_ = asthmaattack;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.AsthmaAttack)
}
void AnyPatientActionData::set_allocated_braininjury(::pulse::cdm::bind::BrainInjuryData* braininjury) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (braininjury) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(braininjury);
    if (message_arena != submessage_arena) {
      braininjury = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, braininjury, submessage_arena);
    }
    set_has_braininjury();
    Action_.braininjury_ = braininjury;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.BrainInjury)
}
void AnyPatientActionData::set_allocated_bronchoconstriction(::pulse::cdm::bind::BronchoconstrictionData* bronchoconstriction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (bronchoconstriction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bronchoconstriction);
    if (message_arena != submessage_arena) {
      bronchoconstriction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bronchoconstriction, submessage_arena);
    }
    set_has_bronchoconstriction();
    Action_.bronchoconstriction_ = bronchoconstriction;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.Bronchoconstriction)
}
void AnyPatientActionData::set_allocated_cardiacarrest(::pulse::cdm::bind::CardiacArrestData* cardiacarrest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (cardiacarrest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cardiacarrest);
    if (message_arena != submessage_arena) {
      cardiacarrest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cardiacarrest, submessage_arena);
    }
    set_has_cardiacarrest();
    Action_.cardiacarrest_ = cardiacarrest;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.CardiacArrest)
}
void AnyPatientActionData::set_allocated_chestcompressionforce(::pulse::cdm::bind::ChestCompressionForceData* chestcompressionforce) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (chestcompressionforce) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chestcompressionforce);
    if (message_arena != submessage_arena) {
      chestcompressionforce = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chestcompressionforce, submessage_arena);
    }
    set_has_chestcompressionforce();
    Action_.chestcompressionforce_ = chestcompressionforce;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.ChestCompressionForce)
}
void AnyPatientActionData::set_allocated_chestcompressionforcescale(::pulse::cdm::bind::ChestCompressionForceScaleData* chestcompressionforcescale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (chestcompressionforcescale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chestcompressionforcescale);
    if (message_arena != submessage_arena) {
      chestcompressionforcescale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chestcompressionforcescale, submessage_arena);
    }
    set_has_chestcompressionforcescale();
    Action_.chestcompressionforcescale_ = chestcompressionforcescale;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.ChestCompressionForceScale)
}
void AnyPatientActionData::set_allocated_chestocclusivedressing(::pulse::cdm::bind::ChestOcclusiveDressingData* chestocclusivedressing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (chestocclusivedressing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chestocclusivedressing);
    if (message_arena != submessage_arena) {
      chestocclusivedressing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chestocclusivedressing, submessage_arena);
    }
    set_has_chestocclusivedressing();
    Action_.chestocclusivedressing_ = chestocclusivedressing;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.ChestOcclusiveDressing)
}
void AnyPatientActionData::set_allocated_chronicobstructivepulmonarydiseaseexacerbation(::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData* chronicobstructivepulmonarydiseaseexacerbation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (chronicobstructivepulmonarydiseaseexacerbation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chronicobstructivepulmonarydiseaseexacerbation);
    if (message_arena != submessage_arena) {
      chronicobstructivepulmonarydiseaseexacerbation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chronicobstructivepulmonarydiseaseexacerbation, submessage_arena);
    }
    set_has_chronicobstructivepulmonarydiseaseexacerbation();
    Action_.chronicobstructivepulmonarydiseaseexacerbation_ = chronicobstructivepulmonarydiseaseexacerbation;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.ChronicObstructivePulmonaryDiseaseExacerbation)
}
void AnyPatientActionData::set_allocated_consciousrespiration(::pulse::cdm::bind::ConsciousRespirationData* consciousrespiration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (consciousrespiration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(consciousrespiration);
    if (message_arena != submessage_arena) {
      consciousrespiration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consciousrespiration, submessage_arena);
    }
    set_has_consciousrespiration();
    Action_.consciousrespiration_ = consciousrespiration;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.ConsciousRespiration)
}
void AnyPatientActionData::set_allocated_consumenutrients(::pulse::cdm::bind::ConsumeNutrientsData* consumenutrients) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (consumenutrients) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(consumenutrients);
    if (message_arena != submessage_arena) {
      consumenutrients = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consumenutrients, submessage_arena);
    }
    set_has_consumenutrients();
    Action_.consumenutrients_ = consumenutrients;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.ConsumeNutrients)
}
void AnyPatientActionData::set_allocated_dyspnea(::pulse::cdm::bind::DyspneaData* dyspnea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (dyspnea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dyspnea);
    if (message_arena != submessage_arena) {
      dyspnea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dyspnea, submessage_arena);
    }
    set_has_dyspnea();
    Action_.dyspnea_ = dyspnea;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.Dyspnea)
}
void AnyPatientActionData::set_allocated_exercise(::pulse::cdm::bind::ExerciseData* exercise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (exercise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(exercise);
    if (message_arena != submessage_arena) {
      exercise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exercise, submessage_arena);
    }
    set_has_exercise();
    Action_.exercise_ = exercise;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.Exercise)
}
void AnyPatientActionData::set_allocated_hemorrhage(::pulse::cdm::bind::HemorrhageData* hemorrhage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (hemorrhage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hemorrhage);
    if (message_arena != submessage_arena) {
      hemorrhage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hemorrhage, submessage_arena);
    }
    set_has_hemorrhage();
    Action_.hemorrhage_ = hemorrhage;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.Hemorrhage)
}
void AnyPatientActionData::set_allocated_impairedalveolarexchangeexacerbation(::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData* impairedalveolarexchangeexacerbation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (impairedalveolarexchangeexacerbation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(impairedalveolarexchangeexacerbation);
    if (message_arena != submessage_arena) {
      impairedalveolarexchangeexacerbation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, impairedalveolarexchangeexacerbation, submessage_arena);
    }
    set_has_impairedalveolarexchangeexacerbation();
    Action_.impairedalveolarexchangeexacerbation_ = impairedalveolarexchangeexacerbation;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.ImpairedAlveolarExchangeExacerbation)
}
void AnyPatientActionData::set_allocated_intubation(::pulse::cdm::bind::IntubationData* intubation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (intubation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(intubation);
    if (message_arena != submessage_arena) {
      intubation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intubation, submessage_arena);
    }
    set_has_intubation();
    Action_.intubation_ = intubation;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.Intubation)
}
void AnyPatientActionData::set_allocated_lobarpneumoniaexacerbation(::pulse::cdm::bind::LobarPneumoniaExacerbationData* lobarpneumoniaexacerbation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (lobarpneumoniaexacerbation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lobarpneumoniaexacerbation);
    if (message_arena != submessage_arena) {
      lobarpneumoniaexacerbation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lobarpneumoniaexacerbation, submessage_arena);
    }
    set_has_lobarpneumoniaexacerbation();
    Action_.lobarpneumoniaexacerbation_ = lobarpneumoniaexacerbation;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.LobarPneumoniaExacerbation)
}
void AnyPatientActionData::set_allocated_mechanicalventilation(::pulse::cdm::bind::MechanicalVentilationData* mechanicalventilation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (mechanicalventilation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mechanicalventilation);
    if (message_arena != submessage_arena) {
      mechanicalventilation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mechanicalventilation, submessage_arena);
    }
    set_has_mechanicalventilation();
    Action_.mechanicalventilation_ = mechanicalventilation;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.MechanicalVentilation)
}
void AnyPatientActionData::set_allocated_needledecompression(::pulse::cdm::bind::NeedleDecompressionData* needledecompression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (needledecompression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(needledecompression);
    if (message_arena != submessage_arena) {
      needledecompression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, needledecompression, submessage_arena);
    }
    set_has_needledecompression();
    Action_.needledecompression_ = needledecompression;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.NeedleDecompression)
}
void AnyPatientActionData::set_allocated_pericardialeffusion(::pulse::cdm::bind::PericardialEffusionData* pericardialeffusion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (pericardialeffusion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pericardialeffusion);
    if (message_arena != submessage_arena) {
      pericardialeffusion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pericardialeffusion, submessage_arena);
    }
    set_has_pericardialeffusion();
    Action_.pericardialeffusion_ = pericardialeffusion;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.PericardialEffusion)
}
void AnyPatientActionData::set_allocated_pulmonaryshuntexacerbation(::pulse::cdm::bind::PulmonaryShuntExacerbationData* pulmonaryshuntexacerbation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (pulmonaryshuntexacerbation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pulmonaryshuntexacerbation);
    if (message_arena != submessage_arena) {
      pulmonaryshuntexacerbation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulmonaryshuntexacerbation, submessage_arena);
    }
    set_has_pulmonaryshuntexacerbation();
    Action_.pulmonaryshuntexacerbation_ = pulmonaryshuntexacerbation;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.PulmonaryShuntExacerbation)
}
void AnyPatientActionData::set_allocated_respiratoryfatigue(::pulse::cdm::bind::RespiratoryFatigueData* respiratoryfatigue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (respiratoryfatigue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(respiratoryfatigue);
    if (message_arena != submessage_arena) {
      respiratoryfatigue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, respiratoryfatigue, submessage_arena);
    }
    set_has_respiratoryfatigue();
    Action_.respiratoryfatigue_ = respiratoryfatigue;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.RespiratoryFatigue)
}
void AnyPatientActionData::set_allocated_substancebolus(::pulse::cdm::bind::SubstanceBolusData* substancebolus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (substancebolus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(substancebolus);
    if (message_arena != submessage_arena) {
      substancebolus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, substancebolus, submessage_arena);
    }
    set_has_substancebolus();
    Action_.substancebolus_ = substancebolus;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.SubstanceBolus)
}
void AnyPatientActionData::set_allocated_substancecompoundinfusion(::pulse::cdm::bind::SubstanceCompoundInfusionData* substancecompoundinfusion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (substancecompoundinfusion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(substancecompoundinfusion);
    if (message_arena != submessage_arena) {
      substancecompoundinfusion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, substancecompoundinfusion, submessage_arena);
    }
    set_has_substancecompoundinfusion();
    Action_.substancecompoundinfusion_ = substancecompoundinfusion;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.SubstanceCompoundInfusion)
}
void AnyPatientActionData::set_allocated_substanceinfusion(::pulse::cdm::bind::SubstanceInfusionData* substanceinfusion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (substanceinfusion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(substanceinfusion);
    if (message_arena != submessage_arena) {
      substanceinfusion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, substanceinfusion, submessage_arena);
    }
    set_has_substanceinfusion();
    Action_.substanceinfusion_ = substanceinfusion;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.SubstanceInfusion)
}
void AnyPatientActionData::set_allocated_supplementaloxygen(::pulse::cdm::bind::SupplementalOxygenData* supplementaloxygen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (supplementaloxygen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(supplementaloxygen);
    if (message_arena != submessage_arena) {
      supplementaloxygen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, supplementaloxygen, submessage_arena);
    }
    set_has_supplementaloxygen();
    Action_.supplementaloxygen_ = supplementaloxygen;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.SupplementalOxygen)
}
void AnyPatientActionData::set_allocated_tensionpneumothorax(::pulse::cdm::bind::TensionPneumothoraxData* tensionpneumothorax) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (tensionpneumothorax) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tensionpneumothorax);
    if (message_arena != submessage_arena) {
      tensionpneumothorax = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensionpneumothorax, submessage_arena);
    }
    set_has_tensionpneumothorax();
    Action_.tensionpneumothorax_ = tensionpneumothorax;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.TensionPneumothorax)
}
void AnyPatientActionData::set_allocated_urinate(::pulse::cdm::bind::UrinateData* urinate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (urinate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(urinate);
    if (message_arena != submessage_arena) {
      urinate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, urinate, submessage_arena);
    }
    set_has_urinate();
    Action_.urinate_ = urinate;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientActionData.Urinate)
}
AnyPatientActionData::AnyPatientActionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.AnyPatientActionData)
}
AnyPatientActionData::AnyPatientActionData(const AnyPatientActionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Action();
  switch (from.Action_case()) {
    case kAssessment: {
      _internal_mutable_assessment()->::pulse::cdm::bind::PatientAssessmentRequestData::MergeFrom(from._internal_assessment());
      break;
    }
    case kAcuteRespiratoryDistressSyndromeExacerbation: {
      _internal_mutable_acuterespiratorydistresssyndromeexacerbation()->::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData::MergeFrom(from._internal_acuterespiratorydistresssyndromeexacerbation());
      break;
    }
    case kAcuteStress: {
      _internal_mutable_acutestress()->::pulse::cdm::bind::AcuteStressData::MergeFrom(from._internal_acutestress());
      break;
    }
    case kAirwayObstruction: {
      _internal_mutable_airwayobstruction()->::pulse::cdm::bind::AirwayObstructionData::MergeFrom(from._internal_airwayobstruction());
      break;
    }
    case kAsthmaAttack: {
      _internal_mutable_asthmaattack()->::pulse::cdm::bind::AsthmaAttackData::MergeFrom(from._internal_asthmaattack());
      break;
    }
    case kBrainInjury: {
      _internal_mutable_braininjury()->::pulse::cdm::bind::BrainInjuryData::MergeFrom(from._internal_braininjury());
      break;
    }
    case kBronchoconstriction: {
      _internal_mutable_bronchoconstriction()->::pulse::cdm::bind::BronchoconstrictionData::MergeFrom(from._internal_bronchoconstriction());
      break;
    }
    case kCardiacArrest: {
      _internal_mutable_cardiacarrest()->::pulse::cdm::bind::CardiacArrestData::MergeFrom(from._internal_cardiacarrest());
      break;
    }
    case kChestCompressionForce: {
      _internal_mutable_chestcompressionforce()->::pulse::cdm::bind::ChestCompressionForceData::MergeFrom(from._internal_chestcompressionforce());
      break;
    }
    case kChestCompressionForceScale: {
      _internal_mutable_chestcompressionforcescale()->::pulse::cdm::bind::ChestCompressionForceScaleData::MergeFrom(from._internal_chestcompressionforcescale());
      break;
    }
    case kChestOcclusiveDressing: {
      _internal_mutable_chestocclusivedressing()->::pulse::cdm::bind::ChestOcclusiveDressingData::MergeFrom(from._internal_chestocclusivedressing());
      break;
    }
    case kChronicObstructivePulmonaryDiseaseExacerbation: {
      _internal_mutable_chronicobstructivepulmonarydiseaseexacerbation()->::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData::MergeFrom(from._internal_chronicobstructivepulmonarydiseaseexacerbation());
      break;
    }
    case kConsciousRespiration: {
      _internal_mutable_consciousrespiration()->::pulse::cdm::bind::ConsciousRespirationData::MergeFrom(from._internal_consciousrespiration());
      break;
    }
    case kConsumeNutrients: {
      _internal_mutable_consumenutrients()->::pulse::cdm::bind::ConsumeNutrientsData::MergeFrom(from._internal_consumenutrients());
      break;
    }
    case kDyspnea: {
      _internal_mutable_dyspnea()->::pulse::cdm::bind::DyspneaData::MergeFrom(from._internal_dyspnea());
      break;
    }
    case kExercise: {
      _internal_mutable_exercise()->::pulse::cdm::bind::ExerciseData::MergeFrom(from._internal_exercise());
      break;
    }
    case kHemorrhage: {
      _internal_mutable_hemorrhage()->::pulse::cdm::bind::HemorrhageData::MergeFrom(from._internal_hemorrhage());
      break;
    }
    case kImpairedAlveolarExchangeExacerbation: {
      _internal_mutable_impairedalveolarexchangeexacerbation()->::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData::MergeFrom(from._internal_impairedalveolarexchangeexacerbation());
      break;
    }
    case kIntubation: {
      _internal_mutable_intubation()->::pulse::cdm::bind::IntubationData::MergeFrom(from._internal_intubation());
      break;
    }
    case kLobarPneumoniaExacerbation: {
      _internal_mutable_lobarpneumoniaexacerbation()->::pulse::cdm::bind::LobarPneumoniaExacerbationData::MergeFrom(from._internal_lobarpneumoniaexacerbation());
      break;
    }
    case kMechanicalVentilation: {
      _internal_mutable_mechanicalventilation()->::pulse::cdm::bind::MechanicalVentilationData::MergeFrom(from._internal_mechanicalventilation());
      break;
    }
    case kNeedleDecompression: {
      _internal_mutable_needledecompression()->::pulse::cdm::bind::NeedleDecompressionData::MergeFrom(from._internal_needledecompression());
      break;
    }
    case kPericardialEffusion: {
      _internal_mutable_pericardialeffusion()->::pulse::cdm::bind::PericardialEffusionData::MergeFrom(from._internal_pericardialeffusion());
      break;
    }
    case kPulmonaryShuntExacerbation: {
      _internal_mutable_pulmonaryshuntexacerbation()->::pulse::cdm::bind::PulmonaryShuntExacerbationData::MergeFrom(from._internal_pulmonaryshuntexacerbation());
      break;
    }
    case kRespiratoryFatigue: {
      _internal_mutable_respiratoryfatigue()->::pulse::cdm::bind::RespiratoryFatigueData::MergeFrom(from._internal_respiratoryfatigue());
      break;
    }
    case kSubstanceBolus: {
      _internal_mutable_substancebolus()->::pulse::cdm::bind::SubstanceBolusData::MergeFrom(from._internal_substancebolus());
      break;
    }
    case kSubstanceCompoundInfusion: {
      _internal_mutable_substancecompoundinfusion()->::pulse::cdm::bind::SubstanceCompoundInfusionData::MergeFrom(from._internal_substancecompoundinfusion());
      break;
    }
    case kSubstanceInfusion: {
      _internal_mutable_substanceinfusion()->::pulse::cdm::bind::SubstanceInfusionData::MergeFrom(from._internal_substanceinfusion());
      break;
    }
    case kSupplementalOxygen: {
      _internal_mutable_supplementaloxygen()->::pulse::cdm::bind::SupplementalOxygenData::MergeFrom(from._internal_supplementaloxygen());
      break;
    }
    case kTensionPneumothorax: {
      _internal_mutable_tensionpneumothorax()->::pulse::cdm::bind::TensionPneumothoraxData::MergeFrom(from._internal_tensionpneumothorax());
      break;
    }
    case kUrinate: {
      _internal_mutable_urinate()->::pulse::cdm::bind::UrinateData::MergeFrom(from._internal_urinate());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnyPatientActionData)
}

void AnyPatientActionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyPatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  clear_has_Action();
}

AnyPatientActionData::~AnyPatientActionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnyPatientActionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnyPatientActionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_Action()) {
    clear_Action();
  }
}

void AnyPatientActionData::ArenaDtor(void* object) {
  AnyPatientActionData* _this = reinterpret_cast< AnyPatientActionData* >(object);
  (void)_this;
}
void AnyPatientActionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyPatientActionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnyPatientActionData& AnyPatientActionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyPatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void AnyPatientActionData::clear_Action() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.AnyPatientActionData)
  switch (Action_case()) {
    case kAssessment: {
      if (GetArena() == nullptr) {
        delete Action_.assessment_;
      }
      break;
    }
    case kAcuteRespiratoryDistressSyndromeExacerbation: {
      if (GetArena() == nullptr) {
        delete Action_.acuterespiratorydistresssyndromeexacerbation_;
      }
      break;
    }
    case kAcuteStress: {
      if (GetArena() == nullptr) {
        delete Action_.acutestress_;
      }
      break;
    }
    case kAirwayObstruction: {
      if (GetArena() == nullptr) {
        delete Action_.airwayobstruction_;
      }
      break;
    }
    case kAsthmaAttack: {
      if (GetArena() == nullptr) {
        delete Action_.asthmaattack_;
      }
      break;
    }
    case kBrainInjury: {
      if (GetArena() == nullptr) {
        delete Action_.braininjury_;
      }
      break;
    }
    case kBronchoconstriction: {
      if (GetArena() == nullptr) {
        delete Action_.bronchoconstriction_;
      }
      break;
    }
    case kCardiacArrest: {
      if (GetArena() == nullptr) {
        delete Action_.cardiacarrest_;
      }
      break;
    }
    case kChestCompressionForce: {
      if (GetArena() == nullptr) {
        delete Action_.chestcompressionforce_;
      }
      break;
    }
    case kChestCompressionForceScale: {
      if (GetArena() == nullptr) {
        delete Action_.chestcompressionforcescale_;
      }
      break;
    }
    case kChestOcclusiveDressing: {
      if (GetArena() == nullptr) {
        delete Action_.chestocclusivedressing_;
      }
      break;
    }
    case kChronicObstructivePulmonaryDiseaseExacerbation: {
      if (GetArena() == nullptr) {
        delete Action_.chronicobstructivepulmonarydiseaseexacerbation_;
      }
      break;
    }
    case kConsciousRespiration: {
      if (GetArena() == nullptr) {
        delete Action_.consciousrespiration_;
      }
      break;
    }
    case kConsumeNutrients: {
      if (GetArena() == nullptr) {
        delete Action_.consumenutrients_;
      }
      break;
    }
    case kDyspnea: {
      if (GetArena() == nullptr) {
        delete Action_.dyspnea_;
      }
      break;
    }
    case kExercise: {
      if (GetArena() == nullptr) {
        delete Action_.exercise_;
      }
      break;
    }
    case kHemorrhage: {
      if (GetArena() == nullptr) {
        delete Action_.hemorrhage_;
      }
      break;
    }
    case kImpairedAlveolarExchangeExacerbation: {
      if (GetArena() == nullptr) {
        delete Action_.impairedalveolarexchangeexacerbation_;
      }
      break;
    }
    case kIntubation: {
      if (GetArena() == nullptr) {
        delete Action_.intubation_;
      }
      break;
    }
    case kLobarPneumoniaExacerbation: {
      if (GetArena() == nullptr) {
        delete Action_.lobarpneumoniaexacerbation_;
      }
      break;
    }
    case kMechanicalVentilation: {
      if (GetArena() == nullptr) {
        delete Action_.mechanicalventilation_;
      }
      break;
    }
    case kNeedleDecompression: {
      if (GetArena() == nullptr) {
        delete Action_.needledecompression_;
      }
      break;
    }
    case kPericardialEffusion: {
      if (GetArena() == nullptr) {
        delete Action_.pericardialeffusion_;
      }
      break;
    }
    case kPulmonaryShuntExacerbation: {
      if (GetArena() == nullptr) {
        delete Action_.pulmonaryshuntexacerbation_;
      }
      break;
    }
    case kRespiratoryFatigue: {
      if (GetArena() == nullptr) {
        delete Action_.respiratoryfatigue_;
      }
      break;
    }
    case kSubstanceBolus: {
      if (GetArena() == nullptr) {
        delete Action_.substancebolus_;
      }
      break;
    }
    case kSubstanceCompoundInfusion: {
      if (GetArena() == nullptr) {
        delete Action_.substancecompoundinfusion_;
      }
      break;
    }
    case kSubstanceInfusion: {
      if (GetArena() == nullptr) {
        delete Action_.substanceinfusion_;
      }
      break;
    }
    case kSupplementalOxygen: {
      if (GetArena() == nullptr) {
        delete Action_.supplementaloxygen_;
      }
      break;
    }
    case kTensionPneumothorax: {
      if (GetArena() == nullptr) {
        delete Action_.tensionpneumothorax_;
      }
      break;
    }
    case kUrinate: {
      if (GetArena() == nullptr) {
        delete Action_.urinate_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void AnyPatientActionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnyPatientActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnyPatientActionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientAssessmentRequestData Assessment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_assessment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData AcuteRespiratoryDistressSyndromeExacerbation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_acuterespiratorydistresssyndromeexacerbation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AcuteStressData AcuteStress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_acutestress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AirwayObstructionData AirwayObstruction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_airwayobstruction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AsthmaAttackData AsthmaAttack = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_asthmaattack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.BrainInjuryData BrainInjury = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_braininjury(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.BronchoconstrictionData Bronchoconstriction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_bronchoconstriction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.CardiacArrestData CardiacArrest = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_cardiacarrest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ChestCompressionForceData ChestCompressionForce = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_chestcompressionforce(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ChestCompressionForceScaleData ChestCompressionForceScale = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_chestcompressionforcescale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ChestOcclusiveDressingData ChestOcclusiveDressing = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_chestocclusivedressing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData ChronicObstructivePulmonaryDiseaseExacerbation = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_chronicobstructivepulmonarydiseaseexacerbation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ConsciousRespirationData ConsciousRespiration = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_consciousrespiration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ConsumeNutrientsData ConsumeNutrients = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_consumenutrients(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.DyspneaData Dyspnea = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_dyspnea(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ExerciseData Exercise = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_exercise(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.HemorrhageData Hemorrhage = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_hemorrhage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData ImpairedAlveolarExchangeExacerbation = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_impairedalveolarexchangeexacerbation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.IntubationData Intubation = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_intubation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.LobarPneumoniaExacerbationData LobarPneumoniaExacerbation = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_lobarpneumoniaexacerbation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.MechanicalVentilationData MechanicalVentilation = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_mechanicalventilation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.NeedleDecompressionData NeedleDecompression = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_needledecompression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.PericardialEffusionData PericardialEffusion = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_pericardialeffusion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.PulmonaryShuntExacerbationData PulmonaryShuntExacerbation = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_pulmonaryshuntexacerbation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RespiratoryFatigueData RespiratoryFatigue = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_respiratoryfatigue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.SubstanceBolusData SubstanceBolus = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_substancebolus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.SubstanceCompoundInfusionData SubstanceCompoundInfusion = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_substancecompoundinfusion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.SubstanceInfusionData SubstanceInfusion = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_substanceinfusion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.SupplementalOxygenData SupplementalOxygen = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_supplementaloxygen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.TensionPneumothoraxData TensionPneumothorax = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensionpneumothorax(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.UrinateData Urinate = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_urinate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyPatientActionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnyPatientActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientAssessmentRequestData Assessment = 1;
  if (_internal_has_assessment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::assessment(this), target, stream);
  }

  // .pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData AcuteRespiratoryDistressSyndromeExacerbation = 2;
  if (_internal_has_acuterespiratorydistresssyndromeexacerbation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::acuterespiratorydistresssyndromeexacerbation(this), target, stream);
  }

  // .pulse.cdm.bind.AcuteStressData AcuteStress = 3;
  if (_internal_has_acutestress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::acutestress(this), target, stream);
  }

  // .pulse.cdm.bind.AirwayObstructionData AirwayObstruction = 4;
  if (_internal_has_airwayobstruction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::airwayobstruction(this), target, stream);
  }

  // .pulse.cdm.bind.AsthmaAttackData AsthmaAttack = 5;
  if (_internal_has_asthmaattack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::asthmaattack(this), target, stream);
  }

  // .pulse.cdm.bind.BrainInjuryData BrainInjury = 6;
  if (_internal_has_braininjury()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::braininjury(this), target, stream);
  }

  // .pulse.cdm.bind.BronchoconstrictionData Bronchoconstriction = 7;
  if (_internal_has_bronchoconstriction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::bronchoconstriction(this), target, stream);
  }

  // .pulse.cdm.bind.CardiacArrestData CardiacArrest = 8;
  if (_internal_has_cardiacarrest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::cardiacarrest(this), target, stream);
  }

  // .pulse.cdm.bind.ChestCompressionForceData ChestCompressionForce = 9;
  if (_internal_has_chestcompressionforce()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::chestcompressionforce(this), target, stream);
  }

  // .pulse.cdm.bind.ChestCompressionForceScaleData ChestCompressionForceScale = 10;
  if (_internal_has_chestcompressionforcescale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::chestcompressionforcescale(this), target, stream);
  }

  // .pulse.cdm.bind.ChestOcclusiveDressingData ChestOcclusiveDressing = 11;
  if (_internal_has_chestocclusivedressing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::chestocclusivedressing(this), target, stream);
  }

  // .pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData ChronicObstructivePulmonaryDiseaseExacerbation = 12;
  if (_internal_has_chronicobstructivepulmonarydiseaseexacerbation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::chronicobstructivepulmonarydiseaseexacerbation(this), target, stream);
  }

  // .pulse.cdm.bind.ConsciousRespirationData ConsciousRespiration = 13;
  if (_internal_has_consciousrespiration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::consciousrespiration(this), target, stream);
  }

  // .pulse.cdm.bind.ConsumeNutrientsData ConsumeNutrients = 14;
  if (_internal_has_consumenutrients()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::consumenutrients(this), target, stream);
  }

  // .pulse.cdm.bind.DyspneaData Dyspnea = 15;
  if (_internal_has_dyspnea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::dyspnea(this), target, stream);
  }

  // .pulse.cdm.bind.ExerciseData Exercise = 16;
  if (_internal_has_exercise()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::exercise(this), target, stream);
  }

  // .pulse.cdm.bind.HemorrhageData Hemorrhage = 17;
  if (_internal_has_hemorrhage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::hemorrhage(this), target, stream);
  }

  // .pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData ImpairedAlveolarExchangeExacerbation = 18;
  if (_internal_has_impairedalveolarexchangeexacerbation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::impairedalveolarexchangeexacerbation(this), target, stream);
  }

  // .pulse.cdm.bind.IntubationData Intubation = 19;
  if (_internal_has_intubation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::intubation(this), target, stream);
  }

  // .pulse.cdm.bind.LobarPneumoniaExacerbationData LobarPneumoniaExacerbation = 20;
  if (_internal_has_lobarpneumoniaexacerbation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::lobarpneumoniaexacerbation(this), target, stream);
  }

  // .pulse.cdm.bind.MechanicalVentilationData MechanicalVentilation = 21;
  if (_internal_has_mechanicalventilation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::mechanicalventilation(this), target, stream);
  }

  // .pulse.cdm.bind.NeedleDecompressionData NeedleDecompression = 22;
  if (_internal_has_needledecompression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::needledecompression(this), target, stream);
  }

  // .pulse.cdm.bind.PericardialEffusionData PericardialEffusion = 23;
  if (_internal_has_pericardialeffusion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::pericardialeffusion(this), target, stream);
  }

  // .pulse.cdm.bind.PulmonaryShuntExacerbationData PulmonaryShuntExacerbation = 24;
  if (_internal_has_pulmonaryshuntexacerbation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::pulmonaryshuntexacerbation(this), target, stream);
  }

  // .pulse.cdm.bind.RespiratoryFatigueData RespiratoryFatigue = 25;
  if (_internal_has_respiratoryfatigue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::respiratoryfatigue(this), target, stream);
  }

  // .pulse.cdm.bind.SubstanceBolusData SubstanceBolus = 26;
  if (_internal_has_substancebolus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::substancebolus(this), target, stream);
  }

  // .pulse.cdm.bind.SubstanceCompoundInfusionData SubstanceCompoundInfusion = 27;
  if (_internal_has_substancecompoundinfusion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::substancecompoundinfusion(this), target, stream);
  }

  // .pulse.cdm.bind.SubstanceInfusionData SubstanceInfusion = 28;
  if (_internal_has_substanceinfusion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::substanceinfusion(this), target, stream);
  }

  // .pulse.cdm.bind.SupplementalOxygenData SupplementalOxygen = 29;
  if (_internal_has_supplementaloxygen()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::supplementaloxygen(this), target, stream);
  }

  // .pulse.cdm.bind.TensionPneumothoraxData TensionPneumothorax = 30;
  if (_internal_has_tensionpneumothorax()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::tensionpneumothorax(this), target, stream);
  }

  // .pulse.cdm.bind.UrinateData Urinate = 31;
  if (_internal_has_urinate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::urinate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnyPatientActionData)
  return target;
}

size_t AnyPatientActionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnyPatientActionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Action_case()) {
    // .pulse.cdm.bind.PatientAssessmentRequestData Assessment = 1;
    case kAssessment: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.assessment_);
      break;
    }
    // .pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData AcuteRespiratoryDistressSyndromeExacerbation = 2;
    case kAcuteRespiratoryDistressSyndromeExacerbation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.acuterespiratorydistresssyndromeexacerbation_);
      break;
    }
    // .pulse.cdm.bind.AcuteStressData AcuteStress = 3;
    case kAcuteStress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.acutestress_);
      break;
    }
    // .pulse.cdm.bind.AirwayObstructionData AirwayObstruction = 4;
    case kAirwayObstruction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.airwayobstruction_);
      break;
    }
    // .pulse.cdm.bind.AsthmaAttackData AsthmaAttack = 5;
    case kAsthmaAttack: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.asthmaattack_);
      break;
    }
    // .pulse.cdm.bind.BrainInjuryData BrainInjury = 6;
    case kBrainInjury: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.braininjury_);
      break;
    }
    // .pulse.cdm.bind.BronchoconstrictionData Bronchoconstriction = 7;
    case kBronchoconstriction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.bronchoconstriction_);
      break;
    }
    // .pulse.cdm.bind.CardiacArrestData CardiacArrest = 8;
    case kCardiacArrest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.cardiacarrest_);
      break;
    }
    // .pulse.cdm.bind.ChestCompressionForceData ChestCompressionForce = 9;
    case kChestCompressionForce: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.chestcompressionforce_);
      break;
    }
    // .pulse.cdm.bind.ChestCompressionForceScaleData ChestCompressionForceScale = 10;
    case kChestCompressionForceScale: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.chestcompressionforcescale_);
      break;
    }
    // .pulse.cdm.bind.ChestOcclusiveDressingData ChestOcclusiveDressing = 11;
    case kChestOcclusiveDressing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.chestocclusivedressing_);
      break;
    }
    // .pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData ChronicObstructivePulmonaryDiseaseExacerbation = 12;
    case kChronicObstructivePulmonaryDiseaseExacerbation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.chronicobstructivepulmonarydiseaseexacerbation_);
      break;
    }
    // .pulse.cdm.bind.ConsciousRespirationData ConsciousRespiration = 13;
    case kConsciousRespiration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.consciousrespiration_);
      break;
    }
    // .pulse.cdm.bind.ConsumeNutrientsData ConsumeNutrients = 14;
    case kConsumeNutrients: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.consumenutrients_);
      break;
    }
    // .pulse.cdm.bind.DyspneaData Dyspnea = 15;
    case kDyspnea: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.dyspnea_);
      break;
    }
    // .pulse.cdm.bind.ExerciseData Exercise = 16;
    case kExercise: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.exercise_);
      break;
    }
    // .pulse.cdm.bind.HemorrhageData Hemorrhage = 17;
    case kHemorrhage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.hemorrhage_);
      break;
    }
    // .pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData ImpairedAlveolarExchangeExacerbation = 18;
    case kImpairedAlveolarExchangeExacerbation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.impairedalveolarexchangeexacerbation_);
      break;
    }
    // .pulse.cdm.bind.IntubationData Intubation = 19;
    case kIntubation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.intubation_);
      break;
    }
    // .pulse.cdm.bind.LobarPneumoniaExacerbationData LobarPneumoniaExacerbation = 20;
    case kLobarPneumoniaExacerbation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.lobarpneumoniaexacerbation_);
      break;
    }
    // .pulse.cdm.bind.MechanicalVentilationData MechanicalVentilation = 21;
    case kMechanicalVentilation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.mechanicalventilation_);
      break;
    }
    // .pulse.cdm.bind.NeedleDecompressionData NeedleDecompression = 22;
    case kNeedleDecompression: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.needledecompression_);
      break;
    }
    // .pulse.cdm.bind.PericardialEffusionData PericardialEffusion = 23;
    case kPericardialEffusion: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.pericardialeffusion_);
      break;
    }
    // .pulse.cdm.bind.PulmonaryShuntExacerbationData PulmonaryShuntExacerbation = 24;
    case kPulmonaryShuntExacerbation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.pulmonaryshuntexacerbation_);
      break;
    }
    // .pulse.cdm.bind.RespiratoryFatigueData RespiratoryFatigue = 25;
    case kRespiratoryFatigue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.respiratoryfatigue_);
      break;
    }
    // .pulse.cdm.bind.SubstanceBolusData SubstanceBolus = 26;
    case kSubstanceBolus: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.substancebolus_);
      break;
    }
    // .pulse.cdm.bind.SubstanceCompoundInfusionData SubstanceCompoundInfusion = 27;
    case kSubstanceCompoundInfusion: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.substancecompoundinfusion_);
      break;
    }
    // .pulse.cdm.bind.SubstanceInfusionData SubstanceInfusion = 28;
    case kSubstanceInfusion: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.substanceinfusion_);
      break;
    }
    // .pulse.cdm.bind.SupplementalOxygenData SupplementalOxygen = 29;
    case kSupplementalOxygen: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.supplementaloxygen_);
      break;
    }
    // .pulse.cdm.bind.TensionPneumothoraxData TensionPneumothorax = 30;
    case kTensionPneumothorax: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.tensionpneumothorax_);
      break;
    }
    // .pulse.cdm.bind.UrinateData Urinate = 31;
    case kUrinate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.urinate_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyPatientActionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnyPatientActionData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnyPatientActionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnyPatientActionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnyPatientActionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnyPatientActionData)
    MergeFrom(*source);
  }
}

void AnyPatientActionData::MergeFrom(const AnyPatientActionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnyPatientActionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Action_case()) {
    case kAssessment: {
      _internal_mutable_assessment()->::pulse::cdm::bind::PatientAssessmentRequestData::MergeFrom(from._internal_assessment());
      break;
    }
    case kAcuteRespiratoryDistressSyndromeExacerbation: {
      _internal_mutable_acuterespiratorydistresssyndromeexacerbation()->::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData::MergeFrom(from._internal_acuterespiratorydistresssyndromeexacerbation());
      break;
    }
    case kAcuteStress: {
      _internal_mutable_acutestress()->::pulse::cdm::bind::AcuteStressData::MergeFrom(from._internal_acutestress());
      break;
    }
    case kAirwayObstruction: {
      _internal_mutable_airwayobstruction()->::pulse::cdm::bind::AirwayObstructionData::MergeFrom(from._internal_airwayobstruction());
      break;
    }
    case kAsthmaAttack: {
      _internal_mutable_asthmaattack()->::pulse::cdm::bind::AsthmaAttackData::MergeFrom(from._internal_asthmaattack());
      break;
    }
    case kBrainInjury: {
      _internal_mutable_braininjury()->::pulse::cdm::bind::BrainInjuryData::MergeFrom(from._internal_braininjury());
      break;
    }
    case kBronchoconstriction: {
      _internal_mutable_bronchoconstriction()->::pulse::cdm::bind::BronchoconstrictionData::MergeFrom(from._internal_bronchoconstriction());
      break;
    }
    case kCardiacArrest: {
      _internal_mutable_cardiacarrest()->::pulse::cdm::bind::CardiacArrestData::MergeFrom(from._internal_cardiacarrest());
      break;
    }
    case kChestCompressionForce: {
      _internal_mutable_chestcompressionforce()->::pulse::cdm::bind::ChestCompressionForceData::MergeFrom(from._internal_chestcompressionforce());
      break;
    }
    case kChestCompressionForceScale: {
      _internal_mutable_chestcompressionforcescale()->::pulse::cdm::bind::ChestCompressionForceScaleData::MergeFrom(from._internal_chestcompressionforcescale());
      break;
    }
    case kChestOcclusiveDressing: {
      _internal_mutable_chestocclusivedressing()->::pulse::cdm::bind::ChestOcclusiveDressingData::MergeFrom(from._internal_chestocclusivedressing());
      break;
    }
    case kChronicObstructivePulmonaryDiseaseExacerbation: {
      _internal_mutable_chronicobstructivepulmonarydiseaseexacerbation()->::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData::MergeFrom(from._internal_chronicobstructivepulmonarydiseaseexacerbation());
      break;
    }
    case kConsciousRespiration: {
      _internal_mutable_consciousrespiration()->::pulse::cdm::bind::ConsciousRespirationData::MergeFrom(from._internal_consciousrespiration());
      break;
    }
    case kConsumeNutrients: {
      _internal_mutable_consumenutrients()->::pulse::cdm::bind::ConsumeNutrientsData::MergeFrom(from._internal_consumenutrients());
      break;
    }
    case kDyspnea: {
      _internal_mutable_dyspnea()->::pulse::cdm::bind::DyspneaData::MergeFrom(from._internal_dyspnea());
      break;
    }
    case kExercise: {
      _internal_mutable_exercise()->::pulse::cdm::bind::ExerciseData::MergeFrom(from._internal_exercise());
      break;
    }
    case kHemorrhage: {
      _internal_mutable_hemorrhage()->::pulse::cdm::bind::HemorrhageData::MergeFrom(from._internal_hemorrhage());
      break;
    }
    case kImpairedAlveolarExchangeExacerbation: {
      _internal_mutable_impairedalveolarexchangeexacerbation()->::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData::MergeFrom(from._internal_impairedalveolarexchangeexacerbation());
      break;
    }
    case kIntubation: {
      _internal_mutable_intubation()->::pulse::cdm::bind::IntubationData::MergeFrom(from._internal_intubation());
      break;
    }
    case kLobarPneumoniaExacerbation: {
      _internal_mutable_lobarpneumoniaexacerbation()->::pulse::cdm::bind::LobarPneumoniaExacerbationData::MergeFrom(from._internal_lobarpneumoniaexacerbation());
      break;
    }
    case kMechanicalVentilation: {
      _internal_mutable_mechanicalventilation()->::pulse::cdm::bind::MechanicalVentilationData::MergeFrom(from._internal_mechanicalventilation());
      break;
    }
    case kNeedleDecompression: {
      _internal_mutable_needledecompression()->::pulse::cdm::bind::NeedleDecompressionData::MergeFrom(from._internal_needledecompression());
      break;
    }
    case kPericardialEffusion: {
      _internal_mutable_pericardialeffusion()->::pulse::cdm::bind::PericardialEffusionData::MergeFrom(from._internal_pericardialeffusion());
      break;
    }
    case kPulmonaryShuntExacerbation: {
      _internal_mutable_pulmonaryshuntexacerbation()->::pulse::cdm::bind::PulmonaryShuntExacerbationData::MergeFrom(from._internal_pulmonaryshuntexacerbation());
      break;
    }
    case kRespiratoryFatigue: {
      _internal_mutable_respiratoryfatigue()->::pulse::cdm::bind::RespiratoryFatigueData::MergeFrom(from._internal_respiratoryfatigue());
      break;
    }
    case kSubstanceBolus: {
      _internal_mutable_substancebolus()->::pulse::cdm::bind::SubstanceBolusData::MergeFrom(from._internal_substancebolus());
      break;
    }
    case kSubstanceCompoundInfusion: {
      _internal_mutable_substancecompoundinfusion()->::pulse::cdm::bind::SubstanceCompoundInfusionData::MergeFrom(from._internal_substancecompoundinfusion());
      break;
    }
    case kSubstanceInfusion: {
      _internal_mutable_substanceinfusion()->::pulse::cdm::bind::SubstanceInfusionData::MergeFrom(from._internal_substanceinfusion());
      break;
    }
    case kSupplementalOxygen: {
      _internal_mutable_supplementaloxygen()->::pulse::cdm::bind::SupplementalOxygenData::MergeFrom(from._internal_supplementaloxygen());
      break;
    }
    case kTensionPneumothorax: {
      _internal_mutable_tensionpneumothorax()->::pulse::cdm::bind::TensionPneumothoraxData::MergeFrom(from._internal_tensionpneumothorax());
      break;
    }
    case kUrinate: {
      _internal_mutable_urinate()->::pulse::cdm::bind::UrinateData::MergeFrom(from._internal_urinate());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void AnyPatientActionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnyPatientActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyPatientActionData::CopyFrom(const AnyPatientActionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnyPatientActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyPatientActionData::IsInitialized() const {
  return true;
}

void AnyPatientActionData::InternalSwap(AnyPatientActionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(Action_, other->Action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyPatientActionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PatientActionData::_Internal {
 public:
  static const ::pulse::cdm::bind::ActionData& action(const PatientActionData* msg);
};

const ::pulse::cdm::bind::ActionData&
PatientActionData::_Internal::action(const PatientActionData* msg) {
  return *msg->action_;
}
void PatientActionData::clear_action() {
  if (GetArena() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
}
PatientActionData::PatientActionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.PatientActionData)
}
PatientActionData::PatientActionData(const PatientActionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action()) {
    action_ = new ::pulse::cdm::bind::ActionData(*from.action_);
  } else {
    action_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.PatientActionData)
}

void PatientActionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  action_ = nullptr;
}

PatientActionData::~PatientActionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.PatientActionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PatientActionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete action_;
}

void PatientActionData::ArenaDtor(void* object) {
  PatientActionData* _this = reinterpret_cast< PatientActionData* >(object);
  (void)_this;
}
void PatientActionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatientActionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatientActionData& PatientActionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatientActionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void PatientActionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.PatientActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatientActionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ActionData Action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatientActionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.PatientActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ActionData Action = 1;
  if (this->has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::action(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.PatientActionData)
  return target;
}

size_t PatientActionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.PatientActionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ActionData Action = 1;
  if (this->has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatientActionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.PatientActionData)
  GOOGLE_DCHECK_NE(&from, this);
  const PatientActionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatientActionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.PatientActionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.PatientActionData)
    MergeFrom(*source);
  }
}

void PatientActionData::MergeFrom(const PatientActionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.PatientActionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_action()) {
    _internal_mutable_action()->::pulse::cdm::bind::ActionData::MergeFrom(from._internal_action());
  }
}

void PatientActionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.PatientActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatientActionData::CopyFrom(const PatientActionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.PatientActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatientActionData::IsInitialized() const {
  return true;
}

void PatientActionData::InternalSwap(PatientActionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatientActionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PatientAssessmentRequestData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const PatientAssessmentRequestData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
PatientAssessmentRequestData::_Internal::patientaction(const PatientAssessmentRequestData* msg) {
  return *msg->patientaction_;
}
PatientAssessmentRequestData::PatientAssessmentRequestData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.PatientAssessmentRequestData)
}
PatientAssessmentRequestData::PatientAssessmentRequestData(const PatientAssessmentRequestData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.PatientAssessmentRequestData)
}

void PatientAssessmentRequestData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatientAssessmentRequestData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(type_));
}

PatientAssessmentRequestData::~PatientAssessmentRequestData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.PatientAssessmentRequestData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PatientAssessmentRequestData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
}

void PatientAssessmentRequestData::ArenaDtor(void* object) {
  PatientAssessmentRequestData* _this = reinterpret_cast< PatientAssessmentRequestData* >(object);
  (void)_this;
}
void PatientAssessmentRequestData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatientAssessmentRequestData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatientAssessmentRequestData& PatientAssessmentRequestData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatientAssessmentRequestData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void PatientAssessmentRequestData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.PatientAssessmentRequestData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatientAssessmentRequestData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ePatientAssessmentType Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::pulse::cdm::bind::ePatientAssessmentType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatientAssessmentRequestData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.PatientAssessmentRequestData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.ePatientAssessmentType Type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.PatientAssessmentRequestData)
  return target;
}

size_t PatientAssessmentRequestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.PatientAssessmentRequestData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.ePatientAssessmentType Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatientAssessmentRequestData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.PatientAssessmentRequestData)
  GOOGLE_DCHECK_NE(&from, this);
  const PatientAssessmentRequestData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatientAssessmentRequestData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.PatientAssessmentRequestData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.PatientAssessmentRequestData)
    MergeFrom(*source);
  }
}

void PatientAssessmentRequestData::MergeFrom(const PatientAssessmentRequestData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.PatientAssessmentRequestData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void PatientAssessmentRequestData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.PatientAssessmentRequestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatientAssessmentRequestData::CopyFrom(const PatientAssessmentRequestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.PatientAssessmentRequestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatientAssessmentRequestData::IsInitialized() const {
  return true;
}

void PatientAssessmentRequestData::InternalSwap(PatientAssessmentRequestData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PatientAssessmentRequestData, type_)
      + sizeof(PatientAssessmentRequestData::type_)
      - PROTOBUF_FIELD_OFFSET(PatientAssessmentRequestData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PatientAssessmentRequestData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AcuteRespiratoryDistressSyndromeExacerbationData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const AcuteRespiratoryDistressSyndromeExacerbationData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const AcuteRespiratoryDistressSyndromeExacerbationData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& leftlungaffected(const AcuteRespiratoryDistressSyndromeExacerbationData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& rightlungaffected(const AcuteRespiratoryDistressSyndromeExacerbationData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
AcuteRespiratoryDistressSyndromeExacerbationData::_Internal::patientaction(const AcuteRespiratoryDistressSyndromeExacerbationData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
AcuteRespiratoryDistressSyndromeExacerbationData::_Internal::severity(const AcuteRespiratoryDistressSyndromeExacerbationData* msg) {
  return *msg->severity_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
AcuteRespiratoryDistressSyndromeExacerbationData::_Internal::leftlungaffected(const AcuteRespiratoryDistressSyndromeExacerbationData* msg) {
  return *msg->leftlungaffected_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
AcuteRespiratoryDistressSyndromeExacerbationData::_Internal::rightlungaffected(const AcuteRespiratoryDistressSyndromeExacerbationData* msg) {
  return *msg->rightlungaffected_;
}
void AcuteRespiratoryDistressSyndromeExacerbationData::clear_severity() {
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
void AcuteRespiratoryDistressSyndromeExacerbationData::clear_leftlungaffected() {
  if (GetArena() == nullptr && leftlungaffected_ != nullptr) {
    delete leftlungaffected_;
  }
  leftlungaffected_ = nullptr;
}
void AcuteRespiratoryDistressSyndromeExacerbationData::clear_rightlungaffected() {
  if (GetArena() == nullptr && rightlungaffected_ != nullptr) {
    delete rightlungaffected_;
  }
  rightlungaffected_ = nullptr;
}
AcuteRespiratoryDistressSyndromeExacerbationData::AcuteRespiratoryDistressSyndromeExacerbationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData)
}
AcuteRespiratoryDistressSyndromeExacerbationData::AcuteRespiratoryDistressSyndromeExacerbationData(const AcuteRespiratoryDistressSyndromeExacerbationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  if (from._internal_has_leftlungaffected()) {
    leftlungaffected_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.leftlungaffected_);
  } else {
    leftlungaffected_ = nullptr;
  }
  if (from._internal_has_rightlungaffected()) {
    rightlungaffected_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.rightlungaffected_);
  } else {
    rightlungaffected_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData)
}

void AcuteRespiratoryDistressSyndromeExacerbationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AcuteRespiratoryDistressSyndromeExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rightlungaffected_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(rightlungaffected_));
}

AcuteRespiratoryDistressSyndromeExacerbationData::~AcuteRespiratoryDistressSyndromeExacerbationData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AcuteRespiratoryDistressSyndromeExacerbationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
  if (this != internal_default_instance()) delete severity_;
  if (this != internal_default_instance()) delete leftlungaffected_;
  if (this != internal_default_instance()) delete rightlungaffected_;
}

void AcuteRespiratoryDistressSyndromeExacerbationData::ArenaDtor(void* object) {
  AcuteRespiratoryDistressSyndromeExacerbationData* _this = reinterpret_cast< AcuteRespiratoryDistressSyndromeExacerbationData* >(object);
  (void)_this;
}
void AcuteRespiratoryDistressSyndromeExacerbationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcuteRespiratoryDistressSyndromeExacerbationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcuteRespiratoryDistressSyndromeExacerbationData& AcuteRespiratoryDistressSyndromeExacerbationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcuteRespiratoryDistressSyndromeExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void AcuteRespiratoryDistressSyndromeExacerbationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  if (GetArena() == nullptr && leftlungaffected_ != nullptr) {
    delete leftlungaffected_;
  }
  leftlungaffected_ = nullptr;
  if (GetArena() == nullptr && rightlungaffected_ != nullptr) {
    delete rightlungaffected_;
  }
  rightlungaffected_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcuteRespiratoryDistressSyndromeExacerbationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data LeftLungAffected = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftlungaffected(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data RightLungAffected = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightlungaffected(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcuteRespiratoryDistressSyndromeExacerbationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::severity(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data LeftLungAffected = 3;
  if (this->has_leftlungaffected()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::leftlungaffected(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data RightLungAffected = 4;
  if (this->has_rightlungaffected()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rightlungaffected(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData)
  return target;
}

size_t AcuteRespiratoryDistressSyndromeExacerbationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  // .pulse.cdm.bind.Scalar0To1Data LeftLungAffected = 3;
  if (this->has_leftlungaffected()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftlungaffected_);
  }

  // .pulse.cdm.bind.Scalar0To1Data RightLungAffected = 4;
  if (this->has_rightlungaffected()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightlungaffected_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcuteRespiratoryDistressSyndromeExacerbationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData)
  GOOGLE_DCHECK_NE(&from, this);
  const AcuteRespiratoryDistressSyndromeExacerbationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcuteRespiratoryDistressSyndromeExacerbationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData)
    MergeFrom(*source);
  }
}

void AcuteRespiratoryDistressSyndromeExacerbationData::MergeFrom(const AcuteRespiratoryDistressSyndromeExacerbationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
  if (from.has_leftlungaffected()) {
    _internal_mutable_leftlungaffected()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_leftlungaffected());
  }
  if (from.has_rightlungaffected()) {
    _internal_mutable_rightlungaffected()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_rightlungaffected());
  }
}

void AcuteRespiratoryDistressSyndromeExacerbationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcuteRespiratoryDistressSyndromeExacerbationData::CopyFrom(const AcuteRespiratoryDistressSyndromeExacerbationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcuteRespiratoryDistressSyndromeExacerbationData::IsInitialized() const {
  return true;
}

void AcuteRespiratoryDistressSyndromeExacerbationData::InternalSwap(AcuteRespiratoryDistressSyndromeExacerbationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AcuteRespiratoryDistressSyndromeExacerbationData, rightlungaffected_)
      + sizeof(AcuteRespiratoryDistressSyndromeExacerbationData::rightlungaffected_)
      - PROTOBUF_FIELD_OFFSET(AcuteRespiratoryDistressSyndromeExacerbationData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AcuteRespiratoryDistressSyndromeExacerbationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AcuteStressData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const AcuteStressData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const AcuteStressData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
AcuteStressData::_Internal::patientaction(const AcuteStressData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
AcuteStressData::_Internal::severity(const AcuteStressData* msg) {
  return *msg->severity_;
}
void AcuteStressData::clear_severity() {
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
AcuteStressData::AcuteStressData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.AcuteStressData)
}
AcuteStressData::AcuteStressData(const AcuteStressData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AcuteStressData)
}

void AcuteStressData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AcuteStressData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(severity_));
}

AcuteStressData::~AcuteStressData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AcuteStressData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AcuteStressData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
  if (this != internal_default_instance()) delete severity_;
}

void AcuteStressData::ArenaDtor(void* object) {
  AcuteStressData* _this = reinterpret_cast< AcuteStressData* >(object);
  (void)_this;
}
void AcuteStressData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcuteStressData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcuteStressData& AcuteStressData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcuteStressData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void AcuteStressData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AcuteStressData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcuteStressData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcuteStressData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AcuteStressData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AcuteStressData)
  return target;
}

size_t AcuteStressData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AcuteStressData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcuteStressData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AcuteStressData)
  GOOGLE_DCHECK_NE(&from, this);
  const AcuteStressData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcuteStressData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AcuteStressData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AcuteStressData)
    MergeFrom(*source);
  }
}

void AcuteStressData::MergeFrom(const AcuteStressData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AcuteStressData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
}

void AcuteStressData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AcuteStressData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcuteStressData::CopyFrom(const AcuteStressData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AcuteStressData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcuteStressData::IsInitialized() const {
  return true;
}

void AcuteStressData::InternalSwap(AcuteStressData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AcuteStressData, severity_)
      + sizeof(AcuteStressData::severity_)
      - PROTOBUF_FIELD_OFFSET(AcuteStressData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AcuteStressData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AirwayObstructionData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const AirwayObstructionData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const AirwayObstructionData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
AirwayObstructionData::_Internal::patientaction(const AirwayObstructionData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
AirwayObstructionData::_Internal::severity(const AirwayObstructionData* msg) {
  return *msg->severity_;
}
void AirwayObstructionData::clear_severity() {
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
AirwayObstructionData::AirwayObstructionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.AirwayObstructionData)
}
AirwayObstructionData::AirwayObstructionData(const AirwayObstructionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AirwayObstructionData)
}

void AirwayObstructionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AirwayObstructionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(severity_));
}

AirwayObstructionData::~AirwayObstructionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AirwayObstructionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AirwayObstructionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
  if (this != internal_default_instance()) delete severity_;
}

void AirwayObstructionData::ArenaDtor(void* object) {
  AirwayObstructionData* _this = reinterpret_cast< AirwayObstructionData* >(object);
  (void)_this;
}
void AirwayObstructionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AirwayObstructionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AirwayObstructionData& AirwayObstructionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AirwayObstructionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void AirwayObstructionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AirwayObstructionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AirwayObstructionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AirwayObstructionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AirwayObstructionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AirwayObstructionData)
  return target;
}

size_t AirwayObstructionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AirwayObstructionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AirwayObstructionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AirwayObstructionData)
  GOOGLE_DCHECK_NE(&from, this);
  const AirwayObstructionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AirwayObstructionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AirwayObstructionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AirwayObstructionData)
    MergeFrom(*source);
  }
}

void AirwayObstructionData::MergeFrom(const AirwayObstructionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AirwayObstructionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
}

void AirwayObstructionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AirwayObstructionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AirwayObstructionData::CopyFrom(const AirwayObstructionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AirwayObstructionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AirwayObstructionData::IsInitialized() const {
  return true;
}

void AirwayObstructionData::InternalSwap(AirwayObstructionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AirwayObstructionData, severity_)
      + sizeof(AirwayObstructionData::severity_)
      - PROTOBUF_FIELD_OFFSET(AirwayObstructionData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AirwayObstructionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AsthmaAttackData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const AsthmaAttackData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const AsthmaAttackData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
AsthmaAttackData::_Internal::patientaction(const AsthmaAttackData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
AsthmaAttackData::_Internal::severity(const AsthmaAttackData* msg) {
  return *msg->severity_;
}
void AsthmaAttackData::clear_severity() {
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
AsthmaAttackData::AsthmaAttackData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.AsthmaAttackData)
}
AsthmaAttackData::AsthmaAttackData(const AsthmaAttackData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AsthmaAttackData)
}

void AsthmaAttackData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AsthmaAttackData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(severity_));
}

AsthmaAttackData::~AsthmaAttackData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AsthmaAttackData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AsthmaAttackData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
  if (this != internal_default_instance()) delete severity_;
}

void AsthmaAttackData::ArenaDtor(void* object) {
  AsthmaAttackData* _this = reinterpret_cast< AsthmaAttackData* >(object);
  (void)_this;
}
void AsthmaAttackData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AsthmaAttackData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AsthmaAttackData& AsthmaAttackData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AsthmaAttackData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void AsthmaAttackData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AsthmaAttackData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AsthmaAttackData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AsthmaAttackData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AsthmaAttackData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AsthmaAttackData)
  return target;
}

size_t AsthmaAttackData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AsthmaAttackData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AsthmaAttackData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AsthmaAttackData)
  GOOGLE_DCHECK_NE(&from, this);
  const AsthmaAttackData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AsthmaAttackData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AsthmaAttackData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AsthmaAttackData)
    MergeFrom(*source);
  }
}

void AsthmaAttackData::MergeFrom(const AsthmaAttackData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AsthmaAttackData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
}

void AsthmaAttackData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AsthmaAttackData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsthmaAttackData::CopyFrom(const AsthmaAttackData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AsthmaAttackData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsthmaAttackData::IsInitialized() const {
  return true;
}

void AsthmaAttackData::InternalSwap(AsthmaAttackData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AsthmaAttackData, severity_)
      + sizeof(AsthmaAttackData::severity_)
      - PROTOBUF_FIELD_OFFSET(AsthmaAttackData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AsthmaAttackData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BrainInjuryData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const BrainInjuryData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const BrainInjuryData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
BrainInjuryData::_Internal::patientaction(const BrainInjuryData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
BrainInjuryData::_Internal::severity(const BrainInjuryData* msg) {
  return *msg->severity_;
}
void BrainInjuryData::clear_severity() {
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
BrainInjuryData::BrainInjuryData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.BrainInjuryData)
}
BrainInjuryData::BrainInjuryData(const BrainInjuryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.BrainInjuryData)
}

void BrainInjuryData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BrainInjuryData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(type_));
}

BrainInjuryData::~BrainInjuryData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.BrainInjuryData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BrainInjuryData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
  if (this != internal_default_instance()) delete severity_;
}

void BrainInjuryData::ArenaDtor(void* object) {
  BrainInjuryData* _this = reinterpret_cast< BrainInjuryData* >(object);
  (void)_this;
}
void BrainInjuryData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BrainInjuryData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BrainInjuryData& BrainInjuryData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BrainInjuryData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void BrainInjuryData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.BrainInjuryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BrainInjuryData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.BrainInjuryData.eType Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::pulse::cdm::bind::BrainInjuryData_eType>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BrainInjuryData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.BrainInjuryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.BrainInjuryData.eType Type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 3;
  if (this->has_severity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.BrainInjuryData)
  return target;
}

size_t BrainInjuryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.BrainInjuryData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 3;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  // .pulse.cdm.bind.BrainInjuryData.eType Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BrainInjuryData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.BrainInjuryData)
  GOOGLE_DCHECK_NE(&from, this);
  const BrainInjuryData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BrainInjuryData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.BrainInjuryData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.BrainInjuryData)
    MergeFrom(*source);
  }
}

void BrainInjuryData::MergeFrom(const BrainInjuryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.BrainInjuryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void BrainInjuryData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.BrainInjuryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrainInjuryData::CopyFrom(const BrainInjuryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.BrainInjuryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrainInjuryData::IsInitialized() const {
  return true;
}

void BrainInjuryData::InternalSwap(BrainInjuryData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BrainInjuryData, type_)
      + sizeof(BrainInjuryData::type_)
      - PROTOBUF_FIELD_OFFSET(BrainInjuryData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BrainInjuryData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BronchoconstrictionData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const BronchoconstrictionData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const BronchoconstrictionData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
BronchoconstrictionData::_Internal::patientaction(const BronchoconstrictionData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
BronchoconstrictionData::_Internal::severity(const BronchoconstrictionData* msg) {
  return *msg->severity_;
}
void BronchoconstrictionData::clear_severity() {
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
BronchoconstrictionData::BronchoconstrictionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.BronchoconstrictionData)
}
BronchoconstrictionData::BronchoconstrictionData(const BronchoconstrictionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.BronchoconstrictionData)
}

void BronchoconstrictionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BronchoconstrictionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(severity_));
}

BronchoconstrictionData::~BronchoconstrictionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.BronchoconstrictionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BronchoconstrictionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
  if (this != internal_default_instance()) delete severity_;
}

void BronchoconstrictionData::ArenaDtor(void* object) {
  BronchoconstrictionData* _this = reinterpret_cast< BronchoconstrictionData* >(object);
  (void)_this;
}
void BronchoconstrictionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BronchoconstrictionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BronchoconstrictionData& BronchoconstrictionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BronchoconstrictionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void BronchoconstrictionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.BronchoconstrictionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BronchoconstrictionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BronchoconstrictionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.BronchoconstrictionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.BronchoconstrictionData)
  return target;
}

size_t BronchoconstrictionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.BronchoconstrictionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BronchoconstrictionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.BronchoconstrictionData)
  GOOGLE_DCHECK_NE(&from, this);
  const BronchoconstrictionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BronchoconstrictionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.BronchoconstrictionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.BronchoconstrictionData)
    MergeFrom(*source);
  }
}

void BronchoconstrictionData::MergeFrom(const BronchoconstrictionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.BronchoconstrictionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
}

void BronchoconstrictionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.BronchoconstrictionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BronchoconstrictionData::CopyFrom(const BronchoconstrictionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.BronchoconstrictionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BronchoconstrictionData::IsInitialized() const {
  return true;
}

void BronchoconstrictionData::InternalSwap(BronchoconstrictionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BronchoconstrictionData, severity_)
      + sizeof(BronchoconstrictionData::severity_)
      - PROTOBUF_FIELD_OFFSET(BronchoconstrictionData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BronchoconstrictionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CardiacArrestData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const CardiacArrestData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
CardiacArrestData::_Internal::patientaction(const CardiacArrestData* msg) {
  return *msg->patientaction_;
}
CardiacArrestData::CardiacArrestData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.CardiacArrestData)
}
CardiacArrestData::CardiacArrestData(const CardiacArrestData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.CardiacArrestData)
}

void CardiacArrestData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CardiacArrestData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(state_));
}

CardiacArrestData::~CardiacArrestData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.CardiacArrestData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CardiacArrestData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
}

void CardiacArrestData::ArenaDtor(void* object) {
  CardiacArrestData* _this = reinterpret_cast< CardiacArrestData* >(object);
  (void)_this;
}
void CardiacArrestData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CardiacArrestData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CardiacArrestData& CardiacArrestData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CardiacArrestData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void CardiacArrestData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.CardiacArrestData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CardiacArrestData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eSwitch State = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CardiacArrestData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.CardiacArrestData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.eSwitch State = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.CardiacArrestData)
  return target;
}

size_t CardiacArrestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.CardiacArrestData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.eSwitch State = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CardiacArrestData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.CardiacArrestData)
  GOOGLE_DCHECK_NE(&from, this);
  const CardiacArrestData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CardiacArrestData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.CardiacArrestData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.CardiacArrestData)
    MergeFrom(*source);
  }
}

void CardiacArrestData::MergeFrom(const CardiacArrestData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.CardiacArrestData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void CardiacArrestData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.CardiacArrestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardiacArrestData::CopyFrom(const CardiacArrestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.CardiacArrestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardiacArrestData::IsInitialized() const {
  return true;
}

void CardiacArrestData::InternalSwap(CardiacArrestData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CardiacArrestData, state_)
      + sizeof(CardiacArrestData::state_)
      - PROTOBUF_FIELD_OFFSET(CardiacArrestData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CardiacArrestData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChestCompressionForceData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const ChestCompressionForceData* msg);
  static const ::pulse::cdm::bind::ScalarForceData& force(const ChestCompressionForceData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
ChestCompressionForceData::_Internal::patientaction(const ChestCompressionForceData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::ScalarForceData&
ChestCompressionForceData::_Internal::force(const ChestCompressionForceData* msg) {
  return *msg->force_;
}
void ChestCompressionForceData::clear_force() {
  if (GetArena() == nullptr && force_ != nullptr) {
    delete force_;
  }
  force_ = nullptr;
}
ChestCompressionForceData::ChestCompressionForceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ChestCompressionForceData)
}
ChestCompressionForceData::ChestCompressionForceData(const ChestCompressionForceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  if (from._internal_has_force()) {
    force_ = new ::pulse::cdm::bind::ScalarForceData(*from.force_);
  } else {
    force_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ChestCompressionForceData)
}

void ChestCompressionForceData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChestCompressionForceData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&force_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(force_));
}

ChestCompressionForceData::~ChestCompressionForceData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ChestCompressionForceData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChestCompressionForceData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
  if (this != internal_default_instance()) delete force_;
}

void ChestCompressionForceData::ArenaDtor(void* object) {
  ChestCompressionForceData* _this = reinterpret_cast< ChestCompressionForceData* >(object);
  (void)_this;
}
void ChestCompressionForceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChestCompressionForceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChestCompressionForceData& ChestCompressionForceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChestCompressionForceData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void ChestCompressionForceData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ChestCompressionForceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  if (GetArena() == nullptr && force_ != nullptr) {
    delete force_;
  }
  force_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChestCompressionForceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarForceData Force = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_force(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChestCompressionForceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ChestCompressionForceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarForceData Force = 2;
  if (this->has_force()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::force(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ChestCompressionForceData)
  return target;
}

size_t ChestCompressionForceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ChestCompressionForceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.ScalarForceData Force = 2;
  if (this->has_force()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *force_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChestCompressionForceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ChestCompressionForceData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChestCompressionForceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChestCompressionForceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ChestCompressionForceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ChestCompressionForceData)
    MergeFrom(*source);
  }
}

void ChestCompressionForceData::MergeFrom(const ChestCompressionForceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ChestCompressionForceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.has_force()) {
    _internal_mutable_force()->::pulse::cdm::bind::ScalarForceData::MergeFrom(from._internal_force());
  }
}

void ChestCompressionForceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ChestCompressionForceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChestCompressionForceData::CopyFrom(const ChestCompressionForceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ChestCompressionForceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChestCompressionForceData::IsInitialized() const {
  return true;
}

void ChestCompressionForceData::InternalSwap(ChestCompressionForceData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChestCompressionForceData, force_)
      + sizeof(ChestCompressionForceData::force_)
      - PROTOBUF_FIELD_OFFSET(ChestCompressionForceData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChestCompressionForceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChestCompressionForceScaleData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const ChestCompressionForceScaleData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& forcescale(const ChestCompressionForceScaleData* msg);
  static const ::pulse::cdm::bind::ScalarTimeData& forceperiod(const ChestCompressionForceScaleData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
ChestCompressionForceScaleData::_Internal::patientaction(const ChestCompressionForceScaleData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
ChestCompressionForceScaleData::_Internal::forcescale(const ChestCompressionForceScaleData* msg) {
  return *msg->forcescale_;
}
const ::pulse::cdm::bind::ScalarTimeData&
ChestCompressionForceScaleData::_Internal::forceperiod(const ChestCompressionForceScaleData* msg) {
  return *msg->forceperiod_;
}
void ChestCompressionForceScaleData::clear_forcescale() {
  if (GetArena() == nullptr && forcescale_ != nullptr) {
    delete forcescale_;
  }
  forcescale_ = nullptr;
}
void ChestCompressionForceScaleData::clear_forceperiod() {
  if (GetArena() == nullptr && forceperiod_ != nullptr) {
    delete forceperiod_;
  }
  forceperiod_ = nullptr;
}
ChestCompressionForceScaleData::ChestCompressionForceScaleData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ChestCompressionForceScaleData)
}
ChestCompressionForceScaleData::ChestCompressionForceScaleData(const ChestCompressionForceScaleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  if (from._internal_has_forcescale()) {
    forcescale_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.forcescale_);
  } else {
    forcescale_ = nullptr;
  }
  if (from._internal_has_forceperiod()) {
    forceperiod_ = new ::pulse::cdm::bind::ScalarTimeData(*from.forceperiod_);
  } else {
    forceperiod_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ChestCompressionForceScaleData)
}

void ChestCompressionForceScaleData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChestCompressionForceScaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&forceperiod_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(forceperiod_));
}

ChestCompressionForceScaleData::~ChestCompressionForceScaleData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ChestCompressionForceScaleData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChestCompressionForceScaleData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
  if (this != internal_default_instance()) delete forcescale_;
  if (this != internal_default_instance()) delete forceperiod_;
}

void ChestCompressionForceScaleData::ArenaDtor(void* object) {
  ChestCompressionForceScaleData* _this = reinterpret_cast< ChestCompressionForceScaleData* >(object);
  (void)_this;
}
void ChestCompressionForceScaleData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChestCompressionForceScaleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChestCompressionForceScaleData& ChestCompressionForceScaleData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChestCompressionForceScaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void ChestCompressionForceScaleData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ChestCompressionForceScaleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  if (GetArena() == nullptr && forcescale_ != nullptr) {
    delete forcescale_;
  }
  forcescale_ = nullptr;
  if (GetArena() == nullptr && forceperiod_ != nullptr) {
    delete forceperiod_;
  }
  forceperiod_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChestCompressionForceScaleData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data ForceScale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_forcescale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData ForcePeriod = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_forceperiod(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChestCompressionForceScaleData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ChestCompressionForceScaleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data ForceScale = 2;
  if (this->has_forcescale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::forcescale(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTimeData ForcePeriod = 3;
  if (this->has_forceperiod()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::forceperiod(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ChestCompressionForceScaleData)
  return target;
}

size_t ChestCompressionForceScaleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ChestCompressionForceScaleData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data ForceScale = 2;
  if (this->has_forcescale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *forcescale_);
  }

  // .pulse.cdm.bind.ScalarTimeData ForcePeriod = 3;
  if (this->has_forceperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *forceperiod_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChestCompressionForceScaleData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ChestCompressionForceScaleData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChestCompressionForceScaleData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChestCompressionForceScaleData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ChestCompressionForceScaleData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ChestCompressionForceScaleData)
    MergeFrom(*source);
  }
}

void ChestCompressionForceScaleData::MergeFrom(const ChestCompressionForceScaleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ChestCompressionForceScaleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.has_forcescale()) {
    _internal_mutable_forcescale()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_forcescale());
  }
  if (from.has_forceperiod()) {
    _internal_mutable_forceperiod()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_forceperiod());
  }
}

void ChestCompressionForceScaleData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ChestCompressionForceScaleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChestCompressionForceScaleData::CopyFrom(const ChestCompressionForceScaleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ChestCompressionForceScaleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChestCompressionForceScaleData::IsInitialized() const {
  return true;
}

void ChestCompressionForceScaleData::InternalSwap(ChestCompressionForceScaleData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChestCompressionForceScaleData, forceperiod_)
      + sizeof(ChestCompressionForceScaleData::forceperiod_)
      - PROTOBUF_FIELD_OFFSET(ChestCompressionForceScaleData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChestCompressionForceScaleData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChestOcclusiveDressingData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const ChestOcclusiveDressingData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
ChestOcclusiveDressingData::_Internal::patientaction(const ChestOcclusiveDressingData* msg) {
  return *msg->patientaction_;
}
ChestOcclusiveDressingData::ChestOcclusiveDressingData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ChestOcclusiveDressingData)
}
ChestOcclusiveDressingData::ChestOcclusiveDressingData(const ChestOcclusiveDressingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&state_)) + sizeof(side_));
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ChestOcclusiveDressingData)
}

void ChestOcclusiveDressingData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChestOcclusiveDressingData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&side_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(side_));
}

ChestOcclusiveDressingData::~ChestOcclusiveDressingData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ChestOcclusiveDressingData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChestOcclusiveDressingData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
}

void ChestOcclusiveDressingData::ArenaDtor(void* object) {
  ChestOcclusiveDressingData* _this = reinterpret_cast< ChestOcclusiveDressingData* >(object);
  (void)_this;
}
void ChestOcclusiveDressingData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChestOcclusiveDressingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChestOcclusiveDressingData& ChestOcclusiveDressingData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChestOcclusiveDressingData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void ChestOcclusiveDressingData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ChestOcclusiveDressingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&side_) -
      reinterpret_cast<char*>(&state_)) + sizeof(side_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChestOcclusiveDressingData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eSwitch State = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eSide Side = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::pulse::cdm::bind::eSide>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChestOcclusiveDressingData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ChestOcclusiveDressingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.eSwitch State = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // .pulse.cdm.bind.eSide Side = 3;
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_side(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ChestOcclusiveDressingData)
  return target;
}

size_t ChestOcclusiveDressingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ChestOcclusiveDressingData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.eSwitch State = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .pulse.cdm.bind.eSide Side = 3;
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChestOcclusiveDressingData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ChestOcclusiveDressingData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChestOcclusiveDressingData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChestOcclusiveDressingData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ChestOcclusiveDressingData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ChestOcclusiveDressingData)
    MergeFrom(*source);
  }
}

void ChestOcclusiveDressingData::MergeFrom(const ChestOcclusiveDressingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ChestOcclusiveDressingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
}

void ChestOcclusiveDressingData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ChestOcclusiveDressingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChestOcclusiveDressingData::CopyFrom(const ChestOcclusiveDressingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ChestOcclusiveDressingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChestOcclusiveDressingData::IsInitialized() const {
  return true;
}

void ChestOcclusiveDressingData::InternalSwap(ChestOcclusiveDressingData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChestOcclusiveDressingData, side_)
      + sizeof(ChestOcclusiveDressingData::side_)
      - PROTOBUF_FIELD_OFFSET(ChestOcclusiveDressingData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChestOcclusiveDressingData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChronicObstructivePulmonaryDiseaseExacerbationData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const ChronicObstructivePulmonaryDiseaseExacerbationData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& bronchitisseverity(const ChronicObstructivePulmonaryDiseaseExacerbationData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& emphysemaseverity(const ChronicObstructivePulmonaryDiseaseExacerbationData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
ChronicObstructivePulmonaryDiseaseExacerbationData::_Internal::patientaction(const ChronicObstructivePulmonaryDiseaseExacerbationData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
ChronicObstructivePulmonaryDiseaseExacerbationData::_Internal::bronchitisseverity(const ChronicObstructivePulmonaryDiseaseExacerbationData* msg) {
  return *msg->bronchitisseverity_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
ChronicObstructivePulmonaryDiseaseExacerbationData::_Internal::emphysemaseverity(const ChronicObstructivePulmonaryDiseaseExacerbationData* msg) {
  return *msg->emphysemaseverity_;
}
void ChronicObstructivePulmonaryDiseaseExacerbationData::clear_bronchitisseverity() {
  if (GetArena() == nullptr && bronchitisseverity_ != nullptr) {
    delete bronchitisseverity_;
  }
  bronchitisseverity_ = nullptr;
}
void ChronicObstructivePulmonaryDiseaseExacerbationData::clear_emphysemaseverity() {
  if (GetArena() == nullptr && emphysemaseverity_ != nullptr) {
    delete emphysemaseverity_;
  }
  emphysemaseverity_ = nullptr;
}
ChronicObstructivePulmonaryDiseaseExacerbationData::ChronicObstructivePulmonaryDiseaseExacerbationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData)
}
ChronicObstructivePulmonaryDiseaseExacerbationData::ChronicObstructivePulmonaryDiseaseExacerbationData(const ChronicObstructivePulmonaryDiseaseExacerbationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  if (from._internal_has_bronchitisseverity()) {
    bronchitisseverity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.bronchitisseverity_);
  } else {
    bronchitisseverity_ = nullptr;
  }
  if (from._internal_has_emphysemaseverity()) {
    emphysemaseverity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.emphysemaseverity_);
  } else {
    emphysemaseverity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData)
}

void ChronicObstructivePulmonaryDiseaseExacerbationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChronicObstructivePulmonaryDiseaseExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&emphysemaseverity_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(emphysemaseverity_));
}

ChronicObstructivePulmonaryDiseaseExacerbationData::~ChronicObstructivePulmonaryDiseaseExacerbationData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChronicObstructivePulmonaryDiseaseExacerbationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
  if (this != internal_default_instance()) delete bronchitisseverity_;
  if (this != internal_default_instance()) delete emphysemaseverity_;
}

void ChronicObstructivePulmonaryDiseaseExacerbationData::ArenaDtor(void* object) {
  ChronicObstructivePulmonaryDiseaseExacerbationData* _this = reinterpret_cast< ChronicObstructivePulmonaryDiseaseExacerbationData* >(object);
  (void)_this;
}
void ChronicObstructivePulmonaryDiseaseExacerbationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChronicObstructivePulmonaryDiseaseExacerbationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChronicObstructivePulmonaryDiseaseExacerbationData& ChronicObstructivePulmonaryDiseaseExacerbationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChronicObstructivePulmonaryDiseaseExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void ChronicObstructivePulmonaryDiseaseExacerbationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  if (GetArena() == nullptr && bronchitisseverity_ != nullptr) {
    delete bronchitisseverity_;
  }
  bronchitisseverity_ = nullptr;
  if (GetArena() == nullptr && emphysemaseverity_ != nullptr) {
    delete emphysemaseverity_;
  }
  emphysemaseverity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChronicObstructivePulmonaryDiseaseExacerbationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data BronchitisSeverity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bronchitisseverity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data EmphysemaSeverity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_emphysemaseverity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChronicObstructivePulmonaryDiseaseExacerbationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data BronchitisSeverity = 2;
  if (this->has_bronchitisseverity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bronchitisseverity(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data EmphysemaSeverity = 3;
  if (this->has_emphysemaseverity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::emphysemaseverity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData)
  return target;
}

size_t ChronicObstructivePulmonaryDiseaseExacerbationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data BronchitisSeverity = 2;
  if (this->has_bronchitisseverity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bronchitisseverity_);
  }

  // .pulse.cdm.bind.Scalar0To1Data EmphysemaSeverity = 3;
  if (this->has_emphysemaseverity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *emphysemaseverity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChronicObstructivePulmonaryDiseaseExacerbationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChronicObstructivePulmonaryDiseaseExacerbationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChronicObstructivePulmonaryDiseaseExacerbationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData)
    MergeFrom(*source);
  }
}

void ChronicObstructivePulmonaryDiseaseExacerbationData::MergeFrom(const ChronicObstructivePulmonaryDiseaseExacerbationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.has_bronchitisseverity()) {
    _internal_mutable_bronchitisseverity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_bronchitisseverity());
  }
  if (from.has_emphysemaseverity()) {
    _internal_mutable_emphysemaseverity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_emphysemaseverity());
  }
}

void ChronicObstructivePulmonaryDiseaseExacerbationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChronicObstructivePulmonaryDiseaseExacerbationData::CopyFrom(const ChronicObstructivePulmonaryDiseaseExacerbationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChronicObstructivePulmonaryDiseaseExacerbationData::IsInitialized() const {
  return true;
}

void ChronicObstructivePulmonaryDiseaseExacerbationData::InternalSwap(ChronicObstructivePulmonaryDiseaseExacerbationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChronicObstructivePulmonaryDiseaseExacerbationData, emphysemaseverity_)
      + sizeof(ChronicObstructivePulmonaryDiseaseExacerbationData::emphysemaseverity_)
      - PROTOBUF_FIELD_OFFSET(ChronicObstructivePulmonaryDiseaseExacerbationData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChronicObstructivePulmonaryDiseaseExacerbationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DyspneaData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const DyspneaData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const DyspneaData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
DyspneaData::_Internal::patientaction(const DyspneaData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
DyspneaData::_Internal::severity(const DyspneaData* msg) {
  return *msg->severity_;
}
void DyspneaData::clear_severity() {
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
DyspneaData::DyspneaData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.DyspneaData)
}
DyspneaData::DyspneaData(const DyspneaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.DyspneaData)
}

void DyspneaData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DyspneaData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(severity_));
}

DyspneaData::~DyspneaData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.DyspneaData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DyspneaData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
  if (this != internal_default_instance()) delete severity_;
}

void DyspneaData::ArenaDtor(void* object) {
  DyspneaData* _this = reinterpret_cast< DyspneaData* >(object);
  (void)_this;
}
void DyspneaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DyspneaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DyspneaData& DyspneaData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DyspneaData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void DyspneaData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.DyspneaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DyspneaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DyspneaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.DyspneaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.DyspneaData)
  return target;
}

size_t DyspneaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.DyspneaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DyspneaData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.DyspneaData)
  GOOGLE_DCHECK_NE(&from, this);
  const DyspneaData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DyspneaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.DyspneaData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.DyspneaData)
    MergeFrom(*source);
  }
}

void DyspneaData::MergeFrom(const DyspneaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.DyspneaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
}

void DyspneaData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.DyspneaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DyspneaData::CopyFrom(const DyspneaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.DyspneaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DyspneaData::IsInitialized() const {
  return true;
}

void DyspneaData::InternalSwap(DyspneaData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DyspneaData, severity_)
      + sizeof(DyspneaData::severity_)
      - PROTOBUF_FIELD_OFFSET(DyspneaData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DyspneaData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ForcedInhaleData::_Internal {
 public:
  static const ::pulse::cdm::bind::Scalar0To1Data& inspiratorycapacityfraction(const ForcedInhaleData* msg);
  static const ::pulse::cdm::bind::ScalarTimeData& inhaleperiod(const ForcedInhaleData* msg);
  static const ::pulse::cdm::bind::ScalarTimeData& holdperiod(const ForcedInhaleData* msg);
  static const ::pulse::cdm::bind::ScalarTimeData& releaseperiod(const ForcedInhaleData* msg);
};

const ::pulse::cdm::bind::Scalar0To1Data&
ForcedInhaleData::_Internal::inspiratorycapacityfraction(const ForcedInhaleData* msg) {
  return *msg->inspiratorycapacityfraction_;
}
const ::pulse::cdm::bind::ScalarTimeData&
ForcedInhaleData::_Internal::inhaleperiod(const ForcedInhaleData* msg) {
  return *msg->inhaleperiod_;
}
const ::pulse::cdm::bind::ScalarTimeData&
ForcedInhaleData::_Internal::holdperiod(const ForcedInhaleData* msg) {
  return *msg->holdperiod_;
}
const ::pulse::cdm::bind::ScalarTimeData&
ForcedInhaleData::_Internal::releaseperiod(const ForcedInhaleData* msg) {
  return *msg->releaseperiod_;
}
void ForcedInhaleData::clear_inspiratorycapacityfraction() {
  if (GetArena() == nullptr && inspiratorycapacityfraction_ != nullptr) {
    delete inspiratorycapacityfraction_;
  }
  inspiratorycapacityfraction_ = nullptr;
}
void ForcedInhaleData::clear_inhaleperiod() {
  if (GetArena() == nullptr && inhaleperiod_ != nullptr) {
    delete inhaleperiod_;
  }
  inhaleperiod_ = nullptr;
}
void ForcedInhaleData::clear_holdperiod() {
  if (GetArena() == nullptr && holdperiod_ != nullptr) {
    delete holdperiod_;
  }
  holdperiod_ = nullptr;
}
void ForcedInhaleData::clear_releaseperiod() {
  if (GetArena() == nullptr && releaseperiod_ != nullptr) {
    delete releaseperiod_;
  }
  releaseperiod_ = nullptr;
}
ForcedInhaleData::ForcedInhaleData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ForcedInhaleData)
}
ForcedInhaleData::ForcedInhaleData(const ForcedInhaleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_inspiratorycapacityfraction()) {
    inspiratorycapacityfraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.inspiratorycapacityfraction_);
  } else {
    inspiratorycapacityfraction_ = nullptr;
  }
  if (from._internal_has_inhaleperiod()) {
    inhaleperiod_ = new ::pulse::cdm::bind::ScalarTimeData(*from.inhaleperiod_);
  } else {
    inhaleperiod_ = nullptr;
  }
  if (from._internal_has_holdperiod()) {
    holdperiod_ = new ::pulse::cdm::bind::ScalarTimeData(*from.holdperiod_);
  } else {
    holdperiod_ = nullptr;
  }
  if (from._internal_has_releaseperiod()) {
    releaseperiod_ = new ::pulse::cdm::bind::ScalarTimeData(*from.releaseperiod_);
  } else {
    releaseperiod_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ForcedInhaleData)
}

void ForcedInhaleData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ForcedInhaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&inspiratorycapacityfraction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&releaseperiod_) -
      reinterpret_cast<char*>(&inspiratorycapacityfraction_)) + sizeof(releaseperiod_));
}

ForcedInhaleData::~ForcedInhaleData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ForcedInhaleData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ForcedInhaleData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete inspiratorycapacityfraction_;
  if (this != internal_default_instance()) delete inhaleperiod_;
  if (this != internal_default_instance()) delete holdperiod_;
  if (this != internal_default_instance()) delete releaseperiod_;
}

void ForcedInhaleData::ArenaDtor(void* object) {
  ForcedInhaleData* _this = reinterpret_cast< ForcedInhaleData* >(object);
  (void)_this;
}
void ForcedInhaleData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ForcedInhaleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForcedInhaleData& ForcedInhaleData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForcedInhaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void ForcedInhaleData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ForcedInhaleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && inspiratorycapacityfraction_ != nullptr) {
    delete inspiratorycapacityfraction_;
  }
  inspiratorycapacityfraction_ = nullptr;
  if (GetArena() == nullptr && inhaleperiod_ != nullptr) {
    delete inhaleperiod_;
  }
  inhaleperiod_ = nullptr;
  if (GetArena() == nullptr && holdperiod_ != nullptr) {
    delete holdperiod_;
  }
  holdperiod_ = nullptr;
  if (GetArena() == nullptr && releaseperiod_ != nullptr) {
    delete releaseperiod_;
  }
  releaseperiod_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForcedInhaleData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.Scalar0To1Data InspiratoryCapacityFraction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_inspiratorycapacityfraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData InhalePeriod = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_inhaleperiod(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData HoldPeriod = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_holdperiod(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData ReleasePeriod = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_releaseperiod(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForcedInhaleData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ForcedInhaleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.Scalar0To1Data InspiratoryCapacityFraction = 1;
  if (this->has_inspiratorycapacityfraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::inspiratorycapacityfraction(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTimeData InhalePeriod = 2;
  if (this->has_inhaleperiod()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::inhaleperiod(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTimeData HoldPeriod = 3;
  if (this->has_holdperiod()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::holdperiod(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTimeData ReleasePeriod = 4;
  if (this->has_releaseperiod()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::releaseperiod(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ForcedInhaleData)
  return target;
}

size_t ForcedInhaleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ForcedInhaleData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.Scalar0To1Data InspiratoryCapacityFraction = 1;
  if (this->has_inspiratorycapacityfraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inspiratorycapacityfraction_);
  }

  // .pulse.cdm.bind.ScalarTimeData InhalePeriod = 2;
  if (this->has_inhaleperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inhaleperiod_);
  }

  // .pulse.cdm.bind.ScalarTimeData HoldPeriod = 3;
  if (this->has_holdperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *holdperiod_);
  }

  // .pulse.cdm.bind.ScalarTimeData ReleasePeriod = 4;
  if (this->has_releaseperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *releaseperiod_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForcedInhaleData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ForcedInhaleData)
  GOOGLE_DCHECK_NE(&from, this);
  const ForcedInhaleData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForcedInhaleData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ForcedInhaleData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ForcedInhaleData)
    MergeFrom(*source);
  }
}

void ForcedInhaleData::MergeFrom(const ForcedInhaleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ForcedInhaleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_inspiratorycapacityfraction()) {
    _internal_mutable_inspiratorycapacityfraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_inspiratorycapacityfraction());
  }
  if (from.has_inhaleperiod()) {
    _internal_mutable_inhaleperiod()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_inhaleperiod());
  }
  if (from.has_holdperiod()) {
    _internal_mutable_holdperiod()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_holdperiod());
  }
  if (from.has_releaseperiod()) {
    _internal_mutable_releaseperiod()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_releaseperiod());
  }
}

void ForcedInhaleData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ForcedInhaleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForcedInhaleData::CopyFrom(const ForcedInhaleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ForcedInhaleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForcedInhaleData::IsInitialized() const {
  return true;
}

void ForcedInhaleData::InternalSwap(ForcedInhaleData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ForcedInhaleData, releaseperiod_)
      + sizeof(ForcedInhaleData::releaseperiod_)
      - PROTOBUF_FIELD_OFFSET(ForcedInhaleData, inspiratorycapacityfraction_)>(
          reinterpret_cast<char*>(&inspiratorycapacityfraction_),
          reinterpret_cast<char*>(&other->inspiratorycapacityfraction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ForcedInhaleData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ForcedExhaleData::_Internal {
 public:
  static const ::pulse::cdm::bind::Scalar0To1Data& expiratoryreservevolumefraction(const ForcedExhaleData* msg);
  static const ::pulse::cdm::bind::ScalarTimeData& exhaleperiod(const ForcedExhaleData* msg);
  static const ::pulse::cdm::bind::ScalarTimeData& holdperiod(const ForcedExhaleData* msg);
  static const ::pulse::cdm::bind::ScalarTimeData& releaseperiod(const ForcedExhaleData* msg);
};

const ::pulse::cdm::bind::Scalar0To1Data&
ForcedExhaleData::_Internal::expiratoryreservevolumefraction(const ForcedExhaleData* msg) {
  return *msg->expiratoryreservevolumefraction_;
}
const ::pulse::cdm::bind::ScalarTimeData&
ForcedExhaleData::_Internal::exhaleperiod(const ForcedExhaleData* msg) {
  return *msg->exhaleperiod_;
}
const ::pulse::cdm::bind::ScalarTimeData&
ForcedExhaleData::_Internal::holdperiod(const ForcedExhaleData* msg) {
  return *msg->holdperiod_;
}
const ::pulse::cdm::bind::ScalarTimeData&
ForcedExhaleData::_Internal::releaseperiod(const ForcedExhaleData* msg) {
  return *msg->releaseperiod_;
}
void ForcedExhaleData::clear_expiratoryreservevolumefraction() {
  if (GetArena() == nullptr && expiratoryreservevolumefraction_ != nullptr) {
    delete expiratoryreservevolumefraction_;
  }
  expiratoryreservevolumefraction_ = nullptr;
}
void ForcedExhaleData::clear_exhaleperiod() {
  if (GetArena() == nullptr && exhaleperiod_ != nullptr) {
    delete exhaleperiod_;
  }
  exhaleperiod_ = nullptr;
}
void ForcedExhaleData::clear_holdperiod() {
  if (GetArena() == nullptr && holdperiod_ != nullptr) {
    delete holdperiod_;
  }
  holdperiod_ = nullptr;
}
void ForcedExhaleData::clear_releaseperiod() {
  if (GetArena() == nullptr && releaseperiod_ != nullptr) {
    delete releaseperiod_;
  }
  releaseperiod_ = nullptr;
}
ForcedExhaleData::ForcedExhaleData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ForcedExhaleData)
}
ForcedExhaleData::ForcedExhaleData(const ForcedExhaleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_expiratoryreservevolumefraction()) {
    expiratoryreservevolumefraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.expiratoryreservevolumefraction_);
  } else {
    expiratoryreservevolumefraction_ = nullptr;
  }
  if (from._internal_has_exhaleperiod()) {
    exhaleperiod_ = new ::pulse::cdm::bind::ScalarTimeData(*from.exhaleperiod_);
  } else {
    exhaleperiod_ = nullptr;
  }
  if (from._internal_has_holdperiod()) {
    holdperiod_ = new ::pulse::cdm::bind::ScalarTimeData(*from.holdperiod_);
  } else {
    holdperiod_ = nullptr;
  }
  if (from._internal_has_releaseperiod()) {
    releaseperiod_ = new ::pulse::cdm::bind::ScalarTimeData(*from.releaseperiod_);
  } else {
    releaseperiod_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ForcedExhaleData)
}

void ForcedExhaleData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ForcedExhaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&expiratoryreservevolumefraction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&releaseperiod_) -
      reinterpret_cast<char*>(&expiratoryreservevolumefraction_)) + sizeof(releaseperiod_));
}

ForcedExhaleData::~ForcedExhaleData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ForcedExhaleData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ForcedExhaleData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete expiratoryreservevolumefraction_;
  if (this != internal_default_instance()) delete exhaleperiod_;
  if (this != internal_default_instance()) delete holdperiod_;
  if (this != internal_default_instance()) delete releaseperiod_;
}

void ForcedExhaleData::ArenaDtor(void* object) {
  ForcedExhaleData* _this = reinterpret_cast< ForcedExhaleData* >(object);
  (void)_this;
}
void ForcedExhaleData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ForcedExhaleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForcedExhaleData& ForcedExhaleData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForcedExhaleData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void ForcedExhaleData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ForcedExhaleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && expiratoryreservevolumefraction_ != nullptr) {
    delete expiratoryreservevolumefraction_;
  }
  expiratoryreservevolumefraction_ = nullptr;
  if (GetArena() == nullptr && exhaleperiod_ != nullptr) {
    delete exhaleperiod_;
  }
  exhaleperiod_ = nullptr;
  if (GetArena() == nullptr && holdperiod_ != nullptr) {
    delete holdperiod_;
  }
  holdperiod_ = nullptr;
  if (GetArena() == nullptr && releaseperiod_ != nullptr) {
    delete releaseperiod_;
  }
  releaseperiod_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForcedExhaleData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.Scalar0To1Data ExpiratoryReserveVolumeFraction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiratoryreservevolumefraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData ExhalePeriod = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_exhaleperiod(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData HoldPeriod = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_holdperiod(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData ReleasePeriod = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_releaseperiod(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForcedExhaleData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ForcedExhaleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.Scalar0To1Data ExpiratoryReserveVolumeFraction = 1;
  if (this->has_expiratoryreservevolumefraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::expiratoryreservevolumefraction(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTimeData ExhalePeriod = 2;
  if (this->has_exhaleperiod()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::exhaleperiod(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTimeData HoldPeriod = 3;
  if (this->has_holdperiod()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::holdperiod(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTimeData ReleasePeriod = 4;
  if (this->has_releaseperiod()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::releaseperiod(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ForcedExhaleData)
  return target;
}

size_t ForcedExhaleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ForcedExhaleData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.Scalar0To1Data ExpiratoryReserveVolumeFraction = 1;
  if (this->has_expiratoryreservevolumefraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiratoryreservevolumefraction_);
  }

  // .pulse.cdm.bind.ScalarTimeData ExhalePeriod = 2;
  if (this->has_exhaleperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exhaleperiod_);
  }

  // .pulse.cdm.bind.ScalarTimeData HoldPeriod = 3;
  if (this->has_holdperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *holdperiod_);
  }

  // .pulse.cdm.bind.ScalarTimeData ReleasePeriod = 4;
  if (this->has_releaseperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *releaseperiod_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForcedExhaleData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ForcedExhaleData)
  GOOGLE_DCHECK_NE(&from, this);
  const ForcedExhaleData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForcedExhaleData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ForcedExhaleData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ForcedExhaleData)
    MergeFrom(*source);
  }
}

void ForcedExhaleData::MergeFrom(const ForcedExhaleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ForcedExhaleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_expiratoryreservevolumefraction()) {
    _internal_mutable_expiratoryreservevolumefraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_expiratoryreservevolumefraction());
  }
  if (from.has_exhaleperiod()) {
    _internal_mutable_exhaleperiod()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_exhaleperiod());
  }
  if (from.has_holdperiod()) {
    _internal_mutable_holdperiod()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_holdperiod());
  }
  if (from.has_releaseperiod()) {
    _internal_mutable_releaseperiod()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_releaseperiod());
  }
}

void ForcedExhaleData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ForcedExhaleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForcedExhaleData::CopyFrom(const ForcedExhaleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ForcedExhaleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForcedExhaleData::IsInitialized() const {
  return true;
}

void ForcedExhaleData::InternalSwap(ForcedExhaleData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ForcedExhaleData, releaseperiod_)
      + sizeof(ForcedExhaleData::releaseperiod_)
      - PROTOBUF_FIELD_OFFSET(ForcedExhaleData, expiratoryreservevolumefraction_)>(
          reinterpret_cast<char*>(&expiratoryreservevolumefraction_),
          reinterpret_cast<char*>(&other->expiratoryreservevolumefraction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ForcedExhaleData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ForcedPauseData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarTimeData& period(const ForcedPauseData* msg);
};

const ::pulse::cdm::bind::ScalarTimeData&
ForcedPauseData::_Internal::period(const ForcedPauseData* msg) {
  return *msg->period_;
}
void ForcedPauseData::clear_period() {
  if (GetArena() == nullptr && period_ != nullptr) {
    delete period_;
  }
  period_ = nullptr;
}
ForcedPauseData::ForcedPauseData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ForcedPauseData)
}
ForcedPauseData::ForcedPauseData(const ForcedPauseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_period()) {
    period_ = new ::pulse::cdm::bind::ScalarTimeData(*from.period_);
  } else {
    period_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ForcedPauseData)
}

void ForcedPauseData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ForcedPauseData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  period_ = nullptr;
}

ForcedPauseData::~ForcedPauseData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ForcedPauseData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ForcedPauseData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete period_;
}

void ForcedPauseData::ArenaDtor(void* object) {
  ForcedPauseData* _this = reinterpret_cast< ForcedPauseData* >(object);
  (void)_this;
}
void ForcedPauseData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ForcedPauseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForcedPauseData& ForcedPauseData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForcedPauseData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void ForcedPauseData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ForcedPauseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && period_ != nullptr) {
    delete period_;
  }
  period_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForcedPauseData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarTimeData Period = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_period(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForcedPauseData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ForcedPauseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarTimeData Period = 1;
  if (this->has_period()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::period(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ForcedPauseData)
  return target;
}

size_t ForcedPauseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ForcedPauseData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarTimeData Period = 1;
  if (this->has_period()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *period_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForcedPauseData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ForcedPauseData)
  GOOGLE_DCHECK_NE(&from, this);
  const ForcedPauseData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForcedPauseData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ForcedPauseData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ForcedPauseData)
    MergeFrom(*source);
  }
}

void ForcedPauseData::MergeFrom(const ForcedPauseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ForcedPauseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_period()) {
    _internal_mutable_period()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_period());
  }
}

void ForcedPauseData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ForcedPauseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForcedPauseData::CopyFrom(const ForcedPauseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ForcedPauseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForcedPauseData::IsInitialized() const {
  return true;
}

void ForcedPauseData::InternalSwap(ForcedPauseData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(period_, other->period_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForcedPauseData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UseInhalerData::_Internal {
 public:
};

UseInhalerData::UseInhalerData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.UseInhalerData)
}
UseInhalerData::UseInhalerData(const UseInhalerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.UseInhalerData)
}

void UseInhalerData::SharedCtor() {
}

UseInhalerData::~UseInhalerData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.UseInhalerData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UseInhalerData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UseInhalerData::ArenaDtor(void* object) {
  UseInhalerData* _this = reinterpret_cast< UseInhalerData* >(object);
  (void)_this;
}
void UseInhalerData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UseInhalerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UseInhalerData& UseInhalerData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UseInhalerData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void UseInhalerData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.UseInhalerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UseInhalerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UseInhalerData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.UseInhalerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.UseInhalerData)
  return target;
}

size_t UseInhalerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.UseInhalerData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseInhalerData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.UseInhalerData)
  GOOGLE_DCHECK_NE(&from, this);
  const UseInhalerData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UseInhalerData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.UseInhalerData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.UseInhalerData)
    MergeFrom(*source);
  }
}

void UseInhalerData::MergeFrom(const UseInhalerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.UseInhalerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UseInhalerData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.UseInhalerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseInhalerData::CopyFrom(const UseInhalerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.UseInhalerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseInhalerData::IsInitialized() const {
  return true;
}

void UseInhalerData::InternalSwap(UseInhalerData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UseInhalerData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AnyConsciousRespirationCommandData::_Internal {
 public:
  static const ::pulse::cdm::bind::ForcedInhaleData& forcedinhale(const AnyConsciousRespirationCommandData* msg);
  static const ::pulse::cdm::bind::ForcedExhaleData& forcedexhale(const AnyConsciousRespirationCommandData* msg);
  static const ::pulse::cdm::bind::ForcedPauseData& forcedpause(const AnyConsciousRespirationCommandData* msg);
  static const ::pulse::cdm::bind::UseInhalerData& useinhaler(const AnyConsciousRespirationCommandData* msg);
};

const ::pulse::cdm::bind::ForcedInhaleData&
AnyConsciousRespirationCommandData::_Internal::forcedinhale(const AnyConsciousRespirationCommandData* msg) {
  return *msg->Command_.forcedinhale_;
}
const ::pulse::cdm::bind::ForcedExhaleData&
AnyConsciousRespirationCommandData::_Internal::forcedexhale(const AnyConsciousRespirationCommandData* msg) {
  return *msg->Command_.forcedexhale_;
}
const ::pulse::cdm::bind::ForcedPauseData&
AnyConsciousRespirationCommandData::_Internal::forcedpause(const AnyConsciousRespirationCommandData* msg) {
  return *msg->Command_.forcedpause_;
}
const ::pulse::cdm::bind::UseInhalerData&
AnyConsciousRespirationCommandData::_Internal::useinhaler(const AnyConsciousRespirationCommandData* msg) {
  return *msg->Command_.useinhaler_;
}
void AnyConsciousRespirationCommandData::set_allocated_forcedinhale(::pulse::cdm::bind::ForcedInhaleData* forcedinhale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Command();
  if (forcedinhale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(forcedinhale);
    if (message_arena != submessage_arena) {
      forcedinhale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forcedinhale, submessage_arena);
    }
    set_has_forcedinhale();
    Command_.forcedinhale_ = forcedinhale;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyConsciousRespirationCommandData.ForcedInhale)
}
void AnyConsciousRespirationCommandData::set_allocated_forcedexhale(::pulse::cdm::bind::ForcedExhaleData* forcedexhale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Command();
  if (forcedexhale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(forcedexhale);
    if (message_arena != submessage_arena) {
      forcedexhale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forcedexhale, submessage_arena);
    }
    set_has_forcedexhale();
    Command_.forcedexhale_ = forcedexhale;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyConsciousRespirationCommandData.ForcedExhale)
}
void AnyConsciousRespirationCommandData::set_allocated_forcedpause(::pulse::cdm::bind::ForcedPauseData* forcedpause) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Command();
  if (forcedpause) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(forcedpause);
    if (message_arena != submessage_arena) {
      forcedpause = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forcedpause, submessage_arena);
    }
    set_has_forcedpause();
    Command_.forcedpause_ = forcedpause;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyConsciousRespirationCommandData.ForcedPause)
}
void AnyConsciousRespirationCommandData::set_allocated_useinhaler(::pulse::cdm::bind::UseInhalerData* useinhaler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Command();
  if (useinhaler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(useinhaler);
    if (message_arena != submessage_arena) {
      useinhaler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, useinhaler, submessage_arena);
    }
    set_has_useinhaler();
    Command_.useinhaler_ = useinhaler;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyConsciousRespirationCommandData.UseInhaler)
}
AnyConsciousRespirationCommandData::AnyConsciousRespirationCommandData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.AnyConsciousRespirationCommandData)
}
AnyConsciousRespirationCommandData::AnyConsciousRespirationCommandData(const AnyConsciousRespirationCommandData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_comment().empty()) {
    comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_comment(), 
      GetArena());
  }
  clear_has_Command();
  switch (from.Command_case()) {
    case kForcedInhale: {
      _internal_mutable_forcedinhale()->::pulse::cdm::bind::ForcedInhaleData::MergeFrom(from._internal_forcedinhale());
      break;
    }
    case kForcedExhale: {
      _internal_mutable_forcedexhale()->::pulse::cdm::bind::ForcedExhaleData::MergeFrom(from._internal_forcedexhale());
      break;
    }
    case kForcedPause: {
      _internal_mutable_forcedpause()->::pulse::cdm::bind::ForcedPauseData::MergeFrom(from._internal_forcedpause());
      break;
    }
    case kUseInhaler: {
      _internal_mutable_useinhaler()->::pulse::cdm::bind::UseInhalerData::MergeFrom(from._internal_useinhaler());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnyConsciousRespirationCommandData)
}

void AnyConsciousRespirationCommandData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyConsciousRespirationCommandData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_Command();
}

AnyConsciousRespirationCommandData::~AnyConsciousRespirationCommandData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnyConsciousRespirationCommandData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnyConsciousRespirationCommandData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_Command()) {
    clear_Command();
  }
}

void AnyConsciousRespirationCommandData::ArenaDtor(void* object) {
  AnyConsciousRespirationCommandData* _this = reinterpret_cast< AnyConsciousRespirationCommandData* >(object);
  (void)_this;
}
void AnyConsciousRespirationCommandData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyConsciousRespirationCommandData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnyConsciousRespirationCommandData& AnyConsciousRespirationCommandData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyConsciousRespirationCommandData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void AnyConsciousRespirationCommandData::clear_Command() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.AnyConsciousRespirationCommandData)
  switch (Command_case()) {
    case kForcedInhale: {
      if (GetArena() == nullptr) {
        delete Command_.forcedinhale_;
      }
      break;
    }
    case kForcedExhale: {
      if (GetArena() == nullptr) {
        delete Command_.forcedexhale_;
      }
      break;
    }
    case kForcedPause: {
      if (GetArena() == nullptr) {
        delete Command_.forcedpause_;
      }
      break;
    }
    case kUseInhaler: {
      if (GetArena() == nullptr) {
        delete Command_.useinhaler_;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void AnyConsciousRespirationCommandData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnyConsciousRespirationCommandData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comment_.ClearToEmpty();
  clear_Command();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnyConsciousRespirationCommandData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Comment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.AnyConsciousRespirationCommandData.Comment"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ForcedInhaleData ForcedInhale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_forcedinhale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ForcedExhaleData ForcedExhale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_forcedexhale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ForcedPauseData ForcedPause = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_forcedpause(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.UseInhalerData UseInhaler = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_useinhaler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyConsciousRespirationCommandData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnyConsciousRespirationCommandData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Comment = 1;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.AnyConsciousRespirationCommandData.Comment");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_comment(), target);
  }

  // .pulse.cdm.bind.ForcedInhaleData ForcedInhale = 2;
  if (_internal_has_forcedinhale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::forcedinhale(this), target, stream);
  }

  // .pulse.cdm.bind.ForcedExhaleData ForcedExhale = 3;
  if (_internal_has_forcedexhale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::forcedexhale(this), target, stream);
  }

  // .pulse.cdm.bind.ForcedPauseData ForcedPause = 4;
  if (_internal_has_forcedpause()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::forcedpause(this), target, stream);
  }

  // .pulse.cdm.bind.UseInhalerData UseInhaler = 5;
  if (_internal_has_useinhaler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::useinhaler(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnyConsciousRespirationCommandData)
  return target;
}

size_t AnyConsciousRespirationCommandData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnyConsciousRespirationCommandData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Comment = 1;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  switch (Command_case()) {
    // .pulse.cdm.bind.ForcedInhaleData ForcedInhale = 2;
    case kForcedInhale: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.forcedinhale_);
      break;
    }
    // .pulse.cdm.bind.ForcedExhaleData ForcedExhale = 3;
    case kForcedExhale: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.forcedexhale_);
      break;
    }
    // .pulse.cdm.bind.ForcedPauseData ForcedPause = 4;
    case kForcedPause: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.forcedpause_);
      break;
    }
    // .pulse.cdm.bind.UseInhalerData UseInhaler = 5;
    case kUseInhaler: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.useinhaler_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyConsciousRespirationCommandData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnyConsciousRespirationCommandData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnyConsciousRespirationCommandData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnyConsciousRespirationCommandData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnyConsciousRespirationCommandData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnyConsciousRespirationCommandData)
    MergeFrom(*source);
  }
}

void AnyConsciousRespirationCommandData::MergeFrom(const AnyConsciousRespirationCommandData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnyConsciousRespirationCommandData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.comment().size() > 0) {
    _internal_set_comment(from._internal_comment());
  }
  switch (from.Command_case()) {
    case kForcedInhale: {
      _internal_mutable_forcedinhale()->::pulse::cdm::bind::ForcedInhaleData::MergeFrom(from._internal_forcedinhale());
      break;
    }
    case kForcedExhale: {
      _internal_mutable_forcedexhale()->::pulse::cdm::bind::ForcedExhaleData::MergeFrom(from._internal_forcedexhale());
      break;
    }
    case kForcedPause: {
      _internal_mutable_forcedpause()->::pulse::cdm::bind::ForcedPauseData::MergeFrom(from._internal_forcedpause());
      break;
    }
    case kUseInhaler: {
      _internal_mutable_useinhaler()->::pulse::cdm::bind::UseInhalerData::MergeFrom(from._internal_useinhaler());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
}

void AnyConsciousRespirationCommandData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnyConsciousRespirationCommandData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyConsciousRespirationCommandData::CopyFrom(const AnyConsciousRespirationCommandData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnyConsciousRespirationCommandData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyConsciousRespirationCommandData::IsInitialized() const {
  return true;
}

void AnyConsciousRespirationCommandData::InternalSwap(AnyConsciousRespirationCommandData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(Command_, other->Command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyConsciousRespirationCommandData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConsciousRespirationData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const ConsciousRespirationData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
ConsciousRespirationData::_Internal::patientaction(const ConsciousRespirationData* msg) {
  return *msg->patientaction_;
}
ConsciousRespirationData::ConsciousRespirationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  command_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ConsciousRespirationData)
}
ConsciousRespirationData::ConsciousRespirationData(const ConsciousRespirationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      command_(from.command_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  startimmediately_ = from.startimmediately_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ConsciousRespirationData)
}

void ConsciousRespirationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsciousRespirationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&startimmediately_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(startimmediately_));
}

ConsciousRespirationData::~ConsciousRespirationData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ConsciousRespirationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConsciousRespirationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
}

void ConsciousRespirationData::ArenaDtor(void* object) {
  ConsciousRespirationData* _this = reinterpret_cast< ConsciousRespirationData* >(object);
  (void)_this;
}
void ConsciousRespirationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConsciousRespirationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsciousRespirationData& ConsciousRespirationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsciousRespirationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void ConsciousRespirationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ConsciousRespirationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_.Clear();
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  startimmediately_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsciousRespirationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool StartImmediately = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          startimmediately_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.AnyConsciousRespirationCommandData Command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_command(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsciousRespirationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ConsciousRespirationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // bool StartImmediately = 2;
  if (this->startimmediately() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_startimmediately(), target);
  }

  // repeated .pulse.cdm.bind.AnyConsciousRespirationCommandData Command = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_command_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_command(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ConsciousRespirationData)
  return target;
}

size_t ConsciousRespirationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ConsciousRespirationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.AnyConsciousRespirationCommandData Command = 3;
  total_size += 1UL * this->_internal_command_size();
  for (const auto& msg : this->command_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // bool StartImmediately = 2;
  if (this->startimmediately() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsciousRespirationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ConsciousRespirationData)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsciousRespirationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsciousRespirationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ConsciousRespirationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ConsciousRespirationData)
    MergeFrom(*source);
  }
}

void ConsciousRespirationData::MergeFrom(const ConsciousRespirationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ConsciousRespirationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  command_.MergeFrom(from.command_);
  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.startimmediately() != 0) {
    _internal_set_startimmediately(from._internal_startimmediately());
  }
}

void ConsciousRespirationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ConsciousRespirationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsciousRespirationData::CopyFrom(const ConsciousRespirationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ConsciousRespirationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsciousRespirationData::IsInitialized() const {
  return true;
}

void ConsciousRespirationData::InternalSwap(ConsciousRespirationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  command_.InternalSwap(&other->command_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConsciousRespirationData, startimmediately_)
      + sizeof(ConsciousRespirationData::startimmediately_)
      - PROTOBUF_FIELD_OFFSET(ConsciousRespirationData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsciousRespirationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConsumeNutrientsData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const ConsumeNutrientsData* msg);
  static const ::pulse::cdm::bind::NutritionData& nutrition(const ConsumeNutrientsData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
ConsumeNutrientsData::_Internal::patientaction(const ConsumeNutrientsData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::NutritionData&
ConsumeNutrientsData::_Internal::nutrition(const ConsumeNutrientsData* msg) {
  return *msg->Option_.nutrition_;
}
void ConsumeNutrientsData::set_allocated_nutrition(::pulse::cdm::bind::NutritionData* nutrition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Option();
  if (nutrition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nutrition)->GetArena();
    if (message_arena != submessage_arena) {
      nutrition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nutrition, submessage_arena);
    }
    set_has_nutrition();
    Option_.nutrition_ = nutrition;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ConsumeNutrientsData.Nutrition)
}
void ConsumeNutrientsData::clear_nutrition() {
  if (_internal_has_nutrition()) {
    if (GetArena() == nullptr) {
      delete Option_.nutrition_;
    }
    clear_has_Option();
  }
}
ConsumeNutrientsData::ConsumeNutrientsData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ConsumeNutrientsData)
}
ConsumeNutrientsData::ConsumeNutrientsData(const ConsumeNutrientsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  clear_has_Option();
  switch (from.Option_case()) {
    case kNutrition: {
      _internal_mutable_nutrition()->::pulse::cdm::bind::NutritionData::MergeFrom(from._internal_nutrition());
      break;
    }
    case kNutritionFile: {
      _internal_set_nutritionfile(from._internal_nutritionfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ConsumeNutrientsData)
}

void ConsumeNutrientsData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsumeNutrientsData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  patientaction_ = nullptr;
  clear_has_Option();
}

ConsumeNutrientsData::~ConsumeNutrientsData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ConsumeNutrientsData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConsumeNutrientsData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
  if (has_Option()) {
    clear_Option();
  }
}

void ConsumeNutrientsData::ArenaDtor(void* object) {
  ConsumeNutrientsData* _this = reinterpret_cast< ConsumeNutrientsData* >(object);
  (void)_this;
}
void ConsumeNutrientsData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConsumeNutrientsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsumeNutrientsData& ConsumeNutrientsData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsumeNutrientsData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void ConsumeNutrientsData::clear_Option() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.ConsumeNutrientsData)
  switch (Option_case()) {
    case kNutrition: {
      if (GetArena() == nullptr) {
        delete Option_.nutrition_;
      }
      break;
    }
    case kNutritionFile: {
      Option_.nutritionfile_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTION_NOT_SET;
}


void ConsumeNutrientsData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ConsumeNutrientsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  clear_Option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsumeNutrientsData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.NutritionData Nutrition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nutrition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string NutritionFile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nutritionfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.ConsumeNutrientsData.NutritionFile"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsumeNutrientsData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ConsumeNutrientsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.NutritionData Nutrition = 2;
  if (_internal_has_nutrition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nutrition(this), target, stream);
  }

  // string NutritionFile = 3;
  if (_internal_has_nutritionfile()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nutritionfile().data(), static_cast<int>(this->_internal_nutritionfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.ConsumeNutrientsData.NutritionFile");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nutritionfile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ConsumeNutrientsData)
  return target;
}

size_t ConsumeNutrientsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ConsumeNutrientsData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  switch (Option_case()) {
    // .pulse.cdm.bind.NutritionData Nutrition = 2;
    case kNutrition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Option_.nutrition_);
      break;
    }
    // string NutritionFile = 3;
    case kNutritionFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nutritionfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsumeNutrientsData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ConsumeNutrientsData)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsumeNutrientsData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsumeNutrientsData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ConsumeNutrientsData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ConsumeNutrientsData)
    MergeFrom(*source);
  }
}

void ConsumeNutrientsData::MergeFrom(const ConsumeNutrientsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ConsumeNutrientsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  switch (from.Option_case()) {
    case kNutrition: {
      _internal_mutable_nutrition()->::pulse::cdm::bind::NutritionData::MergeFrom(from._internal_nutrition());
      break;
    }
    case kNutritionFile: {
      _internal_set_nutritionfile(from._internal_nutritionfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
}

void ConsumeNutrientsData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ConsumeNutrientsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsumeNutrientsData::CopyFrom(const ConsumeNutrientsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ConsumeNutrientsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsumeNutrientsData::IsInitialized() const {
  return true;
}

void ConsumeNutrientsData::InternalSwap(ConsumeNutrientsData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(patientaction_, other->patientaction_);
  swap(Option_, other->Option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsumeNutrientsData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExerciseData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const ExerciseData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& intensity(const ExerciseData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
ExerciseData::_Internal::patientaction(const ExerciseData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
ExerciseData::_Internal::intensity(const ExerciseData* msg) {
  return *msg->intensity_;
}
void ExerciseData::clear_intensity() {
  if (GetArena() == nullptr && intensity_ != nullptr) {
    delete intensity_;
  }
  intensity_ = nullptr;
}
ExerciseData::ExerciseData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ExerciseData)
}
ExerciseData::ExerciseData(const ExerciseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  if (from._internal_has_intensity()) {
    intensity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.intensity_);
  } else {
    intensity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ExerciseData)
}

void ExerciseData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExerciseData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&intensity_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(intensity_));
}

ExerciseData::~ExerciseData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ExerciseData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExerciseData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
  if (this != internal_default_instance()) delete intensity_;
}

void ExerciseData::ArenaDtor(void* object) {
  ExerciseData* _this = reinterpret_cast< ExerciseData* >(object);
  (void)_this;
}
void ExerciseData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExerciseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExerciseData& ExerciseData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExerciseData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void ExerciseData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ExerciseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  if (GetArena() == nullptr && intensity_ != nullptr) {
    delete intensity_;
  }
  intensity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExerciseData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Intensity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_intensity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExerciseData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ExerciseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Intensity = 2;
  if (this->has_intensity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::intensity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ExerciseData)
  return target;
}

size_t ExerciseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ExerciseData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Intensity = 2;
  if (this->has_intensity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intensity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExerciseData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ExerciseData)
  GOOGLE_DCHECK_NE(&from, this);
  const ExerciseData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExerciseData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ExerciseData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ExerciseData)
    MergeFrom(*source);
  }
}

void ExerciseData::MergeFrom(const ExerciseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ExerciseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.has_intensity()) {
    _internal_mutable_intensity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_intensity());
  }
}

void ExerciseData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ExerciseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExerciseData::CopyFrom(const ExerciseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ExerciseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExerciseData::IsInitialized() const {
  return true;
}

void ExerciseData::InternalSwap(ExerciseData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExerciseData, intensity_)
      + sizeof(ExerciseData::intensity_)
      - PROTOBUF_FIELD_OFFSET(ExerciseData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExerciseData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HemorrhageData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const HemorrhageData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& flowrate(const HemorrhageData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const HemorrhageData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& totalbloodlost(const HemorrhageData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
HemorrhageData::_Internal::patientaction(const HemorrhageData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
HemorrhageData::_Internal::flowrate(const HemorrhageData* msg) {
  return *msg->flowrate_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
HemorrhageData::_Internal::severity(const HemorrhageData* msg) {
  return *msg->severity_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
HemorrhageData::_Internal::totalbloodlost(const HemorrhageData* msg) {
  return *msg->totalbloodlost_;
}
void HemorrhageData::clear_flowrate() {
  if (GetArena() == nullptr && flowrate_ != nullptr) {
    delete flowrate_;
  }
  flowrate_ = nullptr;
}
void HemorrhageData::clear_severity() {
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
void HemorrhageData::clear_totalbloodlost() {
  if (GetArena() == nullptr && totalbloodlost_ != nullptr) {
    delete totalbloodlost_;
  }
  totalbloodlost_ = nullptr;
}
HemorrhageData::HemorrhageData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.HemorrhageData)
}
HemorrhageData::HemorrhageData(const HemorrhageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  compartment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_compartment().empty()) {
    compartment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_compartment(), 
      GetArena());
  }
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  if (from._internal_has_flowrate()) {
    flowrate_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.flowrate_);
  } else {
    flowrate_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  if (from._internal_has_totalbloodlost()) {
    totalbloodlost_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.totalbloodlost_);
  } else {
    totalbloodlost_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.HemorrhageData)
}

void HemorrhageData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HemorrhageData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  compartment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(type_));
}

HemorrhageData::~HemorrhageData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.HemorrhageData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HemorrhageData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  compartment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete patientaction_;
  if (this != internal_default_instance()) delete flowrate_;
  if (this != internal_default_instance()) delete severity_;
  if (this != internal_default_instance()) delete totalbloodlost_;
}

void HemorrhageData::ArenaDtor(void* object) {
  HemorrhageData* _this = reinterpret_cast< HemorrhageData* >(object);
  (void)_this;
}
void HemorrhageData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HemorrhageData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HemorrhageData& HemorrhageData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HemorrhageData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void HemorrhageData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.HemorrhageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compartment_.ClearToEmpty();
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  if (GetArena() == nullptr && flowrate_ != nullptr) {
    delete flowrate_;
  }
  flowrate_ = nullptr;
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  if (GetArena() == nullptr && totalbloodlost_ != nullptr) {
    delete totalbloodlost_;
  }
  totalbloodlost_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HemorrhageData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.HemorrhageData.eType Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::pulse::cdm::bind::HemorrhageData_eType>(val));
        } else goto handle_unusual;
        continue;
      // string Compartment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_compartment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.HemorrhageData.Compartment"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData FlowRate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_flowrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData TotalBloodLost = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_totalbloodlost(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HemorrhageData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.HemorrhageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.HemorrhageData.eType Type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string Compartment = 3;
  if (this->compartment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_compartment().data(), static_cast<int>(this->_internal_compartment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.HemorrhageData.Compartment");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_compartment(), target);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData FlowRate = 4;
  if (this->has_flowrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::flowrate(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 5;
  if (this->has_severity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::severity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData TotalBloodLost = 6;
  if (this->has_totalbloodlost()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::totalbloodlost(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.HemorrhageData)
  return target;
}

size_t HemorrhageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.HemorrhageData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Compartment = 3;
  if (this->compartment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_compartment());
  }

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData FlowRate = 4;
  if (this->has_flowrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flowrate_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 5;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  // .pulse.cdm.bind.ScalarVolumeData TotalBloodLost = 6;
  if (this->has_totalbloodlost()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totalbloodlost_);
  }

  // .pulse.cdm.bind.HemorrhageData.eType Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HemorrhageData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.HemorrhageData)
  GOOGLE_DCHECK_NE(&from, this);
  const HemorrhageData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HemorrhageData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.HemorrhageData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.HemorrhageData)
    MergeFrom(*source);
  }
}

void HemorrhageData::MergeFrom(const HemorrhageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.HemorrhageData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.compartment().size() > 0) {
    _internal_set_compartment(from._internal_compartment());
  }
  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.has_flowrate()) {
    _internal_mutable_flowrate()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_flowrate());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
  if (from.has_totalbloodlost()) {
    _internal_mutable_totalbloodlost()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_totalbloodlost());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void HemorrhageData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.HemorrhageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HemorrhageData::CopyFrom(const HemorrhageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.HemorrhageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HemorrhageData::IsInitialized() const {
  return true;
}

void HemorrhageData::InternalSwap(HemorrhageData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  compartment_.Swap(&other->compartment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HemorrhageData, type_)
      + sizeof(HemorrhageData::type_)
      - PROTOBUF_FIELD_OFFSET(HemorrhageData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HemorrhageData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ImpairedAlveolarExchangeExacerbationData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const ImpairedAlveolarExchangeExacerbationData* msg);
  static const ::pulse::cdm::bind::ScalarAreaData& impairedsurfacearea(const ImpairedAlveolarExchangeExacerbationData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& impairedfraction(const ImpairedAlveolarExchangeExacerbationData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const ImpairedAlveolarExchangeExacerbationData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
ImpairedAlveolarExchangeExacerbationData::_Internal::patientaction(const ImpairedAlveolarExchangeExacerbationData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::ScalarAreaData&
ImpairedAlveolarExchangeExacerbationData::_Internal::impairedsurfacearea(const ImpairedAlveolarExchangeExacerbationData* msg) {
  return *msg->Value_.impairedsurfacearea_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
ImpairedAlveolarExchangeExacerbationData::_Internal::impairedfraction(const ImpairedAlveolarExchangeExacerbationData* msg) {
  return *msg->Value_.impairedfraction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
ImpairedAlveolarExchangeExacerbationData::_Internal::severity(const ImpairedAlveolarExchangeExacerbationData* msg) {
  return *msg->Value_.severity_;
}
void ImpairedAlveolarExchangeExacerbationData::set_allocated_impairedsurfacearea(::pulse::cdm::bind::ScalarAreaData* impairedsurfacearea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Value();
  if (impairedsurfacearea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(impairedsurfacearea)->GetArena();
    if (message_arena != submessage_arena) {
      impairedsurfacearea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, impairedsurfacearea, submessage_arena);
    }
    set_has_impairedsurfacearea();
    Value_.impairedsurfacearea_ = impairedsurfacearea;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData.ImpairedSurfaceArea)
}
void ImpairedAlveolarExchangeExacerbationData::clear_impairedsurfacearea() {
  if (_internal_has_impairedsurfacearea()) {
    if (GetArena() == nullptr) {
      delete Value_.impairedsurfacearea_;
    }
    clear_has_Value();
  }
}
void ImpairedAlveolarExchangeExacerbationData::set_allocated_impairedfraction(::pulse::cdm::bind::Scalar0To1Data* impairedfraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Value();
  if (impairedfraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(impairedfraction)->GetArena();
    if (message_arena != submessage_arena) {
      impairedfraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, impairedfraction, submessage_arena);
    }
    set_has_impairedfraction();
    Value_.impairedfraction_ = impairedfraction;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData.ImpairedFraction)
}
void ImpairedAlveolarExchangeExacerbationData::clear_impairedfraction() {
  if (_internal_has_impairedfraction()) {
    if (GetArena() == nullptr) {
      delete Value_.impairedfraction_;
    }
    clear_has_Value();
  }
}
void ImpairedAlveolarExchangeExacerbationData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Value();
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    set_has_severity();
    Value_.severity_ = severity;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData.Severity)
}
void ImpairedAlveolarExchangeExacerbationData::clear_severity() {
  if (_internal_has_severity()) {
    if (GetArena() == nullptr) {
      delete Value_.severity_;
    }
    clear_has_Value();
  }
}
ImpairedAlveolarExchangeExacerbationData::ImpairedAlveolarExchangeExacerbationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData)
}
ImpairedAlveolarExchangeExacerbationData::ImpairedAlveolarExchangeExacerbationData(const ImpairedAlveolarExchangeExacerbationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  clear_has_Value();
  switch (from.Value_case()) {
    case kImpairedSurfaceArea: {
      _internal_mutable_impairedsurfacearea()->::pulse::cdm::bind::ScalarAreaData::MergeFrom(from._internal_impairedsurfacearea());
      break;
    }
    case kImpairedFraction: {
      _internal_mutable_impairedfraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_impairedfraction());
      break;
    }
    case kSeverity: {
      _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData)
}

void ImpairedAlveolarExchangeExacerbationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImpairedAlveolarExchangeExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  patientaction_ = nullptr;
  clear_has_Value();
}

ImpairedAlveolarExchangeExacerbationData::~ImpairedAlveolarExchangeExacerbationData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImpairedAlveolarExchangeExacerbationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
  if (has_Value()) {
    clear_Value();
  }
}

void ImpairedAlveolarExchangeExacerbationData::ArenaDtor(void* object) {
  ImpairedAlveolarExchangeExacerbationData* _this = reinterpret_cast< ImpairedAlveolarExchangeExacerbationData* >(object);
  (void)_this;
}
void ImpairedAlveolarExchangeExacerbationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImpairedAlveolarExchangeExacerbationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImpairedAlveolarExchangeExacerbationData& ImpairedAlveolarExchangeExacerbationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImpairedAlveolarExchangeExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void ImpairedAlveolarExchangeExacerbationData::clear_Value() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData)
  switch (Value_case()) {
    case kImpairedSurfaceArea: {
      if (GetArena() == nullptr) {
        delete Value_.impairedsurfacearea_;
      }
      break;
    }
    case kImpairedFraction: {
      if (GetArena() == nullptr) {
        delete Value_.impairedfraction_;
      }
      break;
    }
    case kSeverity: {
      if (GetArena() == nullptr) {
        delete Value_.severity_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void ImpairedAlveolarExchangeExacerbationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  clear_Value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImpairedAlveolarExchangeExacerbationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAreaData ImpairedSurfaceArea = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_impairedsurfacearea(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data ImpairedFraction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_impairedfraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImpairedAlveolarExchangeExacerbationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAreaData ImpairedSurfaceArea = 2;
  if (_internal_has_impairedsurfacearea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::impairedsurfacearea(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data ImpairedFraction = 3;
  if (_internal_has_impairedfraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::impairedfraction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 4;
  if (_internal_has_severity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData)
  return target;
}

size_t ImpairedAlveolarExchangeExacerbationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  switch (Value_case()) {
    // .pulse.cdm.bind.ScalarAreaData ImpairedSurfaceArea = 2;
    case kImpairedSurfaceArea: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Value_.impairedsurfacearea_);
      break;
    }
    // .pulse.cdm.bind.Scalar0To1Data ImpairedFraction = 3;
    case kImpairedFraction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Value_.impairedfraction_);
      break;
    }
    // .pulse.cdm.bind.Scalar0To1Data Severity = 4;
    case kSeverity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Value_.severity_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImpairedAlveolarExchangeExacerbationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData)
  GOOGLE_DCHECK_NE(&from, this);
  const ImpairedAlveolarExchangeExacerbationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImpairedAlveolarExchangeExacerbationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData)
    MergeFrom(*source);
  }
}

void ImpairedAlveolarExchangeExacerbationData::MergeFrom(const ImpairedAlveolarExchangeExacerbationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  switch (from.Value_case()) {
    case kImpairedSurfaceArea: {
      _internal_mutable_impairedsurfacearea()->::pulse::cdm::bind::ScalarAreaData::MergeFrom(from._internal_impairedsurfacearea());
      break;
    }
    case kImpairedFraction: {
      _internal_mutable_impairedfraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_impairedfraction());
      break;
    }
    case kSeverity: {
      _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void ImpairedAlveolarExchangeExacerbationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImpairedAlveolarExchangeExacerbationData::CopyFrom(const ImpairedAlveolarExchangeExacerbationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImpairedAlveolarExchangeExacerbationData::IsInitialized() const {
  return true;
}

void ImpairedAlveolarExchangeExacerbationData::InternalSwap(ImpairedAlveolarExchangeExacerbationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(patientaction_, other->patientaction_);
  swap(Value_, other->Value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImpairedAlveolarExchangeExacerbationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IntubationData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const IntubationData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
IntubationData::_Internal::patientaction(const IntubationData* msg) {
  return *msg->patientaction_;
}
IntubationData::IntubationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.IntubationData)
}
IntubationData::IntubationData(const IntubationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.IntubationData)
}

void IntubationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntubationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(type_));
}

IntubationData::~IntubationData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.IntubationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntubationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
}

void IntubationData::ArenaDtor(void* object) {
  IntubationData* _this = reinterpret_cast< IntubationData* >(object);
  (void)_this;
}
void IntubationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntubationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntubationData& IntubationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntubationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void IntubationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.IntubationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntubationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.IntubationData.eType Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::pulse::cdm::bind::IntubationData_eType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntubationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.IntubationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.IntubationData.eType Type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.IntubationData)
  return target;
}

size_t IntubationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.IntubationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.IntubationData.eType Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntubationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.IntubationData)
  GOOGLE_DCHECK_NE(&from, this);
  const IntubationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntubationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.IntubationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.IntubationData)
    MergeFrom(*source);
  }
}

void IntubationData::MergeFrom(const IntubationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.IntubationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void IntubationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.IntubationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntubationData::CopyFrom(const IntubationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.IntubationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntubationData::IsInitialized() const {
  return true;
}

void IntubationData::InternalSwap(IntubationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntubationData, type_)
      + sizeof(IntubationData::type_)
      - PROTOBUF_FIELD_OFFSET(IntubationData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntubationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LobarPneumoniaExacerbationData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const LobarPneumoniaExacerbationData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const LobarPneumoniaExacerbationData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& leftlungaffected(const LobarPneumoniaExacerbationData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& rightlungaffected(const LobarPneumoniaExacerbationData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
LobarPneumoniaExacerbationData::_Internal::patientaction(const LobarPneumoniaExacerbationData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
LobarPneumoniaExacerbationData::_Internal::severity(const LobarPneumoniaExacerbationData* msg) {
  return *msg->severity_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
LobarPneumoniaExacerbationData::_Internal::leftlungaffected(const LobarPneumoniaExacerbationData* msg) {
  return *msg->leftlungaffected_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
LobarPneumoniaExacerbationData::_Internal::rightlungaffected(const LobarPneumoniaExacerbationData* msg) {
  return *msg->rightlungaffected_;
}
void LobarPneumoniaExacerbationData::clear_severity() {
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
void LobarPneumoniaExacerbationData::clear_leftlungaffected() {
  if (GetArena() == nullptr && leftlungaffected_ != nullptr) {
    delete leftlungaffected_;
  }
  leftlungaffected_ = nullptr;
}
void LobarPneumoniaExacerbationData::clear_rightlungaffected() {
  if (GetArena() == nullptr && rightlungaffected_ != nullptr) {
    delete rightlungaffected_;
  }
  rightlungaffected_ = nullptr;
}
LobarPneumoniaExacerbationData::LobarPneumoniaExacerbationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.LobarPneumoniaExacerbationData)
}
LobarPneumoniaExacerbationData::LobarPneumoniaExacerbationData(const LobarPneumoniaExacerbationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  if (from._internal_has_leftlungaffected()) {
    leftlungaffected_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.leftlungaffected_);
  } else {
    leftlungaffected_ = nullptr;
  }
  if (from._internal_has_rightlungaffected()) {
    rightlungaffected_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.rightlungaffected_);
  } else {
    rightlungaffected_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.LobarPneumoniaExacerbationData)
}

void LobarPneumoniaExacerbationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LobarPneumoniaExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rightlungaffected_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(rightlungaffected_));
}

LobarPneumoniaExacerbationData::~LobarPneumoniaExacerbationData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.LobarPneumoniaExacerbationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LobarPneumoniaExacerbationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
  if (this != internal_default_instance()) delete severity_;
  if (this != internal_default_instance()) delete leftlungaffected_;
  if (this != internal_default_instance()) delete rightlungaffected_;
}

void LobarPneumoniaExacerbationData::ArenaDtor(void* object) {
  LobarPneumoniaExacerbationData* _this = reinterpret_cast< LobarPneumoniaExacerbationData* >(object);
  (void)_this;
}
void LobarPneumoniaExacerbationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LobarPneumoniaExacerbationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LobarPneumoniaExacerbationData& LobarPneumoniaExacerbationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LobarPneumoniaExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void LobarPneumoniaExacerbationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.LobarPneumoniaExacerbationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  if (GetArena() == nullptr && leftlungaffected_ != nullptr) {
    delete leftlungaffected_;
  }
  leftlungaffected_ = nullptr;
  if (GetArena() == nullptr && rightlungaffected_ != nullptr) {
    delete rightlungaffected_;
  }
  rightlungaffected_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LobarPneumoniaExacerbationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data LeftLungAffected = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftlungaffected(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data RightLungAffected = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightlungaffected(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LobarPneumoniaExacerbationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.LobarPneumoniaExacerbationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::severity(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data LeftLungAffected = 3;
  if (this->has_leftlungaffected()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::leftlungaffected(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data RightLungAffected = 4;
  if (this->has_rightlungaffected()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rightlungaffected(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.LobarPneumoniaExacerbationData)
  return target;
}

size_t LobarPneumoniaExacerbationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.LobarPneumoniaExacerbationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  // .pulse.cdm.bind.Scalar0To1Data LeftLungAffected = 3;
  if (this->has_leftlungaffected()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftlungaffected_);
  }

  // .pulse.cdm.bind.Scalar0To1Data RightLungAffected = 4;
  if (this->has_rightlungaffected()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightlungaffected_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LobarPneumoniaExacerbationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.LobarPneumoniaExacerbationData)
  GOOGLE_DCHECK_NE(&from, this);
  const LobarPneumoniaExacerbationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LobarPneumoniaExacerbationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.LobarPneumoniaExacerbationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.LobarPneumoniaExacerbationData)
    MergeFrom(*source);
  }
}

void LobarPneumoniaExacerbationData::MergeFrom(const LobarPneumoniaExacerbationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.LobarPneumoniaExacerbationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
  if (from.has_leftlungaffected()) {
    _internal_mutable_leftlungaffected()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_leftlungaffected());
  }
  if (from.has_rightlungaffected()) {
    _internal_mutable_rightlungaffected()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_rightlungaffected());
  }
}

void LobarPneumoniaExacerbationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.LobarPneumoniaExacerbationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LobarPneumoniaExacerbationData::CopyFrom(const LobarPneumoniaExacerbationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.LobarPneumoniaExacerbationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobarPneumoniaExacerbationData::IsInitialized() const {
  return true;
}

void LobarPneumoniaExacerbationData::InternalSwap(LobarPneumoniaExacerbationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LobarPneumoniaExacerbationData, rightlungaffected_)
      + sizeof(LobarPneumoniaExacerbationData::rightlungaffected_)
      - PROTOBUF_FIELD_OFFSET(LobarPneumoniaExacerbationData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LobarPneumoniaExacerbationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MechanicalVentilationData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const MechanicalVentilationData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& flow(const MechanicalVentilationData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& pressure(const MechanicalVentilationData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
MechanicalVentilationData::_Internal::patientaction(const MechanicalVentilationData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
MechanicalVentilationData::_Internal::flow(const MechanicalVentilationData* msg) {
  return *msg->flow_;
}
const ::pulse::cdm::bind::ScalarPressureData&
MechanicalVentilationData::_Internal::pressure(const MechanicalVentilationData* msg) {
  return *msg->pressure_;
}
void MechanicalVentilationData::clear_flow() {
  if (GetArena() == nullptr && flow_ != nullptr) {
    delete flow_;
  }
  flow_ = nullptr;
}
void MechanicalVentilationData::clear_pressure() {
  if (GetArena() == nullptr && pressure_ != nullptr) {
    delete pressure_;
  }
  pressure_ = nullptr;
}
void MechanicalVentilationData::clear_gasfraction() {
  gasfraction_.Clear();
}
void MechanicalVentilationData::clear_aerosol() {
  aerosol_.Clear();
}
MechanicalVentilationData::MechanicalVentilationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gasfraction_(arena),
  aerosol_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.MechanicalVentilationData)
}
MechanicalVentilationData::MechanicalVentilationData(const MechanicalVentilationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gasfraction_(from.gasfraction_),
      aerosol_(from.aerosol_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  if (from._internal_has_flow()) {
    flow_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.flow_);
  } else {
    flow_ = nullptr;
  }
  if (from._internal_has_pressure()) {
    pressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.pressure_);
  } else {
    pressure_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.MechanicalVentilationData)
}

void MechanicalVentilationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MechanicalVentilationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(state_));
}

MechanicalVentilationData::~MechanicalVentilationData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.MechanicalVentilationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MechanicalVentilationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
  if (this != internal_default_instance()) delete flow_;
  if (this != internal_default_instance()) delete pressure_;
}

void MechanicalVentilationData::ArenaDtor(void* object) {
  MechanicalVentilationData* _this = reinterpret_cast< MechanicalVentilationData* >(object);
  (void)_this;
}
void MechanicalVentilationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MechanicalVentilationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MechanicalVentilationData& MechanicalVentilationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MechanicalVentilationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void MechanicalVentilationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.MechanicalVentilationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gasfraction_.Clear();
  aerosol_.Clear();
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  if (GetArena() == nullptr && flow_ != nullptr) {
    delete flow_;
  }
  flow_ = nullptr;
  if (GetArena() == nullptr && pressure_ != nullptr) {
    delete pressure_;
  }
  pressure_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MechanicalVentilationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eSwitch State = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData Flow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_flow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData Pressure = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.SubstanceFractionData GasFraction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gasfraction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.SubstanceConcentrationData Aerosol = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aerosol(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MechanicalVentilationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.MechanicalVentilationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.eSwitch State = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData Flow = 3;
  if (this->has_flow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::flow(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData Pressure = 4;
  if (this->has_pressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pressure(this), target, stream);
  }

  // repeated .pulse.cdm.bind.SubstanceFractionData GasFraction = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gasfraction_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_gasfraction(i), target, stream);
  }

  // repeated .pulse.cdm.bind.SubstanceConcentrationData Aerosol = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_aerosol_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_aerosol(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.MechanicalVentilationData)
  return target;
}

size_t MechanicalVentilationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.MechanicalVentilationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.SubstanceFractionData GasFraction = 5;
  total_size += 1UL * this->_internal_gasfraction_size();
  for (const auto& msg : this->gasfraction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pulse.cdm.bind.SubstanceConcentrationData Aerosol = 6;
  total_size += 1UL * this->_internal_aerosol_size();
  for (const auto& msg : this->aerosol_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData Flow = 3;
  if (this->has_flow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flow_);
  }

  // .pulse.cdm.bind.ScalarPressureData Pressure = 4;
  if (this->has_pressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pressure_);
  }

  // .pulse.cdm.bind.eSwitch State = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MechanicalVentilationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.MechanicalVentilationData)
  GOOGLE_DCHECK_NE(&from, this);
  const MechanicalVentilationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MechanicalVentilationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.MechanicalVentilationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.MechanicalVentilationData)
    MergeFrom(*source);
  }
}

void MechanicalVentilationData::MergeFrom(const MechanicalVentilationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.MechanicalVentilationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gasfraction_.MergeFrom(from.gasfraction_);
  aerosol_.MergeFrom(from.aerosol_);
  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.has_flow()) {
    _internal_mutable_flow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_flow());
  }
  if (from.has_pressure()) {
    _internal_mutable_pressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_pressure());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void MechanicalVentilationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.MechanicalVentilationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MechanicalVentilationData::CopyFrom(const MechanicalVentilationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.MechanicalVentilationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MechanicalVentilationData::IsInitialized() const {
  return true;
}

void MechanicalVentilationData::InternalSwap(MechanicalVentilationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gasfraction_.InternalSwap(&other->gasfraction_);
  aerosol_.InternalSwap(&other->aerosol_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MechanicalVentilationData, state_)
      + sizeof(MechanicalVentilationData::state_)
      - PROTOBUF_FIELD_OFFSET(MechanicalVentilationData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MechanicalVentilationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NeedleDecompressionData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const NeedleDecompressionData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
NeedleDecompressionData::_Internal::patientaction(const NeedleDecompressionData* msg) {
  return *msg->patientaction_;
}
NeedleDecompressionData::NeedleDecompressionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.NeedleDecompressionData)
}
NeedleDecompressionData::NeedleDecompressionData(const NeedleDecompressionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&state_)) + sizeof(side_));
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.NeedleDecompressionData)
}

void NeedleDecompressionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NeedleDecompressionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&side_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(side_));
}

NeedleDecompressionData::~NeedleDecompressionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.NeedleDecompressionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NeedleDecompressionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
}

void NeedleDecompressionData::ArenaDtor(void* object) {
  NeedleDecompressionData* _this = reinterpret_cast< NeedleDecompressionData* >(object);
  (void)_this;
}
void NeedleDecompressionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NeedleDecompressionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NeedleDecompressionData& NeedleDecompressionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NeedleDecompressionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void NeedleDecompressionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.NeedleDecompressionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&side_) -
      reinterpret_cast<char*>(&state_)) + sizeof(side_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NeedleDecompressionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eSwitch State = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eSide Side = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::pulse::cdm::bind::eSide>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NeedleDecompressionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.NeedleDecompressionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.eSwitch State = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // .pulse.cdm.bind.eSide Side = 3;
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_side(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.NeedleDecompressionData)
  return target;
}

size_t NeedleDecompressionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.NeedleDecompressionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.eSwitch State = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .pulse.cdm.bind.eSide Side = 3;
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NeedleDecompressionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.NeedleDecompressionData)
  GOOGLE_DCHECK_NE(&from, this);
  const NeedleDecompressionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NeedleDecompressionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.NeedleDecompressionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.NeedleDecompressionData)
    MergeFrom(*source);
  }
}

void NeedleDecompressionData::MergeFrom(const NeedleDecompressionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.NeedleDecompressionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
}

void NeedleDecompressionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.NeedleDecompressionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeedleDecompressionData::CopyFrom(const NeedleDecompressionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.NeedleDecompressionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeedleDecompressionData::IsInitialized() const {
  return true;
}

void NeedleDecompressionData::InternalSwap(NeedleDecompressionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NeedleDecompressionData, side_)
      + sizeof(NeedleDecompressionData::side_)
      - PROTOBUF_FIELD_OFFSET(NeedleDecompressionData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NeedleDecompressionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PericardialEffusionData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const PericardialEffusionData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& effusionrate(const PericardialEffusionData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
PericardialEffusionData::_Internal::patientaction(const PericardialEffusionData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
PericardialEffusionData::_Internal::effusionrate(const PericardialEffusionData* msg) {
  return *msg->effusionrate_;
}
void PericardialEffusionData::clear_effusionrate() {
  if (GetArena() == nullptr && effusionrate_ != nullptr) {
    delete effusionrate_;
  }
  effusionrate_ = nullptr;
}
PericardialEffusionData::PericardialEffusionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.PericardialEffusionData)
}
PericardialEffusionData::PericardialEffusionData(const PericardialEffusionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  if (from._internal_has_effusionrate()) {
    effusionrate_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.effusionrate_);
  } else {
    effusionrate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.PericardialEffusionData)
}

void PericardialEffusionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PericardialEffusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&effusionrate_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(effusionrate_));
}

PericardialEffusionData::~PericardialEffusionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.PericardialEffusionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PericardialEffusionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
  if (this != internal_default_instance()) delete effusionrate_;
}

void PericardialEffusionData::ArenaDtor(void* object) {
  PericardialEffusionData* _this = reinterpret_cast< PericardialEffusionData* >(object);
  (void)_this;
}
void PericardialEffusionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PericardialEffusionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PericardialEffusionData& PericardialEffusionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PericardialEffusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void PericardialEffusionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.PericardialEffusionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  if (GetArena() == nullptr && effusionrate_ != nullptr) {
    delete effusionrate_;
  }
  effusionrate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PericardialEffusionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData EffusionRate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_effusionrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PericardialEffusionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.PericardialEffusionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData EffusionRate = 2;
  if (this->has_effusionrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::effusionrate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.PericardialEffusionData)
  return target;
}

size_t PericardialEffusionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.PericardialEffusionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData EffusionRate = 2;
  if (this->has_effusionrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *effusionrate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PericardialEffusionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.PericardialEffusionData)
  GOOGLE_DCHECK_NE(&from, this);
  const PericardialEffusionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PericardialEffusionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.PericardialEffusionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.PericardialEffusionData)
    MergeFrom(*source);
  }
}

void PericardialEffusionData::MergeFrom(const PericardialEffusionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.PericardialEffusionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.has_effusionrate()) {
    _internal_mutable_effusionrate()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_effusionrate());
  }
}

void PericardialEffusionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.PericardialEffusionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PericardialEffusionData::CopyFrom(const PericardialEffusionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.PericardialEffusionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PericardialEffusionData::IsInitialized() const {
  return true;
}

void PericardialEffusionData::InternalSwap(PericardialEffusionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PericardialEffusionData, effusionrate_)
      + sizeof(PericardialEffusionData::effusionrate_)
      - PROTOBUF_FIELD_OFFSET(PericardialEffusionData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PericardialEffusionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PulmonaryShuntExacerbationData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const PulmonaryShuntExacerbationData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const PulmonaryShuntExacerbationData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
PulmonaryShuntExacerbationData::_Internal::patientaction(const PulmonaryShuntExacerbationData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
PulmonaryShuntExacerbationData::_Internal::severity(const PulmonaryShuntExacerbationData* msg) {
  return *msg->severity_;
}
void PulmonaryShuntExacerbationData::clear_severity() {
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
PulmonaryShuntExacerbationData::PulmonaryShuntExacerbationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.PulmonaryShuntExacerbationData)
}
PulmonaryShuntExacerbationData::PulmonaryShuntExacerbationData(const PulmonaryShuntExacerbationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.PulmonaryShuntExacerbationData)
}

void PulmonaryShuntExacerbationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PulmonaryShuntExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(severity_));
}

PulmonaryShuntExacerbationData::~PulmonaryShuntExacerbationData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.PulmonaryShuntExacerbationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PulmonaryShuntExacerbationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
  if (this != internal_default_instance()) delete severity_;
}

void PulmonaryShuntExacerbationData::ArenaDtor(void* object) {
  PulmonaryShuntExacerbationData* _this = reinterpret_cast< PulmonaryShuntExacerbationData* >(object);
  (void)_this;
}
void PulmonaryShuntExacerbationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PulmonaryShuntExacerbationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PulmonaryShuntExacerbationData& PulmonaryShuntExacerbationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PulmonaryShuntExacerbationData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void PulmonaryShuntExacerbationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.PulmonaryShuntExacerbationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PulmonaryShuntExacerbationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PulmonaryShuntExacerbationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.PulmonaryShuntExacerbationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.PulmonaryShuntExacerbationData)
  return target;
}

size_t PulmonaryShuntExacerbationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.PulmonaryShuntExacerbationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PulmonaryShuntExacerbationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.PulmonaryShuntExacerbationData)
  GOOGLE_DCHECK_NE(&from, this);
  const PulmonaryShuntExacerbationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PulmonaryShuntExacerbationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.PulmonaryShuntExacerbationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.PulmonaryShuntExacerbationData)
    MergeFrom(*source);
  }
}

void PulmonaryShuntExacerbationData::MergeFrom(const PulmonaryShuntExacerbationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.PulmonaryShuntExacerbationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
}

void PulmonaryShuntExacerbationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.PulmonaryShuntExacerbationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PulmonaryShuntExacerbationData::CopyFrom(const PulmonaryShuntExacerbationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.PulmonaryShuntExacerbationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PulmonaryShuntExacerbationData::IsInitialized() const {
  return true;
}

void PulmonaryShuntExacerbationData::InternalSwap(PulmonaryShuntExacerbationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PulmonaryShuntExacerbationData, severity_)
      + sizeof(PulmonaryShuntExacerbationData::severity_)
      - PROTOBUF_FIELD_OFFSET(PulmonaryShuntExacerbationData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PulmonaryShuntExacerbationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RespiratoryFatigueData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const RespiratoryFatigueData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const RespiratoryFatigueData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
RespiratoryFatigueData::_Internal::patientaction(const RespiratoryFatigueData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
RespiratoryFatigueData::_Internal::severity(const RespiratoryFatigueData* msg) {
  return *msg->severity_;
}
void RespiratoryFatigueData::clear_severity() {
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
RespiratoryFatigueData::RespiratoryFatigueData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.RespiratoryFatigueData)
}
RespiratoryFatigueData::RespiratoryFatigueData(const RespiratoryFatigueData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.RespiratoryFatigueData)
}

void RespiratoryFatigueData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RespiratoryFatigueData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(severity_));
}

RespiratoryFatigueData::~RespiratoryFatigueData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.RespiratoryFatigueData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RespiratoryFatigueData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
  if (this != internal_default_instance()) delete severity_;
}

void RespiratoryFatigueData::ArenaDtor(void* object) {
  RespiratoryFatigueData* _this = reinterpret_cast< RespiratoryFatigueData* >(object);
  (void)_this;
}
void RespiratoryFatigueData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RespiratoryFatigueData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RespiratoryFatigueData& RespiratoryFatigueData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RespiratoryFatigueData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void RespiratoryFatigueData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.RespiratoryFatigueData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespiratoryFatigueData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RespiratoryFatigueData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.RespiratoryFatigueData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.RespiratoryFatigueData)
  return target;
}

size_t RespiratoryFatigueData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.RespiratoryFatigueData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RespiratoryFatigueData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.RespiratoryFatigueData)
  GOOGLE_DCHECK_NE(&from, this);
  const RespiratoryFatigueData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RespiratoryFatigueData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.RespiratoryFatigueData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.RespiratoryFatigueData)
    MergeFrom(*source);
  }
}

void RespiratoryFatigueData::MergeFrom(const RespiratoryFatigueData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.RespiratoryFatigueData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
}

void RespiratoryFatigueData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.RespiratoryFatigueData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespiratoryFatigueData::CopyFrom(const RespiratoryFatigueData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.RespiratoryFatigueData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespiratoryFatigueData::IsInitialized() const {
  return true;
}

void RespiratoryFatigueData::InternalSwap(RespiratoryFatigueData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespiratoryFatigueData, severity_)
      + sizeof(RespiratoryFatigueData::severity_)
      - PROTOBUF_FIELD_OFFSET(RespiratoryFatigueData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespiratoryFatigueData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstanceBolusData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const SubstanceBolusData* msg);
  static const ::pulse::cdm::bind::ScalarTimeData& administrationduration(const SubstanceBolusData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& concentration(const SubstanceBolusData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& dose(const SubstanceBolusData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& totalinfuseddose(const SubstanceBolusData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
SubstanceBolusData::_Internal::patientaction(const SubstanceBolusData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::ScalarTimeData&
SubstanceBolusData::_Internal::administrationduration(const SubstanceBolusData* msg) {
  return *msg->administrationduration_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
SubstanceBolusData::_Internal::concentration(const SubstanceBolusData* msg) {
  return *msg->concentration_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
SubstanceBolusData::_Internal::dose(const SubstanceBolusData* msg) {
  return *msg->dose_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
SubstanceBolusData::_Internal::totalinfuseddose(const SubstanceBolusData* msg) {
  return *msg->totalinfuseddose_;
}
void SubstanceBolusData::clear_administrationduration() {
  if (GetArena() == nullptr && administrationduration_ != nullptr) {
    delete administrationduration_;
  }
  administrationduration_ = nullptr;
}
void SubstanceBolusData::clear_concentration() {
  if (GetArena() == nullptr && concentration_ != nullptr) {
    delete concentration_;
  }
  concentration_ = nullptr;
}
void SubstanceBolusData::clear_dose() {
  if (GetArena() == nullptr && dose_ != nullptr) {
    delete dose_;
  }
  dose_ = nullptr;
}
void SubstanceBolusData::clear_totalinfuseddose() {
  if (GetArena() == nullptr && totalinfuseddose_ != nullptr) {
    delete totalinfuseddose_;
  }
  totalinfuseddose_ = nullptr;
}
SubstanceBolusData::SubstanceBolusData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.SubstanceBolusData)
}
SubstanceBolusData::SubstanceBolusData(const SubstanceBolusData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  substance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_substance().empty()) {
    substance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_substance(), 
      GetArena());
  }
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  if (from._internal_has_administrationduration()) {
    administrationduration_ = new ::pulse::cdm::bind::ScalarTimeData(*from.administrationduration_);
  } else {
    administrationduration_ = nullptr;
  }
  if (from._internal_has_concentration()) {
    concentration_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.concentration_);
  } else {
    concentration_ = nullptr;
  }
  if (from._internal_has_dose()) {
    dose_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.dose_);
  } else {
    dose_ = nullptr;
  }
  if (from._internal_has_totalinfuseddose()) {
    totalinfuseddose_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.totalinfuseddose_);
  } else {
    totalinfuseddose_ = nullptr;
  }
  administrationroute_ = from.administrationroute_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.SubstanceBolusData)
}

void SubstanceBolusData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstanceBolusData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  substance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&administrationroute_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(administrationroute_));
}

SubstanceBolusData::~SubstanceBolusData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.SubstanceBolusData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstanceBolusData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  substance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete patientaction_;
  if (this != internal_default_instance()) delete administrationduration_;
  if (this != internal_default_instance()) delete concentration_;
  if (this != internal_default_instance()) delete dose_;
  if (this != internal_default_instance()) delete totalinfuseddose_;
}

void SubstanceBolusData::ArenaDtor(void* object) {
  SubstanceBolusData* _this = reinterpret_cast< SubstanceBolusData* >(object);
  (void)_this;
}
void SubstanceBolusData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstanceBolusData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstanceBolusData& SubstanceBolusData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstanceBolusData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void SubstanceBolusData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.SubstanceBolusData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  substance_.ClearToEmpty();
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  if (GetArena() == nullptr && administrationduration_ != nullptr) {
    delete administrationduration_;
  }
  administrationduration_ = nullptr;
  if (GetArena() == nullptr && concentration_ != nullptr) {
    delete concentration_;
  }
  concentration_ = nullptr;
  if (GetArena() == nullptr && dose_ != nullptr) {
    delete dose_;
  }
  dose_ = nullptr;
  if (GetArena() == nullptr && totalinfuseddose_ != nullptr) {
    delete totalinfuseddose_;
  }
  totalinfuseddose_ = nullptr;
  administrationroute_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstanceBolusData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Substance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_substance();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.SubstanceBolusData.Substance"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.SubstanceBolusData.eRoute AdministrationRoute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_administrationroute(static_cast<::pulse::cdm::bind::SubstanceBolusData_eRoute>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData AdministrationDuration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_administrationduration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData Concentration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_concentration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData Dose = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData TotalInfusedDose = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_totalinfuseddose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstanceBolusData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.SubstanceBolusData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // string Substance = 2;
  if (this->substance().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_substance().data(), static_cast<int>(this->_internal_substance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.SubstanceBolusData.Substance");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_substance(), target);
  }

  // .pulse.cdm.bind.SubstanceBolusData.eRoute AdministrationRoute = 3;
  if (this->administrationroute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_administrationroute(), target);
  }

  // .pulse.cdm.bind.ScalarTimeData AdministrationDuration = 4;
  if (this->has_administrationduration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::administrationduration(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Concentration = 5;
  if (this->has_concentration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::concentration(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData Dose = 6;
  if (this->has_dose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::dose(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData TotalInfusedDose = 7;
  if (this->has_totalinfuseddose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::totalinfuseddose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.SubstanceBolusData)
  return target;
}

size_t SubstanceBolusData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.SubstanceBolusData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Substance = 2;
  if (this->substance().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_substance());
  }

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.ScalarTimeData AdministrationDuration = 4;
  if (this->has_administrationduration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *administrationduration_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Concentration = 5;
  if (this->has_concentration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *concentration_);
  }

  // .pulse.cdm.bind.ScalarVolumeData Dose = 6;
  if (this->has_dose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dose_);
  }

  // .pulse.cdm.bind.ScalarVolumeData TotalInfusedDose = 7;
  if (this->has_totalinfuseddose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totalinfuseddose_);
  }

  // .pulse.cdm.bind.SubstanceBolusData.eRoute AdministrationRoute = 3;
  if (this->administrationroute() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_administrationroute());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstanceBolusData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.SubstanceBolusData)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstanceBolusData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstanceBolusData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.SubstanceBolusData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.SubstanceBolusData)
    MergeFrom(*source);
  }
}

void SubstanceBolusData::MergeFrom(const SubstanceBolusData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.SubstanceBolusData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.substance().size() > 0) {
    _internal_set_substance(from._internal_substance());
  }
  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.has_administrationduration()) {
    _internal_mutable_administrationduration()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_administrationduration());
  }
  if (from.has_concentration()) {
    _internal_mutable_concentration()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_concentration());
  }
  if (from.has_dose()) {
    _internal_mutable_dose()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_dose());
  }
  if (from.has_totalinfuseddose()) {
    _internal_mutable_totalinfuseddose()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_totalinfuseddose());
  }
  if (from.administrationroute() != 0) {
    _internal_set_administrationroute(from._internal_administrationroute());
  }
}

void SubstanceBolusData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.SubstanceBolusData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstanceBolusData::CopyFrom(const SubstanceBolusData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.SubstanceBolusData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstanceBolusData::IsInitialized() const {
  return true;
}

void SubstanceBolusData::InternalSwap(SubstanceBolusData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  substance_.Swap(&other->substance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubstanceBolusData, administrationroute_)
      + sizeof(SubstanceBolusData::administrationroute_)
      - PROTOBUF_FIELD_OFFSET(SubstanceBolusData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstanceBolusData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstanceCompoundInfusionData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const SubstanceCompoundInfusionData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& bagvolume(const SubstanceCompoundInfusionData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& rate(const SubstanceCompoundInfusionData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
SubstanceCompoundInfusionData::_Internal::patientaction(const SubstanceCompoundInfusionData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
SubstanceCompoundInfusionData::_Internal::bagvolume(const SubstanceCompoundInfusionData* msg) {
  return *msg->bagvolume_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
SubstanceCompoundInfusionData::_Internal::rate(const SubstanceCompoundInfusionData* msg) {
  return *msg->rate_;
}
void SubstanceCompoundInfusionData::clear_bagvolume() {
  if (GetArena() == nullptr && bagvolume_ != nullptr) {
    delete bagvolume_;
  }
  bagvolume_ = nullptr;
}
void SubstanceCompoundInfusionData::clear_rate() {
  if (GetArena() == nullptr && rate_ != nullptr) {
    delete rate_;
  }
  rate_ = nullptr;
}
SubstanceCompoundInfusionData::SubstanceCompoundInfusionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.SubstanceCompoundInfusionData)
}
SubstanceCompoundInfusionData::SubstanceCompoundInfusionData(const SubstanceCompoundInfusionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  substancecompound_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_substancecompound().empty()) {
    substancecompound_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_substancecompound(), 
      GetArena());
  }
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  if (from._internal_has_bagvolume()) {
    bagvolume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.bagvolume_);
  } else {
    bagvolume_ = nullptr;
  }
  if (from._internal_has_rate()) {
    rate_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.rate_);
  } else {
    rate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.SubstanceCompoundInfusionData)
}

void SubstanceCompoundInfusionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstanceCompoundInfusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  substancecompound_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rate_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(rate_));
}

SubstanceCompoundInfusionData::~SubstanceCompoundInfusionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.SubstanceCompoundInfusionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstanceCompoundInfusionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  substancecompound_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete patientaction_;
  if (this != internal_default_instance()) delete bagvolume_;
  if (this != internal_default_instance()) delete rate_;
}

void SubstanceCompoundInfusionData::ArenaDtor(void* object) {
  SubstanceCompoundInfusionData* _this = reinterpret_cast< SubstanceCompoundInfusionData* >(object);
  (void)_this;
}
void SubstanceCompoundInfusionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstanceCompoundInfusionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstanceCompoundInfusionData& SubstanceCompoundInfusionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstanceCompoundInfusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void SubstanceCompoundInfusionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.SubstanceCompoundInfusionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  substancecompound_.ClearToEmpty();
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  if (GetArena() == nullptr && bagvolume_ != nullptr) {
    delete bagvolume_;
  }
  bagvolume_ = nullptr;
  if (GetArena() == nullptr && rate_ != nullptr) {
    delete rate_;
  }
  rate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstanceCompoundInfusionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SubstanceCompound = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_substancecompound();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.SubstanceCompoundInfusionData.SubstanceCompound"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData BagVolume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bagvolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData Rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstanceCompoundInfusionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.SubstanceCompoundInfusionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // string SubstanceCompound = 2;
  if (this->substancecompound().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_substancecompound().data(), static_cast<int>(this->_internal_substancecompound().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.SubstanceCompoundInfusionData.SubstanceCompound");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_substancecompound(), target);
  }

  // .pulse.cdm.bind.ScalarVolumeData BagVolume = 3;
  if (this->has_bagvolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bagvolume(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData Rate = 4;
  if (this->has_rate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.SubstanceCompoundInfusionData)
  return target;
}

size_t SubstanceCompoundInfusionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.SubstanceCompoundInfusionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SubstanceCompound = 2;
  if (this->substancecompound().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_substancecompound());
  }

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.ScalarVolumeData BagVolume = 3;
  if (this->has_bagvolume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bagvolume_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData Rate = 4;
  if (this->has_rate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstanceCompoundInfusionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.SubstanceCompoundInfusionData)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstanceCompoundInfusionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstanceCompoundInfusionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.SubstanceCompoundInfusionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.SubstanceCompoundInfusionData)
    MergeFrom(*source);
  }
}

void SubstanceCompoundInfusionData::MergeFrom(const SubstanceCompoundInfusionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.SubstanceCompoundInfusionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.substancecompound().size() > 0) {
    _internal_set_substancecompound(from._internal_substancecompound());
  }
  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.has_bagvolume()) {
    _internal_mutable_bagvolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_bagvolume());
  }
  if (from.has_rate()) {
    _internal_mutable_rate()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_rate());
  }
}

void SubstanceCompoundInfusionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.SubstanceCompoundInfusionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstanceCompoundInfusionData::CopyFrom(const SubstanceCompoundInfusionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.SubstanceCompoundInfusionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstanceCompoundInfusionData::IsInitialized() const {
  return true;
}

void SubstanceCompoundInfusionData::InternalSwap(SubstanceCompoundInfusionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  substancecompound_.Swap(&other->substancecompound_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubstanceCompoundInfusionData, rate_)
      + sizeof(SubstanceCompoundInfusionData::rate_)
      - PROTOBUF_FIELD_OFFSET(SubstanceCompoundInfusionData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstanceCompoundInfusionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstanceInfusionData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const SubstanceInfusionData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& concentration(const SubstanceInfusionData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& rate(const SubstanceInfusionData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
SubstanceInfusionData::_Internal::patientaction(const SubstanceInfusionData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
SubstanceInfusionData::_Internal::concentration(const SubstanceInfusionData* msg) {
  return *msg->concentration_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
SubstanceInfusionData::_Internal::rate(const SubstanceInfusionData* msg) {
  return *msg->rate_;
}
void SubstanceInfusionData::clear_concentration() {
  if (GetArena() == nullptr && concentration_ != nullptr) {
    delete concentration_;
  }
  concentration_ = nullptr;
}
void SubstanceInfusionData::clear_rate() {
  if (GetArena() == nullptr && rate_ != nullptr) {
    delete rate_;
  }
  rate_ = nullptr;
}
SubstanceInfusionData::SubstanceInfusionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.SubstanceInfusionData)
}
SubstanceInfusionData::SubstanceInfusionData(const SubstanceInfusionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  substance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_substance().empty()) {
    substance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_substance(), 
      GetArena());
  }
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  if (from._internal_has_concentration()) {
    concentration_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.concentration_);
  } else {
    concentration_ = nullptr;
  }
  if (from._internal_has_rate()) {
    rate_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.rate_);
  } else {
    rate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.SubstanceInfusionData)
}

void SubstanceInfusionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstanceInfusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  substance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rate_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(rate_));
}

SubstanceInfusionData::~SubstanceInfusionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.SubstanceInfusionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstanceInfusionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  substance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete patientaction_;
  if (this != internal_default_instance()) delete concentration_;
  if (this != internal_default_instance()) delete rate_;
}

void SubstanceInfusionData::ArenaDtor(void* object) {
  SubstanceInfusionData* _this = reinterpret_cast< SubstanceInfusionData* >(object);
  (void)_this;
}
void SubstanceInfusionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstanceInfusionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstanceInfusionData& SubstanceInfusionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstanceInfusionData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void SubstanceInfusionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.SubstanceInfusionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  substance_.ClearToEmpty();
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  if (GetArena() == nullptr && concentration_ != nullptr) {
    delete concentration_;
  }
  concentration_ = nullptr;
  if (GetArena() == nullptr && rate_ != nullptr) {
    delete rate_;
  }
  rate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstanceInfusionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Substance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_substance();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.SubstanceInfusionData.Substance"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData Concentration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_concentration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData Rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstanceInfusionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.SubstanceInfusionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // string Substance = 2;
  if (this->substance().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_substance().data(), static_cast<int>(this->_internal_substance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.SubstanceInfusionData.Substance");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_substance(), target);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Concentration = 3;
  if (this->has_concentration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::concentration(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData Rate = 4;
  if (this->has_rate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.SubstanceInfusionData)
  return target;
}

size_t SubstanceInfusionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.SubstanceInfusionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Substance = 2;
  if (this->substance().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_substance());
  }

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Concentration = 3;
  if (this->has_concentration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *concentration_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData Rate = 4;
  if (this->has_rate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstanceInfusionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.SubstanceInfusionData)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstanceInfusionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstanceInfusionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.SubstanceInfusionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.SubstanceInfusionData)
    MergeFrom(*source);
  }
}

void SubstanceInfusionData::MergeFrom(const SubstanceInfusionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.SubstanceInfusionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.substance().size() > 0) {
    _internal_set_substance(from._internal_substance());
  }
  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.has_concentration()) {
    _internal_mutable_concentration()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_concentration());
  }
  if (from.has_rate()) {
    _internal_mutable_rate()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_rate());
  }
}

void SubstanceInfusionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.SubstanceInfusionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstanceInfusionData::CopyFrom(const SubstanceInfusionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.SubstanceInfusionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstanceInfusionData::IsInitialized() const {
  return true;
}

void SubstanceInfusionData::InternalSwap(SubstanceInfusionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  substance_.Swap(&other->substance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubstanceInfusionData, rate_)
      + sizeof(SubstanceInfusionData::rate_)
      - PROTOBUF_FIELD_OFFSET(SubstanceInfusionData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstanceInfusionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SupplementalOxygenData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const SupplementalOxygenData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& flow(const SupplementalOxygenData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& volume(const SupplementalOxygenData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
SupplementalOxygenData::_Internal::patientaction(const SupplementalOxygenData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
SupplementalOxygenData::_Internal::flow(const SupplementalOxygenData* msg) {
  return *msg->flow_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
SupplementalOxygenData::_Internal::volume(const SupplementalOxygenData* msg) {
  return *msg->volume_;
}
void SupplementalOxygenData::clear_flow() {
  if (GetArena() == nullptr && flow_ != nullptr) {
    delete flow_;
  }
  flow_ = nullptr;
}
void SupplementalOxygenData::clear_volume() {
  if (GetArena() == nullptr && volume_ != nullptr) {
    delete volume_;
  }
  volume_ = nullptr;
}
SupplementalOxygenData::SupplementalOxygenData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.SupplementalOxygenData)
}
SupplementalOxygenData::SupplementalOxygenData(const SupplementalOxygenData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  if (from._internal_has_flow()) {
    flow_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.flow_);
  } else {
    flow_ = nullptr;
  }
  if (from._internal_has_volume()) {
    volume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.volume_);
  } else {
    volume_ = nullptr;
  }
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.SupplementalOxygenData)
}

void SupplementalOxygenData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SupplementalOxygenData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&device_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(device_));
}

SupplementalOxygenData::~SupplementalOxygenData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.SupplementalOxygenData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SupplementalOxygenData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
  if (this != internal_default_instance()) delete flow_;
  if (this != internal_default_instance()) delete volume_;
}

void SupplementalOxygenData::ArenaDtor(void* object) {
  SupplementalOxygenData* _this = reinterpret_cast< SupplementalOxygenData* >(object);
  (void)_this;
}
void SupplementalOxygenData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SupplementalOxygenData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SupplementalOxygenData& SupplementalOxygenData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SupplementalOxygenData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void SupplementalOxygenData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.SupplementalOxygenData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  if (GetArena() == nullptr && flow_ != nullptr) {
    delete flow_;
  }
  flow_ = nullptr;
  if (GetArena() == nullptr && volume_ != nullptr) {
    delete volume_;
  }
  volume_ = nullptr;
  device_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SupplementalOxygenData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.SupplementalOxygenData.eDevice Device = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_device(static_cast<::pulse::cdm::bind::SupplementalOxygenData_eDevice>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData Flow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_flow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData Volume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SupplementalOxygenData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.SupplementalOxygenData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.SupplementalOxygenData.eDevice Device = 2;
  if (this->device() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_device(), target);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData Flow = 3;
  if (this->has_flow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::flow(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData Volume = 4;
  if (this->has_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::volume(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.SupplementalOxygenData)
  return target;
}

size_t SupplementalOxygenData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.SupplementalOxygenData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData Flow = 3;
  if (this->has_flow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flow_);
  }

  // .pulse.cdm.bind.ScalarVolumeData Volume = 4;
  if (this->has_volume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volume_);
  }

  // .pulse.cdm.bind.SupplementalOxygenData.eDevice Device = 2;
  if (this->device() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_device());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SupplementalOxygenData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.SupplementalOxygenData)
  GOOGLE_DCHECK_NE(&from, this);
  const SupplementalOxygenData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SupplementalOxygenData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.SupplementalOxygenData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.SupplementalOxygenData)
    MergeFrom(*source);
  }
}

void SupplementalOxygenData::MergeFrom(const SupplementalOxygenData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.SupplementalOxygenData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.has_flow()) {
    _internal_mutable_flow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_flow());
  }
  if (from.has_volume()) {
    _internal_mutable_volume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_volume());
  }
  if (from.device() != 0) {
    _internal_set_device(from._internal_device());
  }
}

void SupplementalOxygenData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.SupplementalOxygenData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupplementalOxygenData::CopyFrom(const SupplementalOxygenData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.SupplementalOxygenData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupplementalOxygenData::IsInitialized() const {
  return true;
}

void SupplementalOxygenData::InternalSwap(SupplementalOxygenData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SupplementalOxygenData, device_)
      + sizeof(SupplementalOxygenData::device_)
      - PROTOBUF_FIELD_OFFSET(SupplementalOxygenData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SupplementalOxygenData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TensionPneumothoraxData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const TensionPneumothoraxData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const TensionPneumothoraxData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
TensionPneumothoraxData::_Internal::patientaction(const TensionPneumothoraxData* msg) {
  return *msg->patientaction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
TensionPneumothoraxData::_Internal::severity(const TensionPneumothoraxData* msg) {
  return *msg->severity_;
}
void TensionPneumothoraxData::clear_severity() {
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
TensionPneumothoraxData::TensionPneumothoraxData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.TensionPneumothoraxData)
}
TensionPneumothoraxData::TensionPneumothoraxData(const TensionPneumothoraxData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&type_)) + sizeof(side_));
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.TensionPneumothoraxData)
}

void TensionPneumothoraxData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TensionPneumothoraxData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&side_) -
      reinterpret_cast<char*>(&patientaction_)) + sizeof(side_));
}

TensionPneumothoraxData::~TensionPneumothoraxData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.TensionPneumothoraxData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TensionPneumothoraxData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
  if (this != internal_default_instance()) delete severity_;
}

void TensionPneumothoraxData::ArenaDtor(void* object) {
  TensionPneumothoraxData* _this = reinterpret_cast< TensionPneumothoraxData* >(object);
  (void)_this;
}
void TensionPneumothoraxData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TensionPneumothoraxData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TensionPneumothoraxData& TensionPneumothoraxData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TensionPneumothoraxData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void TensionPneumothoraxData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.TensionPneumothoraxData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&side_) -
      reinterpret_cast<char*>(&type_)) + sizeof(side_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensionPneumothoraxData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eGate Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::pulse::cdm::bind::eGate>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eSide Side = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::pulse::cdm::bind::eSide>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TensionPneumothoraxData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.TensionPneumothoraxData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  // .pulse.cdm.bind.eGate Type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .pulse.cdm.bind.eSide Side = 3;
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_side(), target);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 4;
  if (this->has_severity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.TensionPneumothoraxData)
  return target;
}

size_t TensionPneumothoraxData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.TensionPneumothoraxData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 4;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  // .pulse.cdm.bind.eGate Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .pulse.cdm.bind.eSide Side = 3;
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensionPneumothoraxData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.TensionPneumothoraxData)
  GOOGLE_DCHECK_NE(&from, this);
  const TensionPneumothoraxData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TensionPneumothoraxData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.TensionPneumothoraxData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.TensionPneumothoraxData)
    MergeFrom(*source);
  }
}

void TensionPneumothoraxData::MergeFrom(const TensionPneumothoraxData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.TensionPneumothoraxData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
}

void TensionPneumothoraxData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.TensionPneumothoraxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensionPneumothoraxData::CopyFrom(const TensionPneumothoraxData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.TensionPneumothoraxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensionPneumothoraxData::IsInitialized() const {
  return true;
}

void TensionPneumothoraxData::InternalSwap(TensionPneumothoraxData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TensionPneumothoraxData, side_)
      + sizeof(TensionPneumothoraxData::side_)
      - PROTOBUF_FIELD_OFFSET(TensionPneumothoraxData, patientaction_)>(
          reinterpret_cast<char*>(&patientaction_),
          reinterpret_cast<char*>(&other->patientaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TensionPneumothoraxData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UrinateData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientActionData& patientaction(const UrinateData* msg);
};

const ::pulse::cdm::bind::PatientActionData&
UrinateData::_Internal::patientaction(const UrinateData* msg) {
  return *msg->patientaction_;
}
UrinateData::UrinateData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.UrinateData)
}
UrinateData::UrinateData(const UrinateData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientaction()) {
    patientaction_ = new ::pulse::cdm::bind::PatientActionData(*from.patientaction_);
  } else {
    patientaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.UrinateData)
}

void UrinateData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UrinateData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  patientaction_ = nullptr;
}

UrinateData::~UrinateData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.UrinateData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UrinateData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientaction_;
}

void UrinateData::ArenaDtor(void* object) {
  UrinateData* _this = reinterpret_cast< UrinateData* >(object);
  (void)_this;
}
void UrinateData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UrinateData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UrinateData& UrinateData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UrinateData_pulse_2fcdm_2fbind_2fPatientActions_2eproto.base);
  return *internal_default_instance();
}


void UrinateData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.UrinateData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UrinateData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientActionData PatientAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UrinateData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.UrinateData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.UrinateData)
  return target;
}

size_t UrinateData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.UrinateData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  if (this->has_patientaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientaction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UrinateData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.UrinateData)
  GOOGLE_DCHECK_NE(&from, this);
  const UrinateData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UrinateData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.UrinateData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.UrinateData)
    MergeFrom(*source);
  }
}

void UrinateData::MergeFrom(const UrinateData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.UrinateData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientaction()) {
    _internal_mutable_patientaction()->::pulse::cdm::bind::PatientActionData::MergeFrom(from._internal_patientaction());
  }
}

void UrinateData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.UrinateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UrinateData::CopyFrom(const UrinateData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.UrinateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrinateData::IsInitialized() const {
  return true;
}

void UrinateData::InternalSwap(UrinateData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(patientaction_, other->patientaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UrinateData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnyPatientActionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnyPatientActionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::AnyPatientActionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::PatientActionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::PatientActionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::PatientActionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::PatientAssessmentRequestData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::PatientAssessmentRequestData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::PatientAssessmentRequestData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AcuteStressData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AcuteStressData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::AcuteStressData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AirwayObstructionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AirwayObstructionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::AirwayObstructionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AsthmaAttackData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AsthmaAttackData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::AsthmaAttackData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::BrainInjuryData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::BrainInjuryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::BrainInjuryData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::BronchoconstrictionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::BronchoconstrictionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::BronchoconstrictionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::CardiacArrestData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::CardiacArrestData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::CardiacArrestData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ChestCompressionForceData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ChestCompressionForceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ChestCompressionForceData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ChestCompressionForceScaleData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ChestCompressionForceScaleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ChestCompressionForceScaleData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ChestOcclusiveDressingData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ChestOcclusiveDressingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ChestOcclusiveDressingData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::DyspneaData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::DyspneaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::DyspneaData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ForcedInhaleData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ForcedInhaleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ForcedInhaleData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ForcedExhaleData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ForcedExhaleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ForcedExhaleData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ForcedPauseData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ForcedPauseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ForcedPauseData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::UseInhalerData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::UseInhalerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::UseInhalerData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnyConsciousRespirationCommandData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnyConsciousRespirationCommandData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::AnyConsciousRespirationCommandData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ConsciousRespirationData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ConsciousRespirationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ConsciousRespirationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ConsumeNutrientsData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ConsumeNutrientsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ConsumeNutrientsData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ExerciseData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ExerciseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ExerciseData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::HemorrhageData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::HemorrhageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::HemorrhageData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::IntubationData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::IntubationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::IntubationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::LobarPneumoniaExacerbationData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::LobarPneumoniaExacerbationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::LobarPneumoniaExacerbationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::MechanicalVentilationData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::MechanicalVentilationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::MechanicalVentilationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::NeedleDecompressionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::NeedleDecompressionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::NeedleDecompressionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::PericardialEffusionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::PericardialEffusionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::PericardialEffusionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::PulmonaryShuntExacerbationData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::PulmonaryShuntExacerbationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::PulmonaryShuntExacerbationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::RespiratoryFatigueData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::RespiratoryFatigueData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::RespiratoryFatigueData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::SubstanceBolusData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::SubstanceBolusData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::SubstanceBolusData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::SubstanceCompoundInfusionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::SubstanceCompoundInfusionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::SubstanceCompoundInfusionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::SubstanceInfusionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::SubstanceInfusionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::SubstanceInfusionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::SupplementalOxygenData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::SupplementalOxygenData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::SupplementalOxygenData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::TensionPneumothoraxData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::TensionPneumothoraxData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::TensionPneumothoraxData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::UrinateData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::UrinateData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::UrinateData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
