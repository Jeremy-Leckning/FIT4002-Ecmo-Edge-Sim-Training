// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/Events.proto

#include "pulse/cdm/bind/Events.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEvents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActiveEventData_pulse_2fcdm_2fbind_2fEvents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEvents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventChangeData_pulse_2fcdm_2fbind_2fEvents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class ActiveEventDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveEventData> _instance;
} _ActiveEventData_default_instance_;
class ActiveEventListDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveEventListData> _instance;
} _ActiveEventListData_default_instance_;
class EventChangeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventChangeData> _instance;
} _EventChangeData_default_instance_;
class EventChangeListDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventChangeListData> _instance;
} _EventChangeListData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_ActiveEventData_pulse_2fcdm_2fbind_2fEvents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ActiveEventData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ActiveEventData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActiveEventData_pulse_2fcdm_2fbind_2fEvents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ActiveEventData_pulse_2fcdm_2fbind_2fEvents_2eproto}, {
      &scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ActiveEventListData_pulse_2fcdm_2fbind_2fEvents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ActiveEventListData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ActiveEventListData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActiveEventListData_pulse_2fcdm_2fbind_2fEvents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ActiveEventListData_pulse_2fcdm_2fbind_2fEvents_2eproto}, {
      &scc_info_ActiveEventData_pulse_2fcdm_2fbind_2fEvents_2eproto.base,}};

static void InitDefaultsscc_info_EventChangeData_pulse_2fcdm_2fbind_2fEvents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_EventChangeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::EventChangeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventChangeData_pulse_2fcdm_2fbind_2fEvents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EventChangeData_pulse_2fcdm_2fbind_2fEvents_2eproto}, {
      &scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_EventChangeListData_pulse_2fcdm_2fbind_2fEvents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_EventChangeListData_default_instance_;
    new (ptr) ::pulse::cdm::bind::EventChangeListData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventChangeListData_pulse_2fcdm_2fbind_2fEvents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EventChangeListData_pulse_2fcdm_2fbind_2fEvents_2eproto}, {
      &scc_info_EventChangeData_pulse_2fcdm_2fbind_2fEvents_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fEvents_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pulse_2fcdm_2fbind_2fEvents_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fEvents_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fEvents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ActiveEventData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ActiveEventData, event_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ActiveEventData, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ActiveEventListData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ActiveEventListData, activeevent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EventChangeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EventChangeData, event_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EventChangeData, simtime_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EventChangeData, active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EventChangeListData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EventChangeListData, change_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::ActiveEventData)},
  { 7, -1, sizeof(::pulse::cdm::bind::ActiveEventListData)},
  { 13, -1, sizeof(::pulse::cdm::bind::EventChangeData)},
  { 21, -1, sizeof(::pulse::cdm::bind::EventChangeListData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ActiveEventData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ActiveEventListData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_EventChangeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_EventChangeListData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fEvents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033pulse/cdm/bind/Events.proto\022\016pulse.cdm"
  ".bind\032\037pulse/cdm/bind/Properties.proto\"j"
  "\n\017ActiveEventData\022%\n\005Event\030\001 \001(\0162\026.pulse"
  ".cdm.bind.eEvent\0220\n\010Duration\030\002 \001(\0132\036.pul"
  "se.cdm.bind.ScalarTimeData\"K\n\023ActiveEven"
  "tListData\0224\n\013ActiveEvent\030\001 \003(\0132\037.pulse.c"
  "dm.bind.ActiveEventData\"y\n\017EventChangeDa"
  "ta\022%\n\005Event\030\001 \001(\0162\026.pulse.cdm.bind.eEven"
  "t\022/\n\007SimTime\030\002 \001(\0132\036.pulse.cdm.bind.Scal"
  "arTimeData\022\016\n\006Active\030\003 \001(\010\"F\n\023EventChang"
  "eListData\022/\n\006Change\030\001 \003(\0132\037.pulse.cdm.bi"
  "nd.EventChangeData*\214\t\n\006eEvent\022\020\n\014Antidiu"
  "resis\020\000\022\014\n\010Asystole\020\001\022\017\n\013Bradycardia\020\002\022\r"
  "\n\tBradypnea\020\003\022\026\n\022BrainOxygenDeficit\020\004\022\021\n"
  "\rCardiacArrest\020\005\022\024\n\020CardiogenicShock\020\006\022\032"
  "\n\026CardiovascularCollapse\020\007\022\036\n\032CriticalBr"
  "ainOxygenDeficit\020\010\022\017\n\013Dehydration\020\t\022\014\n\010D"
  "iuresis\020\n\022\021\n\rFasciculation\020\013\022\013\n\007Fatigue\020"
  "\014\022\032\n\026FunctionalIncontinence\020\r\022\017\n\013Hyperca"
  "pnia\020\016\022\021\n\rHyperglycemia\020\017\022\020\n\014Hyperthermi"
  "a\020\020\022\020\n\014Hypoglycemia\020\021\022\017\n\013Hypothermia\020\022\022\013"
  "\n\007Hypoxia\020\023\022\024\n\020HypovolemicShock\020\024\022\034\n\030Int"
  "racranialHypertension\020\025\022\033\n\027IntracranialH"
  "ypotension\020\026\022\025\n\021IrreversibleState\020\027\022\020\n\014K"
  "etoacidosis\020\030\022\022\n\016LacticAcidosis\020\031\022#\n\037Max"
  "imumPulmonaryVentilationRate\020\032\022\025\n\021Metabo"
  "licAcidosis\020\033\022\026\n\022MetabolicAlkalosis\020\034\022\027\n"
  "\023ModerateHyperoxemia\020\035\022\026\n\022ModerateHypoca"
  "pnia\020\036\022\033\n\027MyocardiumOxygenDeficit\020\037\022\017\n\013N"
  "atriuresis\020 \022\025\n\021NutritionDepleted\020!\022\026\n\022R"
  "enalHypoperfusion\020\"\022\027\n\023RespiratoryAcidos"
  "is\020#\022\030\n\024RespiratoryAlkalosis\020$\022\025\n\021Severe"
  "Hyperoxemia\020%\022\024\n\020SevereHypocapnia\020&\022\027\n\023S"
  "tartOfCardiacCycle\020\'\022\021\n\rStartOfExhale\020(\022"
  "\021\n\rStartOfInhale\020)\022\017\n\013Tachycardia\020*\022\r\n\tT"
  "achypnea\020+\022.\n)AnesthesiaMachineOxygenBot"
  "tleOneExhausted\020\350\007\022.\n)AnesthesiaMachineO"
  "xygenBottleTwoExhausted\020\351\007\022\'\n\"Anesthesia"
  "MachineReliefValveActive\020\352\007\022&\n!Supplemen"
  "talOxygenBottleExhausted\020\353\007\022$\n\037NonRebrea"
  "therMaskOxygenBagEmpty\020\354\007B/\n\032com.kitware"
  ".pulse.cdm.bindH\001\252\002\016pulse.cdm.bindb\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fEvents_2eproto_deps[1] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fEvents_2eproto_sccs[4] = {
  &scc_info_ActiveEventData_pulse_2fcdm_2fbind_2fEvents_2eproto.base,
  &scc_info_ActiveEventListData_pulse_2fcdm_2fbind_2fEvents_2eproto.base,
  &scc_info_EventChangeData_pulse_2fcdm_2fbind_2fEvents_2eproto.base,
  &scc_info_EventChangeListData_pulse_2fcdm_2fbind_2fEvents_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fEvents_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fEvents_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcdm_2fbind_2fEvents_2eproto, "pulse/cdm/bind/Events.proto", 1682,
  &descriptor_table_pulse_2fcdm_2fbind_2fEvents_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fEvents_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fEvents_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fEvents_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fEvents_2eproto, 4, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fEvents_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fEvents_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fEvents_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fEvents_2eproto)), true);
namespace pulse {
namespace cdm {
namespace bind {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eEvent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fEvents_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fEvents_2eproto[0];
}
bool eEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ActiveEventData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarTimeData& duration(const ActiveEventData* msg);
};

const ::pulse::cdm::bind::ScalarTimeData&
ActiveEventData::_Internal::duration(const ActiveEventData* msg) {
  return *msg->duration_;
}
void ActiveEventData::clear_duration() {
  if (GetArena() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
ActiveEventData::ActiveEventData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ActiveEventData)
}
ActiveEventData::ActiveEventData(const ActiveEventData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_duration()) {
    duration_ = new ::pulse::cdm::bind::ScalarTimeData(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  event_ = from.event_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ActiveEventData)
}

void ActiveEventData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActiveEventData_pulse_2fcdm_2fbind_2fEvents_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&event_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(event_));
}

ActiveEventData::~ActiveEventData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ActiveEventData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActiveEventData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete duration_;
}

void ActiveEventData::ArenaDtor(void* object) {
  ActiveEventData* _this = reinterpret_cast< ActiveEventData* >(object);
  (void)_this;
}
void ActiveEventData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActiveEventData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveEventData& ActiveEventData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveEventData_pulse_2fcdm_2fbind_2fEvents_2eproto.base);
  return *internal_default_instance();
}


void ActiveEventData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ActiveEventData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
  event_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActiveEventData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.eEvent Event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event(static_cast<::pulse::cdm::bind::eEvent>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData Duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActiveEventData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ActiveEventData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.eEvent Event = 1;
  if (this->event() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event(), target);
  }

  // .pulse.cdm.bind.ScalarTimeData Duration = 2;
  if (this->has_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::duration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ActiveEventData)
  return target;
}

size_t ActiveEventData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ActiveEventData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarTimeData Duration = 2;
  if (this->has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  // .pulse.cdm.bind.eEvent Event = 1;
  if (this->event() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveEventData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ActiveEventData)
  GOOGLE_DCHECK_NE(&from, this);
  const ActiveEventData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActiveEventData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ActiveEventData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ActiveEventData)
    MergeFrom(*source);
  }
}

void ActiveEventData::MergeFrom(const ActiveEventData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ActiveEventData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_duration()) {
    _internal_mutable_duration()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_duration());
  }
  if (from.event() != 0) {
    _internal_set_event(from._internal_event());
  }
}

void ActiveEventData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ActiveEventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveEventData::CopyFrom(const ActiveEventData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ActiveEventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveEventData::IsInitialized() const {
  return true;
}

void ActiveEventData::InternalSwap(ActiveEventData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActiveEventData, event_)
      + sizeof(ActiveEventData::event_)
      - PROTOBUF_FIELD_OFFSET(ActiveEventData, duration_)>(
          reinterpret_cast<char*>(&duration_),
          reinterpret_cast<char*>(&other->duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActiveEventData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ActiveEventListData::_Internal {
 public:
};

ActiveEventListData::ActiveEventListData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  activeevent_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ActiveEventListData)
}
ActiveEventListData::ActiveEventListData(const ActiveEventListData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      activeevent_(from.activeevent_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ActiveEventListData)
}

void ActiveEventListData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActiveEventListData_pulse_2fcdm_2fbind_2fEvents_2eproto.base);
}

ActiveEventListData::~ActiveEventListData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ActiveEventListData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActiveEventListData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ActiveEventListData::ArenaDtor(void* object) {
  ActiveEventListData* _this = reinterpret_cast< ActiveEventListData* >(object);
  (void)_this;
}
void ActiveEventListData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActiveEventListData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveEventListData& ActiveEventListData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveEventListData_pulse_2fcdm_2fbind_2fEvents_2eproto.base);
  return *internal_default_instance();
}


void ActiveEventListData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ActiveEventListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activeevent_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActiveEventListData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pulse.cdm.bind.ActiveEventData ActiveEvent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_activeevent(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActiveEventListData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ActiveEventListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.ActiveEventData ActiveEvent = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_activeevent_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_activeevent(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ActiveEventListData)
  return target;
}

size_t ActiveEventListData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ActiveEventListData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.ActiveEventData ActiveEvent = 1;
  total_size += 1UL * this->_internal_activeevent_size();
  for (const auto& msg : this->activeevent_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveEventListData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ActiveEventListData)
  GOOGLE_DCHECK_NE(&from, this);
  const ActiveEventListData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActiveEventListData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ActiveEventListData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ActiveEventListData)
    MergeFrom(*source);
  }
}

void ActiveEventListData::MergeFrom(const ActiveEventListData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ActiveEventListData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activeevent_.MergeFrom(from.activeevent_);
}

void ActiveEventListData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ActiveEventListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveEventListData::CopyFrom(const ActiveEventListData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ActiveEventListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveEventListData::IsInitialized() const {
  return true;
}

void ActiveEventListData::InternalSwap(ActiveEventListData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  activeevent_.InternalSwap(&other->activeevent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActiveEventListData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EventChangeData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarTimeData& simtime(const EventChangeData* msg);
};

const ::pulse::cdm::bind::ScalarTimeData&
EventChangeData::_Internal::simtime(const EventChangeData* msg) {
  return *msg->simtime_;
}
void EventChangeData::clear_simtime() {
  if (GetArena() == nullptr && simtime_ != nullptr) {
    delete simtime_;
  }
  simtime_ = nullptr;
}
EventChangeData::EventChangeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.EventChangeData)
}
EventChangeData::EventChangeData(const EventChangeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_simtime()) {
    simtime_ = new ::pulse::cdm::bind::ScalarTimeData(*from.simtime_);
  } else {
    simtime_ = nullptr;
  }
  ::memcpy(&event_, &from.event_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&event_)) + sizeof(active_));
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.EventChangeData)
}

void EventChangeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventChangeData_pulse_2fcdm_2fbind_2fEvents_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&simtime_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&simtime_)) + sizeof(active_));
}

EventChangeData::~EventChangeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.EventChangeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventChangeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete simtime_;
}

void EventChangeData::ArenaDtor(void* object) {
  EventChangeData* _this = reinterpret_cast< EventChangeData* >(object);
  (void)_this;
}
void EventChangeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventChangeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventChangeData& EventChangeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventChangeData_pulse_2fcdm_2fbind_2fEvents_2eproto.base);
  return *internal_default_instance();
}


void EventChangeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.EventChangeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && simtime_ != nullptr) {
    delete simtime_;
  }
  simtime_ = nullptr;
  ::memset(&event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&event_)) + sizeof(active_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventChangeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.eEvent Event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event(static_cast<::pulse::cdm::bind::eEvent>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData SimTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_simtime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventChangeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.EventChangeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.eEvent Event = 1;
  if (this->event() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event(), target);
  }

  // .pulse.cdm.bind.ScalarTimeData SimTime = 2;
  if (this->has_simtime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::simtime(this), target, stream);
  }

  // bool Active = 3;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.EventChangeData)
  return target;
}

size_t EventChangeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.EventChangeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarTimeData SimTime = 2;
  if (this->has_simtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *simtime_);
  }

  // .pulse.cdm.bind.eEvent Event = 1;
  if (this->event() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event());
  }

  // bool Active = 3;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventChangeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.EventChangeData)
  GOOGLE_DCHECK_NE(&from, this);
  const EventChangeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventChangeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.EventChangeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.EventChangeData)
    MergeFrom(*source);
  }
}

void EventChangeData::MergeFrom(const EventChangeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.EventChangeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_simtime()) {
    _internal_mutable_simtime()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_simtime());
  }
  if (from.event() != 0) {
    _internal_set_event(from._internal_event());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
}

void EventChangeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.EventChangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventChangeData::CopyFrom(const EventChangeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.EventChangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventChangeData::IsInitialized() const {
  return true;
}

void EventChangeData::InternalSwap(EventChangeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventChangeData, active_)
      + sizeof(EventChangeData::active_)
      - PROTOBUF_FIELD_OFFSET(EventChangeData, simtime_)>(
          reinterpret_cast<char*>(&simtime_),
          reinterpret_cast<char*>(&other->simtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventChangeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EventChangeListData::_Internal {
 public:
};

EventChangeListData::EventChangeListData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  change_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.EventChangeListData)
}
EventChangeListData::EventChangeListData(const EventChangeListData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      change_(from.change_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.EventChangeListData)
}

void EventChangeListData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventChangeListData_pulse_2fcdm_2fbind_2fEvents_2eproto.base);
}

EventChangeListData::~EventChangeListData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.EventChangeListData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventChangeListData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EventChangeListData::ArenaDtor(void* object) {
  EventChangeListData* _this = reinterpret_cast< EventChangeListData* >(object);
  (void)_this;
}
void EventChangeListData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventChangeListData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventChangeListData& EventChangeListData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventChangeListData_pulse_2fcdm_2fbind_2fEvents_2eproto.base);
  return *internal_default_instance();
}


void EventChangeListData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.EventChangeListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  change_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventChangeListData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pulse.cdm.bind.EventChangeData Change = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_change(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventChangeListData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.EventChangeListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.EventChangeData Change = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_change_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_change(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.EventChangeListData)
  return target;
}

size_t EventChangeListData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.EventChangeListData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.EventChangeData Change = 1;
  total_size += 1UL * this->_internal_change_size();
  for (const auto& msg : this->change_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventChangeListData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.EventChangeListData)
  GOOGLE_DCHECK_NE(&from, this);
  const EventChangeListData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventChangeListData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.EventChangeListData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.EventChangeListData)
    MergeFrom(*source);
  }
}

void EventChangeListData::MergeFrom(const EventChangeListData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.EventChangeListData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  change_.MergeFrom(from.change_);
}

void EventChangeListData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.EventChangeListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventChangeListData::CopyFrom(const EventChangeListData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.EventChangeListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventChangeListData::IsInitialized() const {
  return true;
}

void EventChangeListData::InternalSwap(EventChangeListData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  change_.InternalSwap(&other->change_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventChangeListData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ActiveEventData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ActiveEventData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ActiveEventData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ActiveEventListData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ActiveEventListData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ActiveEventListData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::EventChangeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::EventChangeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::EventChangeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::EventChangeListData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::EventChangeListData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::EventChangeListData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
