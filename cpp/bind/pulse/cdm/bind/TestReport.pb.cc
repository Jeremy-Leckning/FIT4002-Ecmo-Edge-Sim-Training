// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/TestReport.proto

#include "pulse/cdm/bind/TestReport.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FunctionData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fTestReport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TestCaseData_pulse_2fcdm_2fbind_2fTestReport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fTestReport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestErrorStatisticsData_pulse_2fcdm_2fbind_2fTestReport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fTestReport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TestSuiteData_pulse_2fcdm_2fbind_2fTestReport_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class TestErrorStatisticsDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestErrorStatisticsData> _instance;
} _TestErrorStatisticsData_default_instance_;
class TestCaseDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestCaseData> _instance;
} _TestCaseData_default_instance_;
class TestSuiteDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestSuiteData> _instance;
} _TestSuiteData_default_instance_;
class TestReportDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestReportData> _instance;
} _TestReportData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_TestCaseData_pulse_2fcdm_2fbind_2fTestReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_TestCaseData_default_instance_;
    new (ptr) ::pulse::cdm::bind::TestCaseData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TestCaseData_pulse_2fcdm_2fbind_2fTestReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TestCaseData_pulse_2fcdm_2fbind_2fTestReport_2eproto}, {
      &scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_TestErrorStatisticsData_pulse_2fcdm_2fbind_2fTestReport_2eproto.base,}};

static void InitDefaultsscc_info_TestErrorStatisticsData_pulse_2fcdm_2fbind_2fTestReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_TestErrorStatisticsData_default_instance_;
    new (ptr) ::pulse::cdm::bind::TestErrorStatisticsData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestErrorStatisticsData_pulse_2fcdm_2fbind_2fTestReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestErrorStatisticsData_pulse_2fcdm_2fbind_2fTestReport_2eproto}, {
      &scc_info_FunctionData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_TestReportData_pulse_2fcdm_2fbind_2fTestReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_TestReportData_default_instance_;
    new (ptr) ::pulse::cdm::bind::TestReportData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestReportData_pulse_2fcdm_2fbind_2fTestReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestReportData_pulse_2fcdm_2fbind_2fTestReport_2eproto}, {
      &scc_info_TestSuiteData_pulse_2fcdm_2fbind_2fTestReport_2eproto.base,}};

static void InitDefaultsscc_info_TestSuiteData_pulse_2fcdm_2fbind_2fTestReport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_TestSuiteData_default_instance_;
    new (ptr) ::pulse::cdm::bind::TestSuiteData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TestSuiteData_pulse_2fcdm_2fbind_2fTestReport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TestSuiteData_pulse_2fcdm_2fbind_2fTestReport_2eproto}, {
      &scc_info_TestErrorStatisticsData_pulse_2fcdm_2fbind_2fTestReport_2eproto.base,
      &scc_info_TestCaseData_pulse_2fcdm_2fbind_2fTestReport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fTestReport_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pulse_2fcdm_2fbind_2fTestReport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fTestReport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fTestReport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestErrorStatisticsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestErrorStatisticsData, propertyname_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestErrorStatisticsData, percenttolerance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestErrorStatisticsData, numberoferrors_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestErrorStatisticsData, computedpropertyid_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestErrorStatisticsData, expectedpropertyid_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestErrorStatisticsData, minimumerror_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestErrorStatisticsData, maximumerror_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestErrorStatisticsData, averageerror_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestErrorStatisticsData, standarddeviation_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestErrorStatisticsData, percenttolerancevsnumerrors_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestErrorStatisticsData, differences_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestCaseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestCaseData, name_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestCaseData, duration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestCaseData, failure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestCaseData, errorstats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestSuiteData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestSuiteData, name_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestSuiteData, performed_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestSuiteData, errors_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestSuiteData, tests_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestSuiteData, requirement_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestSuiteData, errorstats_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestSuiteData, testcase_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestReportData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TestReportData, testsuite_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::TestErrorStatisticsData)},
  { 16, -1, sizeof(::pulse::cdm::bind::TestCaseData)},
  { 25, -1, sizeof(::pulse::cdm::bind::TestSuiteData)},
  { 37, -1, sizeof(::pulse::cdm::bind::TestReportData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_TestErrorStatisticsData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_TestCaseData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_TestSuiteData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_TestReportData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fTestReport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037pulse/cdm/bind/TestReport.proto\022\016pulse"
  ".cdm.bind\032\037pulse/cdm/bind/Properties.pro"
  "to\"\316\002\n\027TestErrorStatisticsData\022\024\n\014Proper"
  "tyName\030\001 \001(\t\022\030\n\020PercentTolerance\030\002 \001(\001\022\026"
  "\n\016NumberOfErrors\030\003 \001(\r\022\032\n\022ComputedProper"
  "tyID\030\004 \001(\t\022\032\n\022ExpectedPropertyID\030\005 \001(\t\022\024"
  "\n\014MinimumError\030\006 \001(\001\022\024\n\014MaximumError\030\007 \001"
  "(\001\022\024\n\014AverageError\030\010 \001(\001\022\031\n\021StandardDevi"
  "ation\030\t \001(\001\022A\n\033PercentToleranceVsNumErro"
  "rs\030\n \001(\0132\034.pulse.cdm.bind.FunctionData\022\023"
  "\n\013Differences\030\013 \003(\t\"\234\001\n\014TestCaseData\022\014\n\004"
  "Name\030\001 \001(\t\0220\n\010Duration\030\002 \001(\0132\036.pulse.cdm"
  ".bind.ScalarTimeData\022\017\n\007Failure\030\003 \003(\t\022;\n"
  "\nErrorStats\030\004 \003(\0132\'.pulse.cdm.bind.TestE"
  "rrorStatisticsData\"\321\001\n\rTestSuiteData\022\014\n\004"
  "Name\030\001 \001(\t\022\021\n\tPerformed\030\002 \001(\010\022\016\n\006Errors\030"
  "\003 \001(\r\022\r\n\005Tests\030\004 \001(\r\022\023\n\013Requirement\030\005 \003("
  "\t\022;\n\nErrorStats\030\006 \003(\0132\'.pulse.cdm.bind.T"
  "estErrorStatisticsData\022.\n\010TestCase\030\007 \003(\013"
  "2\034.pulse.cdm.bind.TestCaseData\"B\n\016TestRe"
  "portData\0220\n\tTestSuite\030\001 \003(\0132\035.pulse.cdm."
  "bind.TestSuiteDataB/\n\032com.kitware.pulse."
  "cdm.bindH\001\252\002\016pulse.cdm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fTestReport_2eproto_deps[1] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fTestReport_2eproto_sccs[4] = {
  &scc_info_TestCaseData_pulse_2fcdm_2fbind_2fTestReport_2eproto.base,
  &scc_info_TestErrorStatisticsData_pulse_2fcdm_2fbind_2fTestReport_2eproto.base,
  &scc_info_TestReportData_pulse_2fcdm_2fbind_2fTestReport_2eproto.base,
  &scc_info_TestSuiteData_pulse_2fcdm_2fbind_2fTestReport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fTestReport_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fTestReport_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcdm_2fbind_2fTestReport_2eproto, "pulse/cdm/bind/TestReport.proto", 915,
  &descriptor_table_pulse_2fcdm_2fbind_2fTestReport_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fTestReport_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fTestReport_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fTestReport_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fTestReport_2eproto, 4, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fTestReport_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fTestReport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fTestReport_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fTestReport_2eproto)), true);
namespace pulse {
namespace cdm {
namespace bind {

// ===================================================================

class TestErrorStatisticsData::_Internal {
 public:
  static const ::pulse::cdm::bind::FunctionData& percenttolerancevsnumerrors(const TestErrorStatisticsData* msg);
};

const ::pulse::cdm::bind::FunctionData&
TestErrorStatisticsData::_Internal::percenttolerancevsnumerrors(const TestErrorStatisticsData* msg) {
  return *msg->percenttolerancevsnumerrors_;
}
void TestErrorStatisticsData::clear_percenttolerancevsnumerrors() {
  if (GetArena() == nullptr && percenttolerancevsnumerrors_ != nullptr) {
    delete percenttolerancevsnumerrors_;
  }
  percenttolerancevsnumerrors_ = nullptr;
}
TestErrorStatisticsData::TestErrorStatisticsData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  differences_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.TestErrorStatisticsData)
}
TestErrorStatisticsData::TestErrorStatisticsData(const TestErrorStatisticsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      differences_(from.differences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  propertyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_propertyname().empty()) {
    propertyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_propertyname(), 
      GetArena());
  }
  computedpropertyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_computedpropertyid().empty()) {
    computedpropertyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_computedpropertyid(), 
      GetArena());
  }
  expectedpropertyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_expectedpropertyid().empty()) {
    expectedpropertyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_expectedpropertyid(), 
      GetArena());
  }
  if (from._internal_has_percenttolerancevsnumerrors()) {
    percenttolerancevsnumerrors_ = new ::pulse::cdm::bind::FunctionData(*from.percenttolerancevsnumerrors_);
  } else {
    percenttolerancevsnumerrors_ = nullptr;
  }
  ::memcpy(&percenttolerance_, &from.percenttolerance_,
    static_cast<size_t>(reinterpret_cast<char*>(&numberoferrors_) -
    reinterpret_cast<char*>(&percenttolerance_)) + sizeof(numberoferrors_));
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.TestErrorStatisticsData)
}

void TestErrorStatisticsData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestErrorStatisticsData_pulse_2fcdm_2fbind_2fTestReport_2eproto.base);
  propertyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  computedpropertyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expectedpropertyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&percenttolerancevsnumerrors_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&numberoferrors_) -
      reinterpret_cast<char*>(&percenttolerancevsnumerrors_)) + sizeof(numberoferrors_));
}

TestErrorStatisticsData::~TestErrorStatisticsData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.TestErrorStatisticsData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestErrorStatisticsData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  propertyname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  computedpropertyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expectedpropertyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete percenttolerancevsnumerrors_;
}

void TestErrorStatisticsData::ArenaDtor(void* object) {
  TestErrorStatisticsData* _this = reinterpret_cast< TestErrorStatisticsData* >(object);
  (void)_this;
}
void TestErrorStatisticsData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestErrorStatisticsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestErrorStatisticsData& TestErrorStatisticsData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestErrorStatisticsData_pulse_2fcdm_2fbind_2fTestReport_2eproto.base);
  return *internal_default_instance();
}


void TestErrorStatisticsData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.TestErrorStatisticsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  differences_.Clear();
  propertyname_.ClearToEmpty();
  computedpropertyid_.ClearToEmpty();
  expectedpropertyid_.ClearToEmpty();
  if (GetArena() == nullptr && percenttolerancevsnumerrors_ != nullptr) {
    delete percenttolerancevsnumerrors_;
  }
  percenttolerancevsnumerrors_ = nullptr;
  ::memset(&percenttolerance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numberoferrors_) -
      reinterpret_cast<char*>(&percenttolerance_)) + sizeof(numberoferrors_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestErrorStatisticsData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string PropertyName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_propertyname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.TestErrorStatisticsData.PropertyName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double PercentTolerance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          percenttolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 NumberOfErrors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          numberoferrors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ComputedPropertyID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_computedpropertyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.TestErrorStatisticsData.ComputedPropertyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ExpectedPropertyID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_expectedpropertyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.TestErrorStatisticsData.ExpectedPropertyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double MinimumError = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          minimumerror_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double MaximumError = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          maximumerror_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double AverageError = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          averageerror_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double StandardDeviation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          standarddeviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.FunctionData PercentToleranceVsNumErrors = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_percenttolerancevsnumerrors(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string Differences = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_differences();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.TestErrorStatisticsData.Differences"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestErrorStatisticsData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.TestErrorStatisticsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string PropertyName = 1;
  if (this->propertyname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_propertyname().data(), static_cast<int>(this->_internal_propertyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.TestErrorStatisticsData.PropertyName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_propertyname(), target);
  }

  // double PercentTolerance = 2;
  if (!(this->percenttolerance() <= 0 && this->percenttolerance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_percenttolerance(), target);
  }

  // uint32 NumberOfErrors = 3;
  if (this->numberoferrors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_numberoferrors(), target);
  }

  // string ComputedPropertyID = 4;
  if (this->computedpropertyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_computedpropertyid().data(), static_cast<int>(this->_internal_computedpropertyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.TestErrorStatisticsData.ComputedPropertyID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_computedpropertyid(), target);
  }

  // string ExpectedPropertyID = 5;
  if (this->expectedpropertyid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expectedpropertyid().data(), static_cast<int>(this->_internal_expectedpropertyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.TestErrorStatisticsData.ExpectedPropertyID");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_expectedpropertyid(), target);
  }

  // double MinimumError = 6;
  if (!(this->minimumerror() <= 0 && this->minimumerror() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_minimumerror(), target);
  }

  // double MaximumError = 7;
  if (!(this->maximumerror() <= 0 && this->maximumerror() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_maximumerror(), target);
  }

  // double AverageError = 8;
  if (!(this->averageerror() <= 0 && this->averageerror() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_averageerror(), target);
  }

  // double StandardDeviation = 9;
  if (!(this->standarddeviation() <= 0 && this->standarddeviation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_standarddeviation(), target);
  }

  // .pulse.cdm.bind.FunctionData PercentToleranceVsNumErrors = 10;
  if (this->has_percenttolerancevsnumerrors()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::percenttolerancevsnumerrors(this), target, stream);
  }

  // repeated string Differences = 11;
  for (int i = 0, n = this->_internal_differences_size(); i < n; i++) {
    const auto& s = this->_internal_differences(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.TestErrorStatisticsData.Differences");
    target = stream->WriteString(11, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.TestErrorStatisticsData)
  return target;
}

size_t TestErrorStatisticsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.TestErrorStatisticsData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Differences = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(differences_.size());
  for (int i = 0, n = differences_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      differences_.Get(i));
  }

  // string PropertyName = 1;
  if (this->propertyname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_propertyname());
  }

  // string ComputedPropertyID = 4;
  if (this->computedpropertyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_computedpropertyid());
  }

  // string ExpectedPropertyID = 5;
  if (this->expectedpropertyid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expectedpropertyid());
  }

  // .pulse.cdm.bind.FunctionData PercentToleranceVsNumErrors = 10;
  if (this->has_percenttolerancevsnumerrors()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *percenttolerancevsnumerrors_);
  }

  // double PercentTolerance = 2;
  if (!(this->percenttolerance() <= 0 && this->percenttolerance() >= 0)) {
    total_size += 1 + 8;
  }

  // double MinimumError = 6;
  if (!(this->minimumerror() <= 0 && this->minimumerror() >= 0)) {
    total_size += 1 + 8;
  }

  // double MaximumError = 7;
  if (!(this->maximumerror() <= 0 && this->maximumerror() >= 0)) {
    total_size += 1 + 8;
  }

  // double AverageError = 8;
  if (!(this->averageerror() <= 0 && this->averageerror() >= 0)) {
    total_size += 1 + 8;
  }

  // double StandardDeviation = 9;
  if (!(this->standarddeviation() <= 0 && this->standarddeviation() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 NumberOfErrors = 3;
  if (this->numberoferrors() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numberoferrors());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestErrorStatisticsData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.TestErrorStatisticsData)
  GOOGLE_DCHECK_NE(&from, this);
  const TestErrorStatisticsData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestErrorStatisticsData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.TestErrorStatisticsData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.TestErrorStatisticsData)
    MergeFrom(*source);
  }
}

void TestErrorStatisticsData::MergeFrom(const TestErrorStatisticsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.TestErrorStatisticsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  differences_.MergeFrom(from.differences_);
  if (from.propertyname().size() > 0) {
    _internal_set_propertyname(from._internal_propertyname());
  }
  if (from.computedpropertyid().size() > 0) {
    _internal_set_computedpropertyid(from._internal_computedpropertyid());
  }
  if (from.expectedpropertyid().size() > 0) {
    _internal_set_expectedpropertyid(from._internal_expectedpropertyid());
  }
  if (from.has_percenttolerancevsnumerrors()) {
    _internal_mutable_percenttolerancevsnumerrors()->::pulse::cdm::bind::FunctionData::MergeFrom(from._internal_percenttolerancevsnumerrors());
  }
  if (!(from.percenttolerance() <= 0 && from.percenttolerance() >= 0)) {
    _internal_set_percenttolerance(from._internal_percenttolerance());
  }
  if (!(from.minimumerror() <= 0 && from.minimumerror() >= 0)) {
    _internal_set_minimumerror(from._internal_minimumerror());
  }
  if (!(from.maximumerror() <= 0 && from.maximumerror() >= 0)) {
    _internal_set_maximumerror(from._internal_maximumerror());
  }
  if (!(from.averageerror() <= 0 && from.averageerror() >= 0)) {
    _internal_set_averageerror(from._internal_averageerror());
  }
  if (!(from.standarddeviation() <= 0 && from.standarddeviation() >= 0)) {
    _internal_set_standarddeviation(from._internal_standarddeviation());
  }
  if (from.numberoferrors() != 0) {
    _internal_set_numberoferrors(from._internal_numberoferrors());
  }
}

void TestErrorStatisticsData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.TestErrorStatisticsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestErrorStatisticsData::CopyFrom(const TestErrorStatisticsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.TestErrorStatisticsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestErrorStatisticsData::IsInitialized() const {
  return true;
}

void TestErrorStatisticsData::InternalSwap(TestErrorStatisticsData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  differences_.InternalSwap(&other->differences_);
  propertyname_.Swap(&other->propertyname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  computedpropertyid_.Swap(&other->computedpropertyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  expectedpropertyid_.Swap(&other->expectedpropertyid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestErrorStatisticsData, numberoferrors_)
      + sizeof(TestErrorStatisticsData::numberoferrors_)
      - PROTOBUF_FIELD_OFFSET(TestErrorStatisticsData, percenttolerancevsnumerrors_)>(
          reinterpret_cast<char*>(&percenttolerancevsnumerrors_),
          reinterpret_cast<char*>(&other->percenttolerancevsnumerrors_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestErrorStatisticsData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TestCaseData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarTimeData& duration(const TestCaseData* msg);
};

const ::pulse::cdm::bind::ScalarTimeData&
TestCaseData::_Internal::duration(const TestCaseData* msg) {
  return *msg->duration_;
}
void TestCaseData::clear_duration() {
  if (GetArena() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
TestCaseData::TestCaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  failure_(arena),
  errorstats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.TestCaseData)
}
TestCaseData::TestCaseData(const TestCaseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      failure_(from.failure_),
      errorstats_(from.errorstats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_duration()) {
    duration_ = new ::pulse::cdm::bind::ScalarTimeData(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.TestCaseData)
}

void TestCaseData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestCaseData_pulse_2fcdm_2fbind_2fTestReport_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  duration_ = nullptr;
}

TestCaseData::~TestCaseData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.TestCaseData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestCaseData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete duration_;
}

void TestCaseData::ArenaDtor(void* object) {
  TestCaseData* _this = reinterpret_cast< TestCaseData* >(object);
  (void)_this;
}
void TestCaseData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestCaseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestCaseData& TestCaseData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestCaseData_pulse_2fcdm_2fbind_2fTestReport_2eproto.base);
  return *internal_default_instance();
}


void TestCaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.TestCaseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  failure_.Clear();
  errorstats_.Clear();
  name_.ClearToEmpty();
  if (GetArena() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestCaseData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.TestCaseData.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData Duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string Failure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_failure();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.TestCaseData.Failure"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.TestErrorStatisticsData ErrorStats = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_errorstats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestCaseData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.TestCaseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.TestCaseData.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .pulse.cdm.bind.ScalarTimeData Duration = 2;
  if (this->has_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::duration(this), target, stream);
  }

  // repeated string Failure = 3;
  for (int i = 0, n = this->_internal_failure_size(); i < n; i++) {
    const auto& s = this->_internal_failure(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.TestCaseData.Failure");
    target = stream->WriteString(3, s, target);
  }

  // repeated .pulse.cdm.bind.TestErrorStatisticsData ErrorStats = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_errorstats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_errorstats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.TestCaseData)
  return target;
}

size_t TestCaseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.TestCaseData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Failure = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(failure_.size());
  for (int i = 0, n = failure_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      failure_.Get(i));
  }

  // repeated .pulse.cdm.bind.TestErrorStatisticsData ErrorStats = 4;
  total_size += 1UL * this->_internal_errorstats_size();
  for (const auto& msg : this->errorstats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .pulse.cdm.bind.ScalarTimeData Duration = 2;
  if (this->has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestCaseData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.TestCaseData)
  GOOGLE_DCHECK_NE(&from, this);
  const TestCaseData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestCaseData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.TestCaseData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.TestCaseData)
    MergeFrom(*source);
  }
}

void TestCaseData::MergeFrom(const TestCaseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.TestCaseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  failure_.MergeFrom(from.failure_);
  errorstats_.MergeFrom(from.errorstats_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_duration()) {
    _internal_mutable_duration()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_duration());
  }
}

void TestCaseData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.TestCaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestCaseData::CopyFrom(const TestCaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.TestCaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestCaseData::IsInitialized() const {
  return true;
}

void TestCaseData::InternalSwap(TestCaseData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  failure_.InternalSwap(&other->failure_);
  errorstats_.InternalSwap(&other->errorstats_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestCaseData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TestSuiteData::_Internal {
 public:
};

TestSuiteData::TestSuiteData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requirement_(arena),
  errorstats_(arena),
  testcase_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.TestSuiteData)
}
TestSuiteData::TestSuiteData(const TestSuiteData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requirement_(from.requirement_),
      errorstats_(from.errorstats_),
      testcase_(from.testcase_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&performed_, &from.performed_,
    static_cast<size_t>(reinterpret_cast<char*>(&tests_) -
    reinterpret_cast<char*>(&performed_)) + sizeof(tests_));
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.TestSuiteData)
}

void TestSuiteData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestSuiteData_pulse_2fcdm_2fbind_2fTestReport_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&performed_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tests_) -
      reinterpret_cast<char*>(&performed_)) + sizeof(tests_));
}

TestSuiteData::~TestSuiteData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.TestSuiteData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestSuiteData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestSuiteData::ArenaDtor(void* object) {
  TestSuiteData* _this = reinterpret_cast< TestSuiteData* >(object);
  (void)_this;
}
void TestSuiteData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestSuiteData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestSuiteData& TestSuiteData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestSuiteData_pulse_2fcdm_2fbind_2fTestReport_2eproto.base);
  return *internal_default_instance();
}


void TestSuiteData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.TestSuiteData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requirement_.Clear();
  errorstats_.Clear();
  testcase_.Clear();
  name_.ClearToEmpty();
  ::memset(&performed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tests_) -
      reinterpret_cast<char*>(&performed_)) + sizeof(tests_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestSuiteData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.TestSuiteData.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Performed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          performed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Errors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Tests = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tests_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string Requirement = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_requirement();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.TestSuiteData.Requirement"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.TestErrorStatisticsData ErrorStats = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_errorstats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.TestCaseData TestCase = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_testcase(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestSuiteData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.TestSuiteData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.TestSuiteData.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool Performed = 2;
  if (this->performed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_performed(), target);
  }

  // uint32 Errors = 3;
  if (this->errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_errors(), target);
  }

  // uint32 Tests = 4;
  if (this->tests() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tests(), target);
  }

  // repeated string Requirement = 5;
  for (int i = 0, n = this->_internal_requirement_size(); i < n; i++) {
    const auto& s = this->_internal_requirement(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.TestSuiteData.Requirement");
    target = stream->WriteString(5, s, target);
  }

  // repeated .pulse.cdm.bind.TestErrorStatisticsData ErrorStats = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_errorstats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_errorstats(i), target, stream);
  }

  // repeated .pulse.cdm.bind.TestCaseData TestCase = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_testcase_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_testcase(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.TestSuiteData)
  return target;
}

size_t TestSuiteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.TestSuiteData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Requirement = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(requirement_.size());
  for (int i = 0, n = requirement_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      requirement_.Get(i));
  }

  // repeated .pulse.cdm.bind.TestErrorStatisticsData ErrorStats = 6;
  total_size += 1UL * this->_internal_errorstats_size();
  for (const auto& msg : this->errorstats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pulse.cdm.bind.TestCaseData TestCase = 7;
  total_size += 1UL * this->_internal_testcase_size();
  for (const auto& msg : this->testcase_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool Performed = 2;
  if (this->performed() != 0) {
    total_size += 1 + 1;
  }

  // uint32 Errors = 3;
  if (this->errors() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errors());
  }

  // uint32 Tests = 4;
  if (this->tests() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tests());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestSuiteData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.TestSuiteData)
  GOOGLE_DCHECK_NE(&from, this);
  const TestSuiteData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestSuiteData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.TestSuiteData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.TestSuiteData)
    MergeFrom(*source);
  }
}

void TestSuiteData::MergeFrom(const TestSuiteData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.TestSuiteData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requirement_.MergeFrom(from.requirement_);
  errorstats_.MergeFrom(from.errorstats_);
  testcase_.MergeFrom(from.testcase_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.performed() != 0) {
    _internal_set_performed(from._internal_performed());
  }
  if (from.errors() != 0) {
    _internal_set_errors(from._internal_errors());
  }
  if (from.tests() != 0) {
    _internal_set_tests(from._internal_tests());
  }
}

void TestSuiteData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.TestSuiteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestSuiteData::CopyFrom(const TestSuiteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.TestSuiteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestSuiteData::IsInitialized() const {
  return true;
}

void TestSuiteData::InternalSwap(TestSuiteData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requirement_.InternalSwap(&other->requirement_);
  errorstats_.InternalSwap(&other->errorstats_);
  testcase_.InternalSwap(&other->testcase_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestSuiteData, tests_)
      + sizeof(TestSuiteData::tests_)
      - PROTOBUF_FIELD_OFFSET(TestSuiteData, performed_)>(
          reinterpret_cast<char*>(&performed_),
          reinterpret_cast<char*>(&other->performed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestSuiteData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TestReportData::_Internal {
 public:
};

TestReportData::TestReportData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  testsuite_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.TestReportData)
}
TestReportData::TestReportData(const TestReportData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      testsuite_(from.testsuite_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.TestReportData)
}

void TestReportData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestReportData_pulse_2fcdm_2fbind_2fTestReport_2eproto.base);
}

TestReportData::~TestReportData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.TestReportData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestReportData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestReportData::ArenaDtor(void* object) {
  TestReportData* _this = reinterpret_cast< TestReportData* >(object);
  (void)_this;
}
void TestReportData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestReportData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestReportData& TestReportData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestReportData_pulse_2fcdm_2fbind_2fTestReport_2eproto.base);
  return *internal_default_instance();
}


void TestReportData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.TestReportData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  testsuite_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestReportData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pulse.cdm.bind.TestSuiteData TestSuite = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_testsuite(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestReportData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.TestReportData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.TestSuiteData TestSuite = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_testsuite_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_testsuite(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.TestReportData)
  return target;
}

size_t TestReportData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.TestReportData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.TestSuiteData TestSuite = 1;
  total_size += 1UL * this->_internal_testsuite_size();
  for (const auto& msg : this->testsuite_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestReportData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.TestReportData)
  GOOGLE_DCHECK_NE(&from, this);
  const TestReportData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestReportData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.TestReportData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.TestReportData)
    MergeFrom(*source);
  }
}

void TestReportData::MergeFrom(const TestReportData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.TestReportData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  testsuite_.MergeFrom(from.testsuite_);
}

void TestReportData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.TestReportData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestReportData::CopyFrom(const TestReportData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.TestReportData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestReportData::IsInitialized() const {
  return true;
}

void TestReportData::InternalSwap(TestReportData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  testsuite_.InternalSwap(&other->testsuite_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestReportData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::TestErrorStatisticsData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::TestErrorStatisticsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::TestErrorStatisticsData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::TestCaseData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::TestCaseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::TestCaseData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::TestSuiteData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::TestSuiteData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::TestSuiteData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::TestReportData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::TestReportData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::TestReportData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
