// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/PatientAssessments.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Properties.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class CompleteBloodCountData;
class CompleteBloodCountDataDefaultTypeInternal;
extern CompleteBloodCountDataDefaultTypeInternal _CompleteBloodCountData_default_instance_;
class ComprehensiveMetabolicPanelData;
class ComprehensiveMetabolicPanelDataDefaultTypeInternal;
extern ComprehensiveMetabolicPanelDataDefaultTypeInternal _ComprehensiveMetabolicPanelData_default_instance_;
class PatientAssessmentData;
class PatientAssessmentDataDefaultTypeInternal;
extern PatientAssessmentDataDefaultTypeInternal _PatientAssessmentData_default_instance_;
class PulmonaryFunctionTestData;
class PulmonaryFunctionTestDataDefaultTypeInternal;
extern PulmonaryFunctionTestDataDefaultTypeInternal _PulmonaryFunctionTestData_default_instance_;
class UrinalysisData;
class UrinalysisDataDefaultTypeInternal;
extern UrinalysisDataDefaultTypeInternal _UrinalysisData_default_instance_;
class UrinalysisMicroscopicData;
class UrinalysisMicroscopicDataDefaultTypeInternal;
extern UrinalysisMicroscopicDataDefaultTypeInternal _UrinalysisMicroscopicData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::CompleteBloodCountData* Arena::CreateMaybeMessage<::pulse::cdm::bind::CompleteBloodCountData>(Arena*);
template<> ::pulse::cdm::bind::ComprehensiveMetabolicPanelData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ComprehensiveMetabolicPanelData>(Arena*);
template<> ::pulse::cdm::bind::PatientAssessmentData* Arena::CreateMaybeMessage<::pulse::cdm::bind::PatientAssessmentData>(Arena*);
template<> ::pulse::cdm::bind::PulmonaryFunctionTestData* Arena::CreateMaybeMessage<::pulse::cdm::bind::PulmonaryFunctionTestData>(Arena*);
template<> ::pulse::cdm::bind::UrinalysisData* Arena::CreateMaybeMessage<::pulse::cdm::bind::UrinalysisData>(Arena*);
template<> ::pulse::cdm::bind::UrinalysisMicroscopicData* Arena::CreateMaybeMessage<::pulse::cdm::bind::UrinalysisMicroscopicData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

enum UrinalysisMicroscopicData_eObservationType : int {
  UrinalysisMicroscopicData_eObservationType_NullObservationType = 0,
  UrinalysisMicroscopicData_eObservationType_LowPowerField = 1,
  UrinalysisMicroscopicData_eObservationType_HighPowerField = 2,
  UrinalysisMicroscopicData_eObservationType_UrinalysisMicroscopicData_eObservationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UrinalysisMicroscopicData_eObservationType_UrinalysisMicroscopicData_eObservationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UrinalysisMicroscopicData_eObservationType_IsValid(int value);
constexpr UrinalysisMicroscopicData_eObservationType UrinalysisMicroscopicData_eObservationType_eObservationType_MIN = UrinalysisMicroscopicData_eObservationType_NullObservationType;
constexpr UrinalysisMicroscopicData_eObservationType UrinalysisMicroscopicData_eObservationType_eObservationType_MAX = UrinalysisMicroscopicData_eObservationType_HighPowerField;
constexpr int UrinalysisMicroscopicData_eObservationType_eObservationType_ARRAYSIZE = UrinalysisMicroscopicData_eObservationType_eObservationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UrinalysisMicroscopicData_eObservationType_descriptor();
template<typename T>
inline const std::string& UrinalysisMicroscopicData_eObservationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UrinalysisMicroscopicData_eObservationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UrinalysisMicroscopicData_eObservationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UrinalysisMicroscopicData_eObservationType_descriptor(), enum_t_value);
}
inline bool UrinalysisMicroscopicData_eObservationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UrinalysisMicroscopicData_eObservationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UrinalysisMicroscopicData_eObservationType>(
    UrinalysisMicroscopicData_eObservationType_descriptor(), name, value);
}
enum UrinalysisMicroscopicData_eObservationAmount : int {
  UrinalysisMicroscopicData_eObservationAmount_NullObservationAmount = 0,
  UrinalysisMicroscopicData_eObservationAmount_Few = 1,
  UrinalysisMicroscopicData_eObservationAmount_Moderate = 2,
  UrinalysisMicroscopicData_eObservationAmount_Many = 3,
  UrinalysisMicroscopicData_eObservationAmount_UrinalysisMicroscopicData_eObservationAmount_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UrinalysisMicroscopicData_eObservationAmount_UrinalysisMicroscopicData_eObservationAmount_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UrinalysisMicroscopicData_eObservationAmount_IsValid(int value);
constexpr UrinalysisMicroscopicData_eObservationAmount UrinalysisMicroscopicData_eObservationAmount_eObservationAmount_MIN = UrinalysisMicroscopicData_eObservationAmount_NullObservationAmount;
constexpr UrinalysisMicroscopicData_eObservationAmount UrinalysisMicroscopicData_eObservationAmount_eObservationAmount_MAX = UrinalysisMicroscopicData_eObservationAmount_Many;
constexpr int UrinalysisMicroscopicData_eObservationAmount_eObservationAmount_ARRAYSIZE = UrinalysisMicroscopicData_eObservationAmount_eObservationAmount_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UrinalysisMicroscopicData_eObservationAmount_descriptor();
template<typename T>
inline const std::string& UrinalysisMicroscopicData_eObservationAmount_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UrinalysisMicroscopicData_eObservationAmount>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UrinalysisMicroscopicData_eObservationAmount_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UrinalysisMicroscopicData_eObservationAmount_descriptor(), enum_t_value);
}
inline bool UrinalysisMicroscopicData_eObservationAmount_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UrinalysisMicroscopicData_eObservationAmount* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UrinalysisMicroscopicData_eObservationAmount>(
    UrinalysisMicroscopicData_eObservationAmount_descriptor(), name, value);
}
enum UrinalysisData_ePresenceIndicator : int {
  UrinalysisData_ePresenceIndicator_NullPresence = 0,
  UrinalysisData_ePresenceIndicator_Positive = 1,
  UrinalysisData_ePresenceIndicator_Negative = 2,
  UrinalysisData_ePresenceIndicator_UrinalysisData_ePresenceIndicator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UrinalysisData_ePresenceIndicator_UrinalysisData_ePresenceIndicator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UrinalysisData_ePresenceIndicator_IsValid(int value);
constexpr UrinalysisData_ePresenceIndicator UrinalysisData_ePresenceIndicator_ePresenceIndicator_MIN = UrinalysisData_ePresenceIndicator_NullPresence;
constexpr UrinalysisData_ePresenceIndicator UrinalysisData_ePresenceIndicator_ePresenceIndicator_MAX = UrinalysisData_ePresenceIndicator_Negative;
constexpr int UrinalysisData_ePresenceIndicator_ePresenceIndicator_ARRAYSIZE = UrinalysisData_ePresenceIndicator_ePresenceIndicator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UrinalysisData_ePresenceIndicator_descriptor();
template<typename T>
inline const std::string& UrinalysisData_ePresenceIndicator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UrinalysisData_ePresenceIndicator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UrinalysisData_ePresenceIndicator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UrinalysisData_ePresenceIndicator_descriptor(), enum_t_value);
}
inline bool UrinalysisData_ePresenceIndicator_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UrinalysisData_ePresenceIndicator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UrinalysisData_ePresenceIndicator>(
    UrinalysisData_ePresenceIndicator_descriptor(), name, value);
}
enum UrinalysisData_eClarityIndicator : int {
  UrinalysisData_eClarityIndicator_NullClarity = 0,
  UrinalysisData_eClarityIndicator_Translucent = 1,
  UrinalysisData_eClarityIndicator_SlightlyCloudy = 2,
  UrinalysisData_eClarityIndicator_Cloudy = 3,
  UrinalysisData_eClarityIndicator_Turbid = 4,
  UrinalysisData_eClarityIndicator_UrinalysisData_eClarityIndicator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UrinalysisData_eClarityIndicator_UrinalysisData_eClarityIndicator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UrinalysisData_eClarityIndicator_IsValid(int value);
constexpr UrinalysisData_eClarityIndicator UrinalysisData_eClarityIndicator_eClarityIndicator_MIN = UrinalysisData_eClarityIndicator_NullClarity;
constexpr UrinalysisData_eClarityIndicator UrinalysisData_eClarityIndicator_eClarityIndicator_MAX = UrinalysisData_eClarityIndicator_Turbid;
constexpr int UrinalysisData_eClarityIndicator_eClarityIndicator_ARRAYSIZE = UrinalysisData_eClarityIndicator_eClarityIndicator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UrinalysisData_eClarityIndicator_descriptor();
template<typename T>
inline const std::string& UrinalysisData_eClarityIndicator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UrinalysisData_eClarityIndicator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UrinalysisData_eClarityIndicator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UrinalysisData_eClarityIndicator_descriptor(), enum_t_value);
}
inline bool UrinalysisData_eClarityIndicator_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UrinalysisData_eClarityIndicator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UrinalysisData_eClarityIndicator>(
    UrinalysisData_eClarityIndicator_descriptor(), name, value);
}
enum UrinalysisData_eUrineColor : int {
  UrinalysisData_eUrineColor_NullColor = 0,
  UrinalysisData_eUrineColor_PaleYellow = 1,
  UrinalysisData_eUrineColor_Yellow = 2,
  UrinalysisData_eUrineColor_DarkYellow = 3,
  UrinalysisData_eUrineColor_UrinalysisData_eUrineColor_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UrinalysisData_eUrineColor_UrinalysisData_eUrineColor_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UrinalysisData_eUrineColor_IsValid(int value);
constexpr UrinalysisData_eUrineColor UrinalysisData_eUrineColor_eUrineColor_MIN = UrinalysisData_eUrineColor_NullColor;
constexpr UrinalysisData_eUrineColor UrinalysisData_eUrineColor_eUrineColor_MAX = UrinalysisData_eUrineColor_DarkYellow;
constexpr int UrinalysisData_eUrineColor_eUrineColor_ARRAYSIZE = UrinalysisData_eUrineColor_eUrineColor_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UrinalysisData_eUrineColor_descriptor();
template<typename T>
inline const std::string& UrinalysisData_eUrineColor_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UrinalysisData_eUrineColor>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UrinalysisData_eUrineColor_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UrinalysisData_eUrineColor_descriptor(), enum_t_value);
}
inline bool UrinalysisData_eUrineColor_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UrinalysisData_eUrineColor* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UrinalysisData_eUrineColor>(
    UrinalysisData_eUrineColor_descriptor(), name, value);
}
enum ePatientAssessmentType : int {
  CompleteBloodCount = 0,
  ComprehensiveMetabolicPanel = 1,
  PulmonaryFunctionTest = 2,
  Urinalysis = 3,
  ePatientAssessmentType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ePatientAssessmentType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ePatientAssessmentType_IsValid(int value);
constexpr ePatientAssessmentType ePatientAssessmentType_MIN = CompleteBloodCount;
constexpr ePatientAssessmentType ePatientAssessmentType_MAX = Urinalysis;
constexpr int ePatientAssessmentType_ARRAYSIZE = ePatientAssessmentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ePatientAssessmentType_descriptor();
template<typename T>
inline const std::string& ePatientAssessmentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ePatientAssessmentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ePatientAssessmentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ePatientAssessmentType_descriptor(), enum_t_value);
}
inline bool ePatientAssessmentType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ePatientAssessmentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ePatientAssessmentType>(
    ePatientAssessmentType_descriptor(), name, value);
}
// ===================================================================

class PatientAssessmentData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.PatientAssessmentData) */ {
 public:
  inline PatientAssessmentData() : PatientAssessmentData(nullptr) {}
  virtual ~PatientAssessmentData();

  PatientAssessmentData(const PatientAssessmentData& from);
  PatientAssessmentData(PatientAssessmentData&& from) noexcept
    : PatientAssessmentData() {
    *this = ::std::move(from);
  }

  inline PatientAssessmentData& operator=(const PatientAssessmentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatientAssessmentData& operator=(PatientAssessmentData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatientAssessmentData& default_instance();

  static inline const PatientAssessmentData* internal_default_instance() {
    return reinterpret_cast<const PatientAssessmentData*>(
               &_PatientAssessmentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PatientAssessmentData& a, PatientAssessmentData& b) {
    a.Swap(&b);
  }
  inline void Swap(PatientAssessmentData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatientAssessmentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatientAssessmentData* New() const final {
    return CreateMaybeMessage<PatientAssessmentData>(nullptr);
  }

  PatientAssessmentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatientAssessmentData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatientAssessmentData& from);
  void MergeFrom(const PatientAssessmentData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientAssessmentData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.PatientAssessmentData";
  }
  protected:
  explicit PatientAssessmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.PatientAssessmentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto;
};
// -------------------------------------------------------------------

class PulmonaryFunctionTestData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.PulmonaryFunctionTestData) */ {
 public:
  inline PulmonaryFunctionTestData() : PulmonaryFunctionTestData(nullptr) {}
  virtual ~PulmonaryFunctionTestData();

  PulmonaryFunctionTestData(const PulmonaryFunctionTestData& from);
  PulmonaryFunctionTestData(PulmonaryFunctionTestData&& from) noexcept
    : PulmonaryFunctionTestData() {
    *this = ::std::move(from);
  }

  inline PulmonaryFunctionTestData& operator=(const PulmonaryFunctionTestData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PulmonaryFunctionTestData& operator=(PulmonaryFunctionTestData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PulmonaryFunctionTestData& default_instance();

  static inline const PulmonaryFunctionTestData* internal_default_instance() {
    return reinterpret_cast<const PulmonaryFunctionTestData*>(
               &_PulmonaryFunctionTestData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PulmonaryFunctionTestData& a, PulmonaryFunctionTestData& b) {
    a.Swap(&b);
  }
  inline void Swap(PulmonaryFunctionTestData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PulmonaryFunctionTestData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PulmonaryFunctionTestData* New() const final {
    return CreateMaybeMessage<PulmonaryFunctionTestData>(nullptr);
  }

  PulmonaryFunctionTestData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PulmonaryFunctionTestData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PulmonaryFunctionTestData& from);
  void MergeFrom(const PulmonaryFunctionTestData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PulmonaryFunctionTestData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.PulmonaryFunctionTestData";
  }
  protected:
  explicit PulmonaryFunctionTestData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientAssessmentFieldNumber = 1,
    kExpiratoryReserveVolumeFieldNumber = 2,
    kForcedVitalCapacityFieldNumber = 3,
    kForcedExpiratoryVolumeFieldNumber = 4,
    kForcedExpiratoryFlowFieldNumber = 5,
    kFunctionalResidualCapacityFieldNumber = 6,
    kInspiratoryCapacityFieldNumber = 7,
    kInspiratoryReserveVolumeFieldNumber = 8,
    kMaximumVoluntaryVentilationFieldNumber = 9,
    kPeakExpiratoryFlowFieldNumber = 10,
    kResidualVolumeFieldNumber = 11,
    kSlowVitalCapacityFieldNumber = 12,
    kTotalLungCapacityFieldNumber = 13,
    kVitalCapacityFieldNumber = 14,
    kLungVolumePlotFieldNumber = 15,
  };
  // .pulse.cdm.bind.PatientAssessmentData PatientAssessment = 1;
  bool has_patientassessment() const;
  private:
  bool _internal_has_patientassessment() const;
  public:
  void clear_patientassessment();
  const ::pulse::cdm::bind::PatientAssessmentData& patientassessment() const;
  ::pulse::cdm::bind::PatientAssessmentData* release_patientassessment();
  ::pulse::cdm::bind::PatientAssessmentData* mutable_patientassessment();
  void set_allocated_patientassessment(::pulse::cdm::bind::PatientAssessmentData* patientassessment);
  private:
  const ::pulse::cdm::bind::PatientAssessmentData& _internal_patientassessment() const;
  ::pulse::cdm::bind::PatientAssessmentData* _internal_mutable_patientassessment();
  public:
  void unsafe_arena_set_allocated_patientassessment(
      ::pulse::cdm::bind::PatientAssessmentData* patientassessment);
  ::pulse::cdm::bind::PatientAssessmentData* unsafe_arena_release_patientassessment();

  // .pulse.cdm.bind.ScalarVolumeData ExpiratoryReserveVolume = 2;
  bool has_expiratoryreservevolume() const;
  private:
  bool _internal_has_expiratoryreservevolume() const;
  public:
  void clear_expiratoryreservevolume();
  const ::pulse::cdm::bind::ScalarVolumeData& expiratoryreservevolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_expiratoryreservevolume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_expiratoryreservevolume();
  void set_allocated_expiratoryreservevolume(::pulse::cdm::bind::ScalarVolumeData* expiratoryreservevolume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_expiratoryreservevolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_expiratoryreservevolume();
  public:
  void unsafe_arena_set_allocated_expiratoryreservevolume(
      ::pulse::cdm::bind::ScalarVolumeData* expiratoryreservevolume);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_expiratoryreservevolume();

  // .pulse.cdm.bind.ScalarVolumeData ForcedVitalCapacity = 3;
  bool has_forcedvitalcapacity() const;
  private:
  bool _internal_has_forcedvitalcapacity() const;
  public:
  void clear_forcedvitalcapacity();
  const ::pulse::cdm::bind::ScalarVolumeData& forcedvitalcapacity() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_forcedvitalcapacity();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_forcedvitalcapacity();
  void set_allocated_forcedvitalcapacity(::pulse::cdm::bind::ScalarVolumeData* forcedvitalcapacity);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_forcedvitalcapacity() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_forcedvitalcapacity();
  public:
  void unsafe_arena_set_allocated_forcedvitalcapacity(
      ::pulse::cdm::bind::ScalarVolumeData* forcedvitalcapacity);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_forcedvitalcapacity();

  // .pulse.cdm.bind.ScalarVolumeData ForcedExpiratoryVolume = 4;
  bool has_forcedexpiratoryvolume() const;
  private:
  bool _internal_has_forcedexpiratoryvolume() const;
  public:
  void clear_forcedexpiratoryvolume();
  const ::pulse::cdm::bind::ScalarVolumeData& forcedexpiratoryvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_forcedexpiratoryvolume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_forcedexpiratoryvolume();
  void set_allocated_forcedexpiratoryvolume(::pulse::cdm::bind::ScalarVolumeData* forcedexpiratoryvolume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_forcedexpiratoryvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_forcedexpiratoryvolume();
  public:
  void unsafe_arena_set_allocated_forcedexpiratoryvolume(
      ::pulse::cdm::bind::ScalarVolumeData* forcedexpiratoryvolume);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_forcedexpiratoryvolume();

  // .pulse.cdm.bind.ScalarVolumePerTimeData ForcedExpiratoryFlow = 5;
  bool has_forcedexpiratoryflow() const;
  private:
  bool _internal_has_forcedexpiratoryflow() const;
  public:
  void clear_forcedexpiratoryflow();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& forcedexpiratoryflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_forcedexpiratoryflow();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_forcedexpiratoryflow();
  void set_allocated_forcedexpiratoryflow(::pulse::cdm::bind::ScalarVolumePerTimeData* forcedexpiratoryflow);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_forcedexpiratoryflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_forcedexpiratoryflow();
  public:
  void unsafe_arena_set_allocated_forcedexpiratoryflow(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* forcedexpiratoryflow);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_forcedexpiratoryflow();

  // .pulse.cdm.bind.ScalarVolumeData FunctionalResidualCapacity = 6;
  bool has_functionalresidualcapacity() const;
  private:
  bool _internal_has_functionalresidualcapacity() const;
  public:
  void clear_functionalresidualcapacity();
  const ::pulse::cdm::bind::ScalarVolumeData& functionalresidualcapacity() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_functionalresidualcapacity();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_functionalresidualcapacity();
  void set_allocated_functionalresidualcapacity(::pulse::cdm::bind::ScalarVolumeData* functionalresidualcapacity);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_functionalresidualcapacity() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_functionalresidualcapacity();
  public:
  void unsafe_arena_set_allocated_functionalresidualcapacity(
      ::pulse::cdm::bind::ScalarVolumeData* functionalresidualcapacity);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_functionalresidualcapacity();

  // .pulse.cdm.bind.ScalarVolumeData InspiratoryCapacity = 7;
  bool has_inspiratorycapacity() const;
  private:
  bool _internal_has_inspiratorycapacity() const;
  public:
  void clear_inspiratorycapacity();
  const ::pulse::cdm::bind::ScalarVolumeData& inspiratorycapacity() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_inspiratorycapacity();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_inspiratorycapacity();
  void set_allocated_inspiratorycapacity(::pulse::cdm::bind::ScalarVolumeData* inspiratorycapacity);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_inspiratorycapacity() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_inspiratorycapacity();
  public:
  void unsafe_arena_set_allocated_inspiratorycapacity(
      ::pulse::cdm::bind::ScalarVolumeData* inspiratorycapacity);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_inspiratorycapacity();

  // .pulse.cdm.bind.ScalarVolumeData InspiratoryReserveVolume = 8;
  bool has_inspiratoryreservevolume() const;
  private:
  bool _internal_has_inspiratoryreservevolume() const;
  public:
  void clear_inspiratoryreservevolume();
  const ::pulse::cdm::bind::ScalarVolumeData& inspiratoryreservevolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_inspiratoryreservevolume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_inspiratoryreservevolume();
  void set_allocated_inspiratoryreservevolume(::pulse::cdm::bind::ScalarVolumeData* inspiratoryreservevolume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_inspiratoryreservevolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_inspiratoryreservevolume();
  public:
  void unsafe_arena_set_allocated_inspiratoryreservevolume(
      ::pulse::cdm::bind::ScalarVolumeData* inspiratoryreservevolume);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_inspiratoryreservevolume();

  // .pulse.cdm.bind.ScalarVolumeData MaximumVoluntaryVentilation = 9;
  bool has_maximumvoluntaryventilation() const;
  private:
  bool _internal_has_maximumvoluntaryventilation() const;
  public:
  void clear_maximumvoluntaryventilation();
  const ::pulse::cdm::bind::ScalarVolumeData& maximumvoluntaryventilation() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_maximumvoluntaryventilation();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_maximumvoluntaryventilation();
  void set_allocated_maximumvoluntaryventilation(::pulse::cdm::bind::ScalarVolumeData* maximumvoluntaryventilation);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_maximumvoluntaryventilation() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_maximumvoluntaryventilation();
  public:
  void unsafe_arena_set_allocated_maximumvoluntaryventilation(
      ::pulse::cdm::bind::ScalarVolumeData* maximumvoluntaryventilation);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_maximumvoluntaryventilation();

  // .pulse.cdm.bind.ScalarVolumePerTimeData PeakExpiratoryFlow = 10;
  bool has_peakexpiratoryflow() const;
  private:
  bool _internal_has_peakexpiratoryflow() const;
  public:
  void clear_peakexpiratoryflow();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& peakexpiratoryflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_peakexpiratoryflow();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_peakexpiratoryflow();
  void set_allocated_peakexpiratoryflow(::pulse::cdm::bind::ScalarVolumePerTimeData* peakexpiratoryflow);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_peakexpiratoryflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_peakexpiratoryflow();
  public:
  void unsafe_arena_set_allocated_peakexpiratoryflow(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* peakexpiratoryflow);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_peakexpiratoryflow();

  // .pulse.cdm.bind.ScalarVolumeData ResidualVolume = 11;
  bool has_residualvolume() const;
  private:
  bool _internal_has_residualvolume() const;
  public:
  void clear_residualvolume();
  const ::pulse::cdm::bind::ScalarVolumeData& residualvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_residualvolume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_residualvolume();
  void set_allocated_residualvolume(::pulse::cdm::bind::ScalarVolumeData* residualvolume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_residualvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_residualvolume();
  public:
  void unsafe_arena_set_allocated_residualvolume(
      ::pulse::cdm::bind::ScalarVolumeData* residualvolume);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_residualvolume();

  // .pulse.cdm.bind.ScalarVolumeData SlowVitalCapacity = 12;
  bool has_slowvitalcapacity() const;
  private:
  bool _internal_has_slowvitalcapacity() const;
  public:
  void clear_slowvitalcapacity();
  const ::pulse::cdm::bind::ScalarVolumeData& slowvitalcapacity() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_slowvitalcapacity();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_slowvitalcapacity();
  void set_allocated_slowvitalcapacity(::pulse::cdm::bind::ScalarVolumeData* slowvitalcapacity);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_slowvitalcapacity() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_slowvitalcapacity();
  public:
  void unsafe_arena_set_allocated_slowvitalcapacity(
      ::pulse::cdm::bind::ScalarVolumeData* slowvitalcapacity);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_slowvitalcapacity();

  // .pulse.cdm.bind.ScalarVolumeData TotalLungCapacity = 13;
  bool has_totallungcapacity() const;
  private:
  bool _internal_has_totallungcapacity() const;
  public:
  void clear_totallungcapacity();
  const ::pulse::cdm::bind::ScalarVolumeData& totallungcapacity() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_totallungcapacity();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_totallungcapacity();
  void set_allocated_totallungcapacity(::pulse::cdm::bind::ScalarVolumeData* totallungcapacity);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_totallungcapacity() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_totallungcapacity();
  public:
  void unsafe_arena_set_allocated_totallungcapacity(
      ::pulse::cdm::bind::ScalarVolumeData* totallungcapacity);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_totallungcapacity();

  // .pulse.cdm.bind.ScalarVolumeData VitalCapacity = 14;
  bool has_vitalcapacity() const;
  private:
  bool _internal_has_vitalcapacity() const;
  public:
  void clear_vitalcapacity();
  const ::pulse::cdm::bind::ScalarVolumeData& vitalcapacity() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_vitalcapacity();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_vitalcapacity();
  void set_allocated_vitalcapacity(::pulse::cdm::bind::ScalarVolumeData* vitalcapacity);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_vitalcapacity() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_vitalcapacity();
  public:
  void unsafe_arena_set_allocated_vitalcapacity(
      ::pulse::cdm::bind::ScalarVolumeData* vitalcapacity);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_vitalcapacity();

  // .pulse.cdm.bind.FunctionVolumeVsTimeData LungVolumePlot = 15;
  bool has_lungvolumeplot() const;
  private:
  bool _internal_has_lungvolumeplot() const;
  public:
  void clear_lungvolumeplot();
  const ::pulse::cdm::bind::FunctionVolumeVsTimeData& lungvolumeplot() const;
  ::pulse::cdm::bind::FunctionVolumeVsTimeData* release_lungvolumeplot();
  ::pulse::cdm::bind::FunctionVolumeVsTimeData* mutable_lungvolumeplot();
  void set_allocated_lungvolumeplot(::pulse::cdm::bind::FunctionVolumeVsTimeData* lungvolumeplot);
  private:
  const ::pulse::cdm::bind::FunctionVolumeVsTimeData& _internal_lungvolumeplot() const;
  ::pulse::cdm::bind::FunctionVolumeVsTimeData* _internal_mutable_lungvolumeplot();
  public:
  void unsafe_arena_set_allocated_lungvolumeplot(
      ::pulse::cdm::bind::FunctionVolumeVsTimeData* lungvolumeplot);
  ::pulse::cdm::bind::FunctionVolumeVsTimeData* unsafe_arena_release_lungvolumeplot();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.PulmonaryFunctionTestData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientAssessmentData* patientassessment_;
  ::pulse::cdm::bind::ScalarVolumeData* expiratoryreservevolume_;
  ::pulse::cdm::bind::ScalarVolumeData* forcedvitalcapacity_;
  ::pulse::cdm::bind::ScalarVolumeData* forcedexpiratoryvolume_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* forcedexpiratoryflow_;
  ::pulse::cdm::bind::ScalarVolumeData* functionalresidualcapacity_;
  ::pulse::cdm::bind::ScalarVolumeData* inspiratorycapacity_;
  ::pulse::cdm::bind::ScalarVolumeData* inspiratoryreservevolume_;
  ::pulse::cdm::bind::ScalarVolumeData* maximumvoluntaryventilation_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* peakexpiratoryflow_;
  ::pulse::cdm::bind::ScalarVolumeData* residualvolume_;
  ::pulse::cdm::bind::ScalarVolumeData* slowvitalcapacity_;
  ::pulse::cdm::bind::ScalarVolumeData* totallungcapacity_;
  ::pulse::cdm::bind::ScalarVolumeData* vitalcapacity_;
  ::pulse::cdm::bind::FunctionVolumeVsTimeData* lungvolumeplot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto;
};
// -------------------------------------------------------------------

class CompleteBloodCountData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.CompleteBloodCountData) */ {
 public:
  inline CompleteBloodCountData() : CompleteBloodCountData(nullptr) {}
  virtual ~CompleteBloodCountData();

  CompleteBloodCountData(const CompleteBloodCountData& from);
  CompleteBloodCountData(CompleteBloodCountData&& from) noexcept
    : CompleteBloodCountData() {
    *this = ::std::move(from);
  }

  inline CompleteBloodCountData& operator=(const CompleteBloodCountData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompleteBloodCountData& operator=(CompleteBloodCountData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompleteBloodCountData& default_instance();

  static inline const CompleteBloodCountData* internal_default_instance() {
    return reinterpret_cast<const CompleteBloodCountData*>(
               &_CompleteBloodCountData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CompleteBloodCountData& a, CompleteBloodCountData& b) {
    a.Swap(&b);
  }
  inline void Swap(CompleteBloodCountData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompleteBloodCountData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompleteBloodCountData* New() const final {
    return CreateMaybeMessage<CompleteBloodCountData>(nullptr);
  }

  CompleteBloodCountData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompleteBloodCountData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompleteBloodCountData& from);
  void MergeFrom(const CompleteBloodCountData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompleteBloodCountData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.CompleteBloodCountData";
  }
  protected:
  explicit CompleteBloodCountData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientAssessmentFieldNumber = 1,
    kHematocritFieldNumber = 2,
    kHemoglobinFieldNumber = 3,
    kPlateletCountFieldNumber = 4,
    kMeanCorpuscularHemoglobinFieldNumber = 5,
    kMeanCorpuscularHemoglobinConcentrationFieldNumber = 6,
    kMeanCorpuscularVolumeFieldNumber = 7,
    kRedBloodCellCountFieldNumber = 8,
    kWhiteBloodCellCountFieldNumber = 9,
  };
  // .pulse.cdm.bind.PatientAssessmentData PatientAssessment = 1;
  bool has_patientassessment() const;
  private:
  bool _internal_has_patientassessment() const;
  public:
  void clear_patientassessment();
  const ::pulse::cdm::bind::PatientAssessmentData& patientassessment() const;
  ::pulse::cdm::bind::PatientAssessmentData* release_patientassessment();
  ::pulse::cdm::bind::PatientAssessmentData* mutable_patientassessment();
  void set_allocated_patientassessment(::pulse::cdm::bind::PatientAssessmentData* patientassessment);
  private:
  const ::pulse::cdm::bind::PatientAssessmentData& _internal_patientassessment() const;
  ::pulse::cdm::bind::PatientAssessmentData* _internal_mutable_patientassessment();
  public:
  void unsafe_arena_set_allocated_patientassessment(
      ::pulse::cdm::bind::PatientAssessmentData* patientassessment);
  ::pulse::cdm::bind::PatientAssessmentData* unsafe_arena_release_patientassessment();

  // .pulse.cdm.bind.Scalar0To1Data Hematocrit = 2;
  bool has_hematocrit() const;
  private:
  bool _internal_has_hematocrit() const;
  public:
  void clear_hematocrit();
  const ::pulse::cdm::bind::Scalar0To1Data& hematocrit() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_hematocrit();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_hematocrit();
  void set_allocated_hematocrit(::pulse::cdm::bind::Scalar0To1Data* hematocrit);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_hematocrit() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_hematocrit();
  public:
  void unsafe_arena_set_allocated_hematocrit(
      ::pulse::cdm::bind::Scalar0To1Data* hematocrit);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_hematocrit();

  // .pulse.cdm.bind.ScalarMassPerVolumeData Hemoglobin = 3;
  bool has_hemoglobin() const;
  private:
  bool _internal_has_hemoglobin() const;
  public:
  void clear_hemoglobin();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& hemoglobin() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_hemoglobin();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_hemoglobin();
  void set_allocated_hemoglobin(::pulse::cdm::bind::ScalarMassPerVolumeData* hemoglobin);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_hemoglobin() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_hemoglobin();
  public:
  void unsafe_arena_set_allocated_hemoglobin(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* hemoglobin);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_hemoglobin();

  // .pulse.cdm.bind.ScalarAmountPerVolumeData PlateletCount = 4;
  bool has_plateletcount() const;
  private:
  bool _internal_has_plateletcount() const;
  public:
  void clear_plateletcount();
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& plateletcount() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* release_plateletcount();
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* mutable_plateletcount();
  void set_allocated_plateletcount(::pulse::cdm::bind::ScalarAmountPerVolumeData* plateletcount);
  private:
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& _internal_plateletcount() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* _internal_mutable_plateletcount();
  public:
  void unsafe_arena_set_allocated_plateletcount(
      ::pulse::cdm::bind::ScalarAmountPerVolumeData* plateletcount);
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* unsafe_arena_release_plateletcount();

  // .pulse.cdm.bind.ScalarMassPerAmountData MeanCorpuscularHemoglobin = 5;
  bool has_meancorpuscularhemoglobin() const;
  private:
  bool _internal_has_meancorpuscularhemoglobin() const;
  public:
  void clear_meancorpuscularhemoglobin();
  const ::pulse::cdm::bind::ScalarMassPerAmountData& meancorpuscularhemoglobin() const;
  ::pulse::cdm::bind::ScalarMassPerAmountData* release_meancorpuscularhemoglobin();
  ::pulse::cdm::bind::ScalarMassPerAmountData* mutable_meancorpuscularhemoglobin();
  void set_allocated_meancorpuscularhemoglobin(::pulse::cdm::bind::ScalarMassPerAmountData* meancorpuscularhemoglobin);
  private:
  const ::pulse::cdm::bind::ScalarMassPerAmountData& _internal_meancorpuscularhemoglobin() const;
  ::pulse::cdm::bind::ScalarMassPerAmountData* _internal_mutable_meancorpuscularhemoglobin();
  public:
  void unsafe_arena_set_allocated_meancorpuscularhemoglobin(
      ::pulse::cdm::bind::ScalarMassPerAmountData* meancorpuscularhemoglobin);
  ::pulse::cdm::bind::ScalarMassPerAmountData* unsafe_arena_release_meancorpuscularhemoglobin();

  // .pulse.cdm.bind.ScalarMassPerVolumeData MeanCorpuscularHemoglobinConcentration = 6;
  bool has_meancorpuscularhemoglobinconcentration() const;
  private:
  bool _internal_has_meancorpuscularhemoglobinconcentration() const;
  public:
  void clear_meancorpuscularhemoglobinconcentration();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& meancorpuscularhemoglobinconcentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_meancorpuscularhemoglobinconcentration();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_meancorpuscularhemoglobinconcentration();
  void set_allocated_meancorpuscularhemoglobinconcentration(::pulse::cdm::bind::ScalarMassPerVolumeData* meancorpuscularhemoglobinconcentration);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_meancorpuscularhemoglobinconcentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_meancorpuscularhemoglobinconcentration();
  public:
  void unsafe_arena_set_allocated_meancorpuscularhemoglobinconcentration(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* meancorpuscularhemoglobinconcentration);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_meancorpuscularhemoglobinconcentration();

  // .pulse.cdm.bind.ScalarVolumeData MeanCorpuscularVolume = 7;
  bool has_meancorpuscularvolume() const;
  private:
  bool _internal_has_meancorpuscularvolume() const;
  public:
  void clear_meancorpuscularvolume();
  const ::pulse::cdm::bind::ScalarVolumeData& meancorpuscularvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_meancorpuscularvolume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_meancorpuscularvolume();
  void set_allocated_meancorpuscularvolume(::pulse::cdm::bind::ScalarVolumeData* meancorpuscularvolume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_meancorpuscularvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_meancorpuscularvolume();
  public:
  void unsafe_arena_set_allocated_meancorpuscularvolume(
      ::pulse::cdm::bind::ScalarVolumeData* meancorpuscularvolume);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_meancorpuscularvolume();

  // .pulse.cdm.bind.ScalarAmountPerVolumeData RedBloodCellCount = 8;
  bool has_redbloodcellcount() const;
  private:
  bool _internal_has_redbloodcellcount() const;
  public:
  void clear_redbloodcellcount();
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& redbloodcellcount() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* release_redbloodcellcount();
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* mutable_redbloodcellcount();
  void set_allocated_redbloodcellcount(::pulse::cdm::bind::ScalarAmountPerVolumeData* redbloodcellcount);
  private:
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& _internal_redbloodcellcount() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* _internal_mutable_redbloodcellcount();
  public:
  void unsafe_arena_set_allocated_redbloodcellcount(
      ::pulse::cdm::bind::ScalarAmountPerVolumeData* redbloodcellcount);
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* unsafe_arena_release_redbloodcellcount();

  // .pulse.cdm.bind.ScalarAmountPerVolumeData WhiteBloodCellCount = 9;
  bool has_whitebloodcellcount() const;
  private:
  bool _internal_has_whitebloodcellcount() const;
  public:
  void clear_whitebloodcellcount();
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& whitebloodcellcount() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* release_whitebloodcellcount();
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* mutable_whitebloodcellcount();
  void set_allocated_whitebloodcellcount(::pulse::cdm::bind::ScalarAmountPerVolumeData* whitebloodcellcount);
  private:
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& _internal_whitebloodcellcount() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* _internal_mutable_whitebloodcellcount();
  public:
  void unsafe_arena_set_allocated_whitebloodcellcount(
      ::pulse::cdm::bind::ScalarAmountPerVolumeData* whitebloodcellcount);
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* unsafe_arena_release_whitebloodcellcount();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.CompleteBloodCountData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientAssessmentData* patientassessment_;
  ::pulse::cdm::bind::Scalar0To1Data* hematocrit_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* hemoglobin_;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* plateletcount_;
  ::pulse::cdm::bind::ScalarMassPerAmountData* meancorpuscularhemoglobin_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* meancorpuscularhemoglobinconcentration_;
  ::pulse::cdm::bind::ScalarVolumeData* meancorpuscularvolume_;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* redbloodcellcount_;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* whitebloodcellcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto;
};
// -------------------------------------------------------------------

class ComprehensiveMetabolicPanelData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ComprehensiveMetabolicPanelData) */ {
 public:
  inline ComprehensiveMetabolicPanelData() : ComprehensiveMetabolicPanelData(nullptr) {}
  virtual ~ComprehensiveMetabolicPanelData();

  ComprehensiveMetabolicPanelData(const ComprehensiveMetabolicPanelData& from);
  ComprehensiveMetabolicPanelData(ComprehensiveMetabolicPanelData&& from) noexcept
    : ComprehensiveMetabolicPanelData() {
    *this = ::std::move(from);
  }

  inline ComprehensiveMetabolicPanelData& operator=(const ComprehensiveMetabolicPanelData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComprehensiveMetabolicPanelData& operator=(ComprehensiveMetabolicPanelData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComprehensiveMetabolicPanelData& default_instance();

  static inline const ComprehensiveMetabolicPanelData* internal_default_instance() {
    return reinterpret_cast<const ComprehensiveMetabolicPanelData*>(
               &_ComprehensiveMetabolicPanelData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ComprehensiveMetabolicPanelData& a, ComprehensiveMetabolicPanelData& b) {
    a.Swap(&b);
  }
  inline void Swap(ComprehensiveMetabolicPanelData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComprehensiveMetabolicPanelData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComprehensiveMetabolicPanelData* New() const final {
    return CreateMaybeMessage<ComprehensiveMetabolicPanelData>(nullptr);
  }

  ComprehensiveMetabolicPanelData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComprehensiveMetabolicPanelData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComprehensiveMetabolicPanelData& from);
  void MergeFrom(const ComprehensiveMetabolicPanelData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComprehensiveMetabolicPanelData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ComprehensiveMetabolicPanelData";
  }
  protected:
  explicit ComprehensiveMetabolicPanelData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientAssessmentFieldNumber = 1,
    kAlbuminFieldNumber = 2,
    kALPFieldNumber = 3,
    kALTFieldNumber = 4,
    kASTFieldNumber = 5,
    kBUNFieldNumber = 6,
    kCalciumFieldNumber = 7,
    kChlorideFieldNumber = 8,
    kCO2FieldNumber = 9,
    kCreatinineFieldNumber = 10,
    kGlucoseFieldNumber = 11,
    kPotassiumFieldNumber = 12,
    kSodiumFieldNumber = 13,
    kTotalBilirubinFieldNumber = 14,
    kTotalProteinFieldNumber = 15,
  };
  // .pulse.cdm.bind.PatientAssessmentData PatientAssessment = 1;
  bool has_patientassessment() const;
  private:
  bool _internal_has_patientassessment() const;
  public:
  void clear_patientassessment();
  const ::pulse::cdm::bind::PatientAssessmentData& patientassessment() const;
  ::pulse::cdm::bind::PatientAssessmentData* release_patientassessment();
  ::pulse::cdm::bind::PatientAssessmentData* mutable_patientassessment();
  void set_allocated_patientassessment(::pulse::cdm::bind::PatientAssessmentData* patientassessment);
  private:
  const ::pulse::cdm::bind::PatientAssessmentData& _internal_patientassessment() const;
  ::pulse::cdm::bind::PatientAssessmentData* _internal_mutable_patientassessment();
  public:
  void unsafe_arena_set_allocated_patientassessment(
      ::pulse::cdm::bind::PatientAssessmentData* patientassessment);
  ::pulse::cdm::bind::PatientAssessmentData* unsafe_arena_release_patientassessment();

  // .pulse.cdm.bind.ScalarMassPerVolumeData Albumin = 2;
  bool has_albumin() const;
  private:
  bool _internal_has_albumin() const;
  public:
  void clear_albumin();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& albumin() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_albumin();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_albumin();
  void set_allocated_albumin(::pulse::cdm::bind::ScalarMassPerVolumeData* albumin);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_albumin() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_albumin();
  public:
  void unsafe_arena_set_allocated_albumin(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* albumin);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_albumin();

  // .pulse.cdm.bind.ScalarMassPerVolumeData ALP = 3;
  bool has_alp() const;
  private:
  bool _internal_has_alp() const;
  public:
  void clear_alp();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& alp() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_alp();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_alp();
  void set_allocated_alp(::pulse::cdm::bind::ScalarMassPerVolumeData* alp);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_alp() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_alp();
  public:
  void unsafe_arena_set_allocated_alp(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* alp);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_alp();

  // .pulse.cdm.bind.ScalarMassPerVolumeData ALT = 4;
  bool has_alt() const;
  private:
  bool _internal_has_alt() const;
  public:
  void clear_alt();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& alt() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_alt();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_alt();
  void set_allocated_alt(::pulse::cdm::bind::ScalarMassPerVolumeData* alt);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_alt() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_alt();
  public:
  void unsafe_arena_set_allocated_alt(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* alt);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_alt();

  // .pulse.cdm.bind.ScalarMassPerVolumeData AST = 5;
  bool has_ast() const;
  private:
  bool _internal_has_ast() const;
  public:
  void clear_ast();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& ast() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_ast();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_ast();
  void set_allocated_ast(::pulse::cdm::bind::ScalarMassPerVolumeData* ast);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_ast() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_ast();
  public:
  void unsafe_arena_set_allocated_ast(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* ast);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_ast();

  // .pulse.cdm.bind.ScalarMassPerVolumeData BUN = 6;
  bool has_bun() const;
  private:
  bool _internal_has_bun() const;
  public:
  void clear_bun();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& bun() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_bun();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_bun();
  void set_allocated_bun(::pulse::cdm::bind::ScalarMassPerVolumeData* bun);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_bun() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_bun();
  public:
  void unsafe_arena_set_allocated_bun(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* bun);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_bun();

  // .pulse.cdm.bind.ScalarMassPerVolumeData Calcium = 7;
  bool has_calcium() const;
  private:
  bool _internal_has_calcium() const;
  public:
  void clear_calcium();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& calcium() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_calcium();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_calcium();
  void set_allocated_calcium(::pulse::cdm::bind::ScalarMassPerVolumeData* calcium);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_calcium() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_calcium();
  public:
  void unsafe_arena_set_allocated_calcium(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* calcium);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_calcium();

  // .pulse.cdm.bind.ScalarAmountPerVolumeData Chloride = 8;
  bool has_chloride() const;
  private:
  bool _internal_has_chloride() const;
  public:
  void clear_chloride();
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& chloride() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* release_chloride();
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* mutable_chloride();
  void set_allocated_chloride(::pulse::cdm::bind::ScalarAmountPerVolumeData* chloride);
  private:
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& _internal_chloride() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* _internal_mutable_chloride();
  public:
  void unsafe_arena_set_allocated_chloride(
      ::pulse::cdm::bind::ScalarAmountPerVolumeData* chloride);
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* unsafe_arena_release_chloride();

  // .pulse.cdm.bind.ScalarAmountPerVolumeData CO2 = 9;
  bool has_co2() const;
  private:
  bool _internal_has_co2() const;
  public:
  void clear_co2();
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& co2() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* release_co2();
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* mutable_co2();
  void set_allocated_co2(::pulse::cdm::bind::ScalarAmountPerVolumeData* co2);
  private:
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& _internal_co2() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* _internal_mutable_co2();
  public:
  void unsafe_arena_set_allocated_co2(
      ::pulse::cdm::bind::ScalarAmountPerVolumeData* co2);
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* unsafe_arena_release_co2();

  // .pulse.cdm.bind.ScalarMassPerVolumeData Creatinine = 10;
  bool has_creatinine() const;
  private:
  bool _internal_has_creatinine() const;
  public:
  void clear_creatinine();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& creatinine() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_creatinine();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_creatinine();
  void set_allocated_creatinine(::pulse::cdm::bind::ScalarMassPerVolumeData* creatinine);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_creatinine() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_creatinine();
  public:
  void unsafe_arena_set_allocated_creatinine(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* creatinine);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_creatinine();

  // .pulse.cdm.bind.ScalarMassPerVolumeData Glucose = 11;
  bool has_glucose() const;
  private:
  bool _internal_has_glucose() const;
  public:
  void clear_glucose();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& glucose() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_glucose();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_glucose();
  void set_allocated_glucose(::pulse::cdm::bind::ScalarMassPerVolumeData* glucose);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_glucose() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_glucose();
  public:
  void unsafe_arena_set_allocated_glucose(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* glucose);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_glucose();

  // .pulse.cdm.bind.ScalarAmountPerVolumeData Potassium = 12;
  bool has_potassium() const;
  private:
  bool _internal_has_potassium() const;
  public:
  void clear_potassium();
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& potassium() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* release_potassium();
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* mutable_potassium();
  void set_allocated_potassium(::pulse::cdm::bind::ScalarAmountPerVolumeData* potassium);
  private:
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& _internal_potassium() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* _internal_mutable_potassium();
  public:
  void unsafe_arena_set_allocated_potassium(
      ::pulse::cdm::bind::ScalarAmountPerVolumeData* potassium);
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* unsafe_arena_release_potassium();

  // .pulse.cdm.bind.ScalarAmountPerVolumeData Sodium = 13;
  bool has_sodium() const;
  private:
  bool _internal_has_sodium() const;
  public:
  void clear_sodium();
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& sodium() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* release_sodium();
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* mutable_sodium();
  void set_allocated_sodium(::pulse::cdm::bind::ScalarAmountPerVolumeData* sodium);
  private:
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& _internal_sodium() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* _internal_mutable_sodium();
  public:
  void unsafe_arena_set_allocated_sodium(
      ::pulse::cdm::bind::ScalarAmountPerVolumeData* sodium);
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* unsafe_arena_release_sodium();

  // .pulse.cdm.bind.ScalarMassPerVolumeData TotalBilirubin = 14;
  bool has_totalbilirubin() const;
  private:
  bool _internal_has_totalbilirubin() const;
  public:
  void clear_totalbilirubin();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& totalbilirubin() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_totalbilirubin();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_totalbilirubin();
  void set_allocated_totalbilirubin(::pulse::cdm::bind::ScalarMassPerVolumeData* totalbilirubin);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_totalbilirubin() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_totalbilirubin();
  public:
  void unsafe_arena_set_allocated_totalbilirubin(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* totalbilirubin);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_totalbilirubin();

  // .pulse.cdm.bind.ScalarMassPerVolumeData TotalProtein = 15;
  bool has_totalprotein() const;
  private:
  bool _internal_has_totalprotein() const;
  public:
  void clear_totalprotein();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& totalprotein() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_totalprotein();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_totalprotein();
  void set_allocated_totalprotein(::pulse::cdm::bind::ScalarMassPerVolumeData* totalprotein);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_totalprotein() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_totalprotein();
  public:
  void unsafe_arena_set_allocated_totalprotein(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* totalprotein);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_totalprotein();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ComprehensiveMetabolicPanelData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientAssessmentData* patientassessment_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* albumin_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* alp_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* alt_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* ast_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* bun_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* calcium_;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* chloride_;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* co2_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* creatinine_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* glucose_;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* potassium_;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* sodium_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* totalbilirubin_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* totalprotein_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto;
};
// -------------------------------------------------------------------

class UrinalysisMicroscopicData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.UrinalysisMicroscopicData) */ {
 public:
  inline UrinalysisMicroscopicData() : UrinalysisMicroscopicData(nullptr) {}
  virtual ~UrinalysisMicroscopicData();

  UrinalysisMicroscopicData(const UrinalysisMicroscopicData& from);
  UrinalysisMicroscopicData(UrinalysisMicroscopicData&& from) noexcept
    : UrinalysisMicroscopicData() {
    *this = ::std::move(from);
  }

  inline UrinalysisMicroscopicData& operator=(const UrinalysisMicroscopicData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UrinalysisMicroscopicData& operator=(UrinalysisMicroscopicData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UrinalysisMicroscopicData& default_instance();

  static inline const UrinalysisMicroscopicData* internal_default_instance() {
    return reinterpret_cast<const UrinalysisMicroscopicData*>(
               &_UrinalysisMicroscopicData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UrinalysisMicroscopicData& a, UrinalysisMicroscopicData& b) {
    a.Swap(&b);
  }
  inline void Swap(UrinalysisMicroscopicData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UrinalysisMicroscopicData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UrinalysisMicroscopicData* New() const final {
    return CreateMaybeMessage<UrinalysisMicroscopicData>(nullptr);
  }

  UrinalysisMicroscopicData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UrinalysisMicroscopicData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UrinalysisMicroscopicData& from);
  void MergeFrom(const UrinalysisMicroscopicData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UrinalysisMicroscopicData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.UrinalysisMicroscopicData";
  }
  protected:
  explicit UrinalysisMicroscopicData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UrinalysisMicroscopicData_eObservationType eObservationType;
  static constexpr eObservationType NullObservationType =
    UrinalysisMicroscopicData_eObservationType_NullObservationType;
  static constexpr eObservationType LowPowerField =
    UrinalysisMicroscopicData_eObservationType_LowPowerField;
  static constexpr eObservationType HighPowerField =
    UrinalysisMicroscopicData_eObservationType_HighPowerField;
  static inline bool eObservationType_IsValid(int value) {
    return UrinalysisMicroscopicData_eObservationType_IsValid(value);
  }
  static constexpr eObservationType eObservationType_MIN =
    UrinalysisMicroscopicData_eObservationType_eObservationType_MIN;
  static constexpr eObservationType eObservationType_MAX =
    UrinalysisMicroscopicData_eObservationType_eObservationType_MAX;
  static constexpr int eObservationType_ARRAYSIZE =
    UrinalysisMicroscopicData_eObservationType_eObservationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eObservationType_descriptor() {
    return UrinalysisMicroscopicData_eObservationType_descriptor();
  }
  template<typename T>
  static inline const std::string& eObservationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eObservationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eObservationType_Name.");
    return UrinalysisMicroscopicData_eObservationType_Name(enum_t_value);
  }
  static inline bool eObservationType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eObservationType* value) {
    return UrinalysisMicroscopicData_eObservationType_Parse(name, value);
  }

  typedef UrinalysisMicroscopicData_eObservationAmount eObservationAmount;
  static constexpr eObservationAmount NullObservationAmount =
    UrinalysisMicroscopicData_eObservationAmount_NullObservationAmount;
  static constexpr eObservationAmount Few =
    UrinalysisMicroscopicData_eObservationAmount_Few;
  static constexpr eObservationAmount Moderate =
    UrinalysisMicroscopicData_eObservationAmount_Moderate;
  static constexpr eObservationAmount Many =
    UrinalysisMicroscopicData_eObservationAmount_Many;
  static inline bool eObservationAmount_IsValid(int value) {
    return UrinalysisMicroscopicData_eObservationAmount_IsValid(value);
  }
  static constexpr eObservationAmount eObservationAmount_MIN =
    UrinalysisMicroscopicData_eObservationAmount_eObservationAmount_MIN;
  static constexpr eObservationAmount eObservationAmount_MAX =
    UrinalysisMicroscopicData_eObservationAmount_eObservationAmount_MAX;
  static constexpr int eObservationAmount_ARRAYSIZE =
    UrinalysisMicroscopicData_eObservationAmount_eObservationAmount_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eObservationAmount_descriptor() {
    return UrinalysisMicroscopicData_eObservationAmount_descriptor();
  }
  template<typename T>
  static inline const std::string& eObservationAmount_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eObservationAmount>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eObservationAmount_Name.");
    return UrinalysisMicroscopicData_eObservationAmount_Name(enum_t_value);
  }
  static inline bool eObservationAmount_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eObservationAmount* value) {
    return UrinalysisMicroscopicData_eObservationAmount_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRedBloodCellsFieldNumber = 2,
    kWhiteBloodCellsFieldNumber = 3,
    kCastsFieldNumber = 5,
    kObservationTypeFieldNumber = 1,
    kEpithelialCellsFieldNumber = 4,
    kCrystalsFieldNumber = 6,
    kBacteriaFieldNumber = 7,
    kTrichomonadsFieldNumber = 8,
    kYeastFieldNumber = 9,
  };
  // .pulse.cdm.bind.ScalarAmountData RedBloodCells = 2;
  bool has_redbloodcells() const;
  private:
  bool _internal_has_redbloodcells() const;
  public:
  void clear_redbloodcells();
  const ::pulse::cdm::bind::ScalarAmountData& redbloodcells() const;
  ::pulse::cdm::bind::ScalarAmountData* release_redbloodcells();
  ::pulse::cdm::bind::ScalarAmountData* mutable_redbloodcells();
  void set_allocated_redbloodcells(::pulse::cdm::bind::ScalarAmountData* redbloodcells);
  private:
  const ::pulse::cdm::bind::ScalarAmountData& _internal_redbloodcells() const;
  ::pulse::cdm::bind::ScalarAmountData* _internal_mutable_redbloodcells();
  public:
  void unsafe_arena_set_allocated_redbloodcells(
      ::pulse::cdm::bind::ScalarAmountData* redbloodcells);
  ::pulse::cdm::bind::ScalarAmountData* unsafe_arena_release_redbloodcells();

  // .pulse.cdm.bind.ScalarAmountData WhiteBloodCells = 3;
  bool has_whitebloodcells() const;
  private:
  bool _internal_has_whitebloodcells() const;
  public:
  void clear_whitebloodcells();
  const ::pulse::cdm::bind::ScalarAmountData& whitebloodcells() const;
  ::pulse::cdm::bind::ScalarAmountData* release_whitebloodcells();
  ::pulse::cdm::bind::ScalarAmountData* mutable_whitebloodcells();
  void set_allocated_whitebloodcells(::pulse::cdm::bind::ScalarAmountData* whitebloodcells);
  private:
  const ::pulse::cdm::bind::ScalarAmountData& _internal_whitebloodcells() const;
  ::pulse::cdm::bind::ScalarAmountData* _internal_mutable_whitebloodcells();
  public:
  void unsafe_arena_set_allocated_whitebloodcells(
      ::pulse::cdm::bind::ScalarAmountData* whitebloodcells);
  ::pulse::cdm::bind::ScalarAmountData* unsafe_arena_release_whitebloodcells();

  // .pulse.cdm.bind.ScalarAmountData Casts = 5;
  bool has_casts() const;
  private:
  bool _internal_has_casts() const;
  public:
  void clear_casts();
  const ::pulse::cdm::bind::ScalarAmountData& casts() const;
  ::pulse::cdm::bind::ScalarAmountData* release_casts();
  ::pulse::cdm::bind::ScalarAmountData* mutable_casts();
  void set_allocated_casts(::pulse::cdm::bind::ScalarAmountData* casts);
  private:
  const ::pulse::cdm::bind::ScalarAmountData& _internal_casts() const;
  ::pulse::cdm::bind::ScalarAmountData* _internal_mutable_casts();
  public:
  void unsafe_arena_set_allocated_casts(
      ::pulse::cdm::bind::ScalarAmountData* casts);
  ::pulse::cdm::bind::ScalarAmountData* unsafe_arena_release_casts();

  // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationType ObservationType = 1;
  void clear_observationtype();
  ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationType observationtype() const;
  void set_observationtype(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationType value);
  private:
  ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationType _internal_observationtype() const;
  void _internal_set_observationtype(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationType value);
  public:

  // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount EpithelialCells = 4;
  void clear_epithelialcells();
  ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount epithelialcells() const;
  void set_epithelialcells(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount value);
  private:
  ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount _internal_epithelialcells() const;
  void _internal_set_epithelialcells(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount value);
  public:

  // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount Crystals = 6;
  void clear_crystals();
  ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount crystals() const;
  void set_crystals(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount value);
  private:
  ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount _internal_crystals() const;
  void _internal_set_crystals(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount value);
  public:

  // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount Bacteria = 7;
  void clear_bacteria();
  ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount bacteria() const;
  void set_bacteria(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount value);
  private:
  ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount _internal_bacteria() const;
  void _internal_set_bacteria(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount value);
  public:

  // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount Trichomonads = 8;
  void clear_trichomonads();
  ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount trichomonads() const;
  void set_trichomonads(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount value);
  private:
  ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount _internal_trichomonads() const;
  void _internal_set_trichomonads(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount value);
  public:

  // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount Yeast = 9;
  void clear_yeast();
  ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount yeast() const;
  void set_yeast(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount value);
  private:
  ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount _internal_yeast() const;
  void _internal_set_yeast(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.UrinalysisMicroscopicData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarAmountData* redbloodcells_;
  ::pulse::cdm::bind::ScalarAmountData* whitebloodcells_;
  ::pulse::cdm::bind::ScalarAmountData* casts_;
  int observationtype_;
  int epithelialcells_;
  int crystals_;
  int bacteria_;
  int trichomonads_;
  int yeast_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto;
};
// -------------------------------------------------------------------

class UrinalysisData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.UrinalysisData) */ {
 public:
  inline UrinalysisData() : UrinalysisData(nullptr) {}
  virtual ~UrinalysisData();

  UrinalysisData(const UrinalysisData& from);
  UrinalysisData(UrinalysisData&& from) noexcept
    : UrinalysisData() {
    *this = ::std::move(from);
  }

  inline UrinalysisData& operator=(const UrinalysisData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UrinalysisData& operator=(UrinalysisData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UrinalysisData& default_instance();

  static inline const UrinalysisData* internal_default_instance() {
    return reinterpret_cast<const UrinalysisData*>(
               &_UrinalysisData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UrinalysisData& a, UrinalysisData& b) {
    a.Swap(&b);
  }
  inline void Swap(UrinalysisData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UrinalysisData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UrinalysisData* New() const final {
    return CreateMaybeMessage<UrinalysisData>(nullptr);
  }

  UrinalysisData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UrinalysisData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UrinalysisData& from);
  void MergeFrom(const UrinalysisData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UrinalysisData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.UrinalysisData";
  }
  protected:
  explicit UrinalysisData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UrinalysisData_ePresenceIndicator ePresenceIndicator;
  static constexpr ePresenceIndicator NullPresence =
    UrinalysisData_ePresenceIndicator_NullPresence;
  static constexpr ePresenceIndicator Positive =
    UrinalysisData_ePresenceIndicator_Positive;
  static constexpr ePresenceIndicator Negative =
    UrinalysisData_ePresenceIndicator_Negative;
  static inline bool ePresenceIndicator_IsValid(int value) {
    return UrinalysisData_ePresenceIndicator_IsValid(value);
  }
  static constexpr ePresenceIndicator ePresenceIndicator_MIN =
    UrinalysisData_ePresenceIndicator_ePresenceIndicator_MIN;
  static constexpr ePresenceIndicator ePresenceIndicator_MAX =
    UrinalysisData_ePresenceIndicator_ePresenceIndicator_MAX;
  static constexpr int ePresenceIndicator_ARRAYSIZE =
    UrinalysisData_ePresenceIndicator_ePresenceIndicator_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ePresenceIndicator_descriptor() {
    return UrinalysisData_ePresenceIndicator_descriptor();
  }
  template<typename T>
  static inline const std::string& ePresenceIndicator_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ePresenceIndicator>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ePresenceIndicator_Name.");
    return UrinalysisData_ePresenceIndicator_Name(enum_t_value);
  }
  static inline bool ePresenceIndicator_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ePresenceIndicator* value) {
    return UrinalysisData_ePresenceIndicator_Parse(name, value);
  }

  typedef UrinalysisData_eClarityIndicator eClarityIndicator;
  static constexpr eClarityIndicator NullClarity =
    UrinalysisData_eClarityIndicator_NullClarity;
  static constexpr eClarityIndicator Translucent =
    UrinalysisData_eClarityIndicator_Translucent;
  static constexpr eClarityIndicator SlightlyCloudy =
    UrinalysisData_eClarityIndicator_SlightlyCloudy;
  static constexpr eClarityIndicator Cloudy =
    UrinalysisData_eClarityIndicator_Cloudy;
  static constexpr eClarityIndicator Turbid =
    UrinalysisData_eClarityIndicator_Turbid;
  static inline bool eClarityIndicator_IsValid(int value) {
    return UrinalysisData_eClarityIndicator_IsValid(value);
  }
  static constexpr eClarityIndicator eClarityIndicator_MIN =
    UrinalysisData_eClarityIndicator_eClarityIndicator_MIN;
  static constexpr eClarityIndicator eClarityIndicator_MAX =
    UrinalysisData_eClarityIndicator_eClarityIndicator_MAX;
  static constexpr int eClarityIndicator_ARRAYSIZE =
    UrinalysisData_eClarityIndicator_eClarityIndicator_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eClarityIndicator_descriptor() {
    return UrinalysisData_eClarityIndicator_descriptor();
  }
  template<typename T>
  static inline const std::string& eClarityIndicator_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eClarityIndicator>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eClarityIndicator_Name.");
    return UrinalysisData_eClarityIndicator_Name(enum_t_value);
  }
  static inline bool eClarityIndicator_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eClarityIndicator* value) {
    return UrinalysisData_eClarityIndicator_Parse(name, value);
  }

  typedef UrinalysisData_eUrineColor eUrineColor;
  static constexpr eUrineColor NullColor =
    UrinalysisData_eUrineColor_NullColor;
  static constexpr eUrineColor PaleYellow =
    UrinalysisData_eUrineColor_PaleYellow;
  static constexpr eUrineColor Yellow =
    UrinalysisData_eUrineColor_Yellow;
  static constexpr eUrineColor DarkYellow =
    UrinalysisData_eUrineColor_DarkYellow;
  static inline bool eUrineColor_IsValid(int value) {
    return UrinalysisData_eUrineColor_IsValid(value);
  }
  static constexpr eUrineColor eUrineColor_MIN =
    UrinalysisData_eUrineColor_eUrineColor_MIN;
  static constexpr eUrineColor eUrineColor_MAX =
    UrinalysisData_eUrineColor_eUrineColor_MAX;
  static constexpr int eUrineColor_ARRAYSIZE =
    UrinalysisData_eUrineColor_eUrineColor_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eUrineColor_descriptor() {
    return UrinalysisData_eUrineColor_descriptor();
  }
  template<typename T>
  static inline const std::string& eUrineColor_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eUrineColor>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eUrineColor_Name.");
    return UrinalysisData_eUrineColor_Name(enum_t_value);
  }
  static inline bool eUrineColor_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eUrineColor* value) {
    return UrinalysisData_eUrineColor_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPatientAssessmentFieldNumber = 1,
    kBilirubinFieldNumber = 6,
    kSpecificGravityFieldNumber = 7,
    kPHFieldNumber = 9,
    kUrobilinogenFieldNumber = 11,
    kMicroscopicFieldNumber = 14,
    kColorFieldNumber = 2,
    kAppearanceFieldNumber = 3,
    kGlucoseFieldNumber = 4,
    kKetoneFieldNumber = 5,
    kBloodFieldNumber = 8,
    kProteinFieldNumber = 10,
    kNitriteFieldNumber = 12,
    kLeukocyteEsteraseFieldNumber = 13,
  };
  // .pulse.cdm.bind.PatientAssessmentData PatientAssessment = 1;
  bool has_patientassessment() const;
  private:
  bool _internal_has_patientassessment() const;
  public:
  void clear_patientassessment();
  const ::pulse::cdm::bind::PatientAssessmentData& patientassessment() const;
  ::pulse::cdm::bind::PatientAssessmentData* release_patientassessment();
  ::pulse::cdm::bind::PatientAssessmentData* mutable_patientassessment();
  void set_allocated_patientassessment(::pulse::cdm::bind::PatientAssessmentData* patientassessment);
  private:
  const ::pulse::cdm::bind::PatientAssessmentData& _internal_patientassessment() const;
  ::pulse::cdm::bind::PatientAssessmentData* _internal_mutable_patientassessment();
  public:
  void unsafe_arena_set_allocated_patientassessment(
      ::pulse::cdm::bind::PatientAssessmentData* patientassessment);
  ::pulse::cdm::bind::PatientAssessmentData* unsafe_arena_release_patientassessment();

  // .pulse.cdm.bind.ScalarData Bilirubin = 6;
  bool has_bilirubin() const;
  private:
  bool _internal_has_bilirubin() const;
  public:
  void clear_bilirubin();
  const ::pulse::cdm::bind::ScalarData& bilirubin() const;
  ::pulse::cdm::bind::ScalarData* release_bilirubin();
  ::pulse::cdm::bind::ScalarData* mutable_bilirubin();
  void set_allocated_bilirubin(::pulse::cdm::bind::ScalarData* bilirubin);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_bilirubin() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_bilirubin();
  public:
  void unsafe_arena_set_allocated_bilirubin(
      ::pulse::cdm::bind::ScalarData* bilirubin);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_bilirubin();

  // .pulse.cdm.bind.ScalarData SpecificGravity = 7;
  bool has_specificgravity() const;
  private:
  bool _internal_has_specificgravity() const;
  public:
  void clear_specificgravity();
  const ::pulse::cdm::bind::ScalarData& specificgravity() const;
  ::pulse::cdm::bind::ScalarData* release_specificgravity();
  ::pulse::cdm::bind::ScalarData* mutable_specificgravity();
  void set_allocated_specificgravity(::pulse::cdm::bind::ScalarData* specificgravity);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_specificgravity() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_specificgravity();
  public:
  void unsafe_arena_set_allocated_specificgravity(
      ::pulse::cdm::bind::ScalarData* specificgravity);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_specificgravity();

  // .pulse.cdm.bind.ScalarData pH = 9;
  bool has_ph() const;
  private:
  bool _internal_has_ph() const;
  public:
  void clear_ph();
  const ::pulse::cdm::bind::ScalarData& ph() const;
  ::pulse::cdm::bind::ScalarData* release_ph();
  ::pulse::cdm::bind::ScalarData* mutable_ph();
  void set_allocated_ph(::pulse::cdm::bind::ScalarData* ph);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_ph() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_ph();
  public:
  void unsafe_arena_set_allocated_ph(
      ::pulse::cdm::bind::ScalarData* ph);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_ph();

  // .pulse.cdm.bind.ScalarMassPerVolumeData Urobilinogen = 11;
  bool has_urobilinogen() const;
  private:
  bool _internal_has_urobilinogen() const;
  public:
  void clear_urobilinogen();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& urobilinogen() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_urobilinogen();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_urobilinogen();
  void set_allocated_urobilinogen(::pulse::cdm::bind::ScalarMassPerVolumeData* urobilinogen);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_urobilinogen() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_urobilinogen();
  public:
  void unsafe_arena_set_allocated_urobilinogen(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* urobilinogen);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_urobilinogen();

  // .pulse.cdm.bind.UrinalysisMicroscopicData Microscopic = 14;
  bool has_microscopic() const;
  private:
  bool _internal_has_microscopic() const;
  public:
  void clear_microscopic();
  const ::pulse::cdm::bind::UrinalysisMicroscopicData& microscopic() const;
  ::pulse::cdm::bind::UrinalysisMicroscopicData* release_microscopic();
  ::pulse::cdm::bind::UrinalysisMicroscopicData* mutable_microscopic();
  void set_allocated_microscopic(::pulse::cdm::bind::UrinalysisMicroscopicData* microscopic);
  private:
  const ::pulse::cdm::bind::UrinalysisMicroscopicData& _internal_microscopic() const;
  ::pulse::cdm::bind::UrinalysisMicroscopicData* _internal_mutable_microscopic();
  public:
  void unsafe_arena_set_allocated_microscopic(
      ::pulse::cdm::bind::UrinalysisMicroscopicData* microscopic);
  ::pulse::cdm::bind::UrinalysisMicroscopicData* unsafe_arena_release_microscopic();

  // .pulse.cdm.bind.UrinalysisData.eUrineColor Color = 2;
  void clear_color();
  ::pulse::cdm::bind::UrinalysisData_eUrineColor color() const;
  void set_color(::pulse::cdm::bind::UrinalysisData_eUrineColor value);
  private:
  ::pulse::cdm::bind::UrinalysisData_eUrineColor _internal_color() const;
  void _internal_set_color(::pulse::cdm::bind::UrinalysisData_eUrineColor value);
  public:

  // .pulse.cdm.bind.UrinalysisData.eClarityIndicator Appearance = 3;
  void clear_appearance();
  ::pulse::cdm::bind::UrinalysisData_eClarityIndicator appearance() const;
  void set_appearance(::pulse::cdm::bind::UrinalysisData_eClarityIndicator value);
  private:
  ::pulse::cdm::bind::UrinalysisData_eClarityIndicator _internal_appearance() const;
  void _internal_set_appearance(::pulse::cdm::bind::UrinalysisData_eClarityIndicator value);
  public:

  // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Glucose = 4;
  void clear_glucose();
  ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator glucose() const;
  void set_glucose(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value);
  private:
  ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator _internal_glucose() const;
  void _internal_set_glucose(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value);
  public:

  // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Ketone = 5;
  void clear_ketone();
  ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator ketone() const;
  void set_ketone(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value);
  private:
  ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator _internal_ketone() const;
  void _internal_set_ketone(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value);
  public:

  // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Blood = 8;
  void clear_blood();
  ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator blood() const;
  void set_blood(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value);
  private:
  ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator _internal_blood() const;
  void _internal_set_blood(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value);
  public:

  // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Protein = 10;
  void clear_protein();
  ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator protein() const;
  void set_protein(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value);
  private:
  ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator _internal_protein() const;
  void _internal_set_protein(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value);
  public:

  // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Nitrite = 12;
  void clear_nitrite();
  ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator nitrite() const;
  void set_nitrite(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value);
  private:
  ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator _internal_nitrite() const;
  void _internal_set_nitrite(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value);
  public:

  // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator LeukocyteEsterase = 13;
  void clear_leukocyteesterase();
  ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator leukocyteesterase() const;
  void set_leukocyteesterase(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value);
  private:
  ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator _internal_leukocyteesterase() const;
  void _internal_set_leukocyteesterase(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.UrinalysisData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientAssessmentData* patientassessment_;
  ::pulse::cdm::bind::ScalarData* bilirubin_;
  ::pulse::cdm::bind::ScalarData* specificgravity_;
  ::pulse::cdm::bind::ScalarData* ph_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* urobilinogen_;
  ::pulse::cdm::bind::UrinalysisMicroscopicData* microscopic_;
  int color_;
  int appearance_;
  int glucose_;
  int ketone_;
  int blood_;
  int protein_;
  int nitrite_;
  int leukocyteesterase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PatientAssessmentData

// -------------------------------------------------------------------

// PulmonaryFunctionTestData

// .pulse.cdm.bind.PatientAssessmentData PatientAssessment = 1;
inline bool PulmonaryFunctionTestData::_internal_has_patientassessment() const {
  return this != internal_default_instance() && patientassessment_ != nullptr;
}
inline bool PulmonaryFunctionTestData::has_patientassessment() const {
  return _internal_has_patientassessment();
}
inline void PulmonaryFunctionTestData::clear_patientassessment() {
  if (GetArena() == nullptr && patientassessment_ != nullptr) {
    delete patientassessment_;
  }
  patientassessment_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientAssessmentData& PulmonaryFunctionTestData::_internal_patientassessment() const {
  const ::pulse::cdm::bind::PatientAssessmentData* p = patientassessment_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientAssessmentData&>(
      ::pulse::cdm::bind::_PatientAssessmentData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientAssessmentData& PulmonaryFunctionTestData::patientassessment() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PulmonaryFunctionTestData.PatientAssessment)
  return _internal_patientassessment();
}
inline void PulmonaryFunctionTestData::unsafe_arena_set_allocated_patientassessment(
    ::pulse::cdm::bind::PatientAssessmentData* patientassessment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientassessment_);
  }
  patientassessment_ = patientassessment;
  if (patientassessment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.PatientAssessment)
}
inline ::pulse::cdm::bind::PatientAssessmentData* PulmonaryFunctionTestData::release_patientassessment() {
  
  ::pulse::cdm::bind::PatientAssessmentData* temp = patientassessment_;
  patientassessment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientAssessmentData* PulmonaryFunctionTestData::unsafe_arena_release_patientassessment() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PulmonaryFunctionTestData.PatientAssessment)
  
  ::pulse::cdm::bind::PatientAssessmentData* temp = patientassessment_;
  patientassessment_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientAssessmentData* PulmonaryFunctionTestData::_internal_mutable_patientassessment() {
  
  if (patientassessment_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientAssessmentData>(GetArena());
    patientassessment_ = p;
  }
  return patientassessment_;
}
inline ::pulse::cdm::bind::PatientAssessmentData* PulmonaryFunctionTestData::mutable_patientassessment() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PulmonaryFunctionTestData.PatientAssessment)
  return _internal_mutable_patientassessment();
}
inline void PulmonaryFunctionTestData::set_allocated_patientassessment(::pulse::cdm::bind::PatientAssessmentData* patientassessment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientassessment_;
  }
  if (patientassessment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientassessment);
    if (message_arena != submessage_arena) {
      patientassessment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientassessment, submessage_arena);
    }
    
  } else {
    
  }
  patientassessment_ = patientassessment;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.PatientAssessment)
}

// .pulse.cdm.bind.ScalarVolumeData ExpiratoryReserveVolume = 2;
inline bool PulmonaryFunctionTestData::_internal_has_expiratoryreservevolume() const {
  return this != internal_default_instance() && expiratoryreservevolume_ != nullptr;
}
inline bool PulmonaryFunctionTestData::has_expiratoryreservevolume() const {
  return _internal_has_expiratoryreservevolume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PulmonaryFunctionTestData::_internal_expiratoryreservevolume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = expiratoryreservevolume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PulmonaryFunctionTestData::expiratoryreservevolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PulmonaryFunctionTestData.ExpiratoryReserveVolume)
  return _internal_expiratoryreservevolume();
}
inline void PulmonaryFunctionTestData::unsafe_arena_set_allocated_expiratoryreservevolume(
    ::pulse::cdm::bind::ScalarVolumeData* expiratoryreservevolume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiratoryreservevolume_);
  }
  expiratoryreservevolume_ = expiratoryreservevolume;
  if (expiratoryreservevolume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.ExpiratoryReserveVolume)
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::release_expiratoryreservevolume() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = expiratoryreservevolume_;
  expiratoryreservevolume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::unsafe_arena_release_expiratoryreservevolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PulmonaryFunctionTestData.ExpiratoryReserveVolume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = expiratoryreservevolume_;
  expiratoryreservevolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::_internal_mutable_expiratoryreservevolume() {
  
  if (expiratoryreservevolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    expiratoryreservevolume_ = p;
  }
  return expiratoryreservevolume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::mutable_expiratoryreservevolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PulmonaryFunctionTestData.ExpiratoryReserveVolume)
  return _internal_mutable_expiratoryreservevolume();
}
inline void PulmonaryFunctionTestData::set_allocated_expiratoryreservevolume(::pulse::cdm::bind::ScalarVolumeData* expiratoryreservevolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiratoryreservevolume_);
  }
  if (expiratoryreservevolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiratoryreservevolume)->GetArena();
    if (message_arena != submessage_arena) {
      expiratoryreservevolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiratoryreservevolume, submessage_arena);
    }
    
  } else {
    
  }
  expiratoryreservevolume_ = expiratoryreservevolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.ExpiratoryReserveVolume)
}

// .pulse.cdm.bind.ScalarVolumeData ForcedVitalCapacity = 3;
inline bool PulmonaryFunctionTestData::_internal_has_forcedvitalcapacity() const {
  return this != internal_default_instance() && forcedvitalcapacity_ != nullptr;
}
inline bool PulmonaryFunctionTestData::has_forcedvitalcapacity() const {
  return _internal_has_forcedvitalcapacity();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PulmonaryFunctionTestData::_internal_forcedvitalcapacity() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = forcedvitalcapacity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PulmonaryFunctionTestData::forcedvitalcapacity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PulmonaryFunctionTestData.ForcedVitalCapacity)
  return _internal_forcedvitalcapacity();
}
inline void PulmonaryFunctionTestData::unsafe_arena_set_allocated_forcedvitalcapacity(
    ::pulse::cdm::bind::ScalarVolumeData* forcedvitalcapacity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forcedvitalcapacity_);
  }
  forcedvitalcapacity_ = forcedvitalcapacity;
  if (forcedvitalcapacity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.ForcedVitalCapacity)
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::release_forcedvitalcapacity() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = forcedvitalcapacity_;
  forcedvitalcapacity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::unsafe_arena_release_forcedvitalcapacity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PulmonaryFunctionTestData.ForcedVitalCapacity)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = forcedvitalcapacity_;
  forcedvitalcapacity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::_internal_mutable_forcedvitalcapacity() {
  
  if (forcedvitalcapacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    forcedvitalcapacity_ = p;
  }
  return forcedvitalcapacity_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::mutable_forcedvitalcapacity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PulmonaryFunctionTestData.ForcedVitalCapacity)
  return _internal_mutable_forcedvitalcapacity();
}
inline void PulmonaryFunctionTestData::set_allocated_forcedvitalcapacity(::pulse::cdm::bind::ScalarVolumeData* forcedvitalcapacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(forcedvitalcapacity_);
  }
  if (forcedvitalcapacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forcedvitalcapacity)->GetArena();
    if (message_arena != submessage_arena) {
      forcedvitalcapacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forcedvitalcapacity, submessage_arena);
    }
    
  } else {
    
  }
  forcedvitalcapacity_ = forcedvitalcapacity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.ForcedVitalCapacity)
}

// .pulse.cdm.bind.ScalarVolumeData ForcedExpiratoryVolume = 4;
inline bool PulmonaryFunctionTestData::_internal_has_forcedexpiratoryvolume() const {
  return this != internal_default_instance() && forcedexpiratoryvolume_ != nullptr;
}
inline bool PulmonaryFunctionTestData::has_forcedexpiratoryvolume() const {
  return _internal_has_forcedexpiratoryvolume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PulmonaryFunctionTestData::_internal_forcedexpiratoryvolume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = forcedexpiratoryvolume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PulmonaryFunctionTestData::forcedexpiratoryvolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PulmonaryFunctionTestData.ForcedExpiratoryVolume)
  return _internal_forcedexpiratoryvolume();
}
inline void PulmonaryFunctionTestData::unsafe_arena_set_allocated_forcedexpiratoryvolume(
    ::pulse::cdm::bind::ScalarVolumeData* forcedexpiratoryvolume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forcedexpiratoryvolume_);
  }
  forcedexpiratoryvolume_ = forcedexpiratoryvolume;
  if (forcedexpiratoryvolume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.ForcedExpiratoryVolume)
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::release_forcedexpiratoryvolume() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = forcedexpiratoryvolume_;
  forcedexpiratoryvolume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::unsafe_arena_release_forcedexpiratoryvolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PulmonaryFunctionTestData.ForcedExpiratoryVolume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = forcedexpiratoryvolume_;
  forcedexpiratoryvolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::_internal_mutable_forcedexpiratoryvolume() {
  
  if (forcedexpiratoryvolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    forcedexpiratoryvolume_ = p;
  }
  return forcedexpiratoryvolume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::mutable_forcedexpiratoryvolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PulmonaryFunctionTestData.ForcedExpiratoryVolume)
  return _internal_mutable_forcedexpiratoryvolume();
}
inline void PulmonaryFunctionTestData::set_allocated_forcedexpiratoryvolume(::pulse::cdm::bind::ScalarVolumeData* forcedexpiratoryvolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(forcedexpiratoryvolume_);
  }
  if (forcedexpiratoryvolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forcedexpiratoryvolume)->GetArena();
    if (message_arena != submessage_arena) {
      forcedexpiratoryvolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forcedexpiratoryvolume, submessage_arena);
    }
    
  } else {
    
  }
  forcedexpiratoryvolume_ = forcedexpiratoryvolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.ForcedExpiratoryVolume)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData ForcedExpiratoryFlow = 5;
inline bool PulmonaryFunctionTestData::_internal_has_forcedexpiratoryflow() const {
  return this != internal_default_instance() && forcedexpiratoryflow_ != nullptr;
}
inline bool PulmonaryFunctionTestData::has_forcedexpiratoryflow() const {
  return _internal_has_forcedexpiratoryflow();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& PulmonaryFunctionTestData::_internal_forcedexpiratoryflow() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = forcedexpiratoryflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& PulmonaryFunctionTestData::forcedexpiratoryflow() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PulmonaryFunctionTestData.ForcedExpiratoryFlow)
  return _internal_forcedexpiratoryflow();
}
inline void PulmonaryFunctionTestData::unsafe_arena_set_allocated_forcedexpiratoryflow(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* forcedexpiratoryflow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forcedexpiratoryflow_);
  }
  forcedexpiratoryflow_ = forcedexpiratoryflow;
  if (forcedexpiratoryflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.ForcedExpiratoryFlow)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* PulmonaryFunctionTestData::release_forcedexpiratoryflow() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = forcedexpiratoryflow_;
  forcedexpiratoryflow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* PulmonaryFunctionTestData::unsafe_arena_release_forcedexpiratoryflow() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PulmonaryFunctionTestData.ForcedExpiratoryFlow)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = forcedexpiratoryflow_;
  forcedexpiratoryflow_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* PulmonaryFunctionTestData::_internal_mutable_forcedexpiratoryflow() {
  
  if (forcedexpiratoryflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    forcedexpiratoryflow_ = p;
  }
  return forcedexpiratoryflow_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* PulmonaryFunctionTestData::mutable_forcedexpiratoryflow() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PulmonaryFunctionTestData.ForcedExpiratoryFlow)
  return _internal_mutable_forcedexpiratoryflow();
}
inline void PulmonaryFunctionTestData::set_allocated_forcedexpiratoryflow(::pulse::cdm::bind::ScalarVolumePerTimeData* forcedexpiratoryflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(forcedexpiratoryflow_);
  }
  if (forcedexpiratoryflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forcedexpiratoryflow)->GetArena();
    if (message_arena != submessage_arena) {
      forcedexpiratoryflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forcedexpiratoryflow, submessage_arena);
    }
    
  } else {
    
  }
  forcedexpiratoryflow_ = forcedexpiratoryflow;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.ForcedExpiratoryFlow)
}

// .pulse.cdm.bind.ScalarVolumeData FunctionalResidualCapacity = 6;
inline bool PulmonaryFunctionTestData::_internal_has_functionalresidualcapacity() const {
  return this != internal_default_instance() && functionalresidualcapacity_ != nullptr;
}
inline bool PulmonaryFunctionTestData::has_functionalresidualcapacity() const {
  return _internal_has_functionalresidualcapacity();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PulmonaryFunctionTestData::_internal_functionalresidualcapacity() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = functionalresidualcapacity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PulmonaryFunctionTestData::functionalresidualcapacity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PulmonaryFunctionTestData.FunctionalResidualCapacity)
  return _internal_functionalresidualcapacity();
}
inline void PulmonaryFunctionTestData::unsafe_arena_set_allocated_functionalresidualcapacity(
    ::pulse::cdm::bind::ScalarVolumeData* functionalresidualcapacity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(functionalresidualcapacity_);
  }
  functionalresidualcapacity_ = functionalresidualcapacity;
  if (functionalresidualcapacity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.FunctionalResidualCapacity)
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::release_functionalresidualcapacity() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = functionalresidualcapacity_;
  functionalresidualcapacity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::unsafe_arena_release_functionalresidualcapacity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PulmonaryFunctionTestData.FunctionalResidualCapacity)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = functionalresidualcapacity_;
  functionalresidualcapacity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::_internal_mutable_functionalresidualcapacity() {
  
  if (functionalresidualcapacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    functionalresidualcapacity_ = p;
  }
  return functionalresidualcapacity_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::mutable_functionalresidualcapacity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PulmonaryFunctionTestData.FunctionalResidualCapacity)
  return _internal_mutable_functionalresidualcapacity();
}
inline void PulmonaryFunctionTestData::set_allocated_functionalresidualcapacity(::pulse::cdm::bind::ScalarVolumeData* functionalresidualcapacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(functionalresidualcapacity_);
  }
  if (functionalresidualcapacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(functionalresidualcapacity)->GetArena();
    if (message_arena != submessage_arena) {
      functionalresidualcapacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, functionalresidualcapacity, submessage_arena);
    }
    
  } else {
    
  }
  functionalresidualcapacity_ = functionalresidualcapacity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.FunctionalResidualCapacity)
}

// .pulse.cdm.bind.ScalarVolumeData InspiratoryCapacity = 7;
inline bool PulmonaryFunctionTestData::_internal_has_inspiratorycapacity() const {
  return this != internal_default_instance() && inspiratorycapacity_ != nullptr;
}
inline bool PulmonaryFunctionTestData::has_inspiratorycapacity() const {
  return _internal_has_inspiratorycapacity();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PulmonaryFunctionTestData::_internal_inspiratorycapacity() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = inspiratorycapacity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PulmonaryFunctionTestData::inspiratorycapacity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PulmonaryFunctionTestData.InspiratoryCapacity)
  return _internal_inspiratorycapacity();
}
inline void PulmonaryFunctionTestData::unsafe_arena_set_allocated_inspiratorycapacity(
    ::pulse::cdm::bind::ScalarVolumeData* inspiratorycapacity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspiratorycapacity_);
  }
  inspiratorycapacity_ = inspiratorycapacity;
  if (inspiratorycapacity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.InspiratoryCapacity)
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::release_inspiratorycapacity() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = inspiratorycapacity_;
  inspiratorycapacity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::unsafe_arena_release_inspiratorycapacity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PulmonaryFunctionTestData.InspiratoryCapacity)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = inspiratorycapacity_;
  inspiratorycapacity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::_internal_mutable_inspiratorycapacity() {
  
  if (inspiratorycapacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    inspiratorycapacity_ = p;
  }
  return inspiratorycapacity_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::mutable_inspiratorycapacity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PulmonaryFunctionTestData.InspiratoryCapacity)
  return _internal_mutable_inspiratorycapacity();
}
inline void PulmonaryFunctionTestData::set_allocated_inspiratorycapacity(::pulse::cdm::bind::ScalarVolumeData* inspiratorycapacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspiratorycapacity_);
  }
  if (inspiratorycapacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspiratorycapacity)->GetArena();
    if (message_arena != submessage_arena) {
      inspiratorycapacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inspiratorycapacity, submessage_arena);
    }
    
  } else {
    
  }
  inspiratorycapacity_ = inspiratorycapacity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.InspiratoryCapacity)
}

// .pulse.cdm.bind.ScalarVolumeData InspiratoryReserveVolume = 8;
inline bool PulmonaryFunctionTestData::_internal_has_inspiratoryreservevolume() const {
  return this != internal_default_instance() && inspiratoryreservevolume_ != nullptr;
}
inline bool PulmonaryFunctionTestData::has_inspiratoryreservevolume() const {
  return _internal_has_inspiratoryreservevolume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PulmonaryFunctionTestData::_internal_inspiratoryreservevolume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = inspiratoryreservevolume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PulmonaryFunctionTestData::inspiratoryreservevolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PulmonaryFunctionTestData.InspiratoryReserveVolume)
  return _internal_inspiratoryreservevolume();
}
inline void PulmonaryFunctionTestData::unsafe_arena_set_allocated_inspiratoryreservevolume(
    ::pulse::cdm::bind::ScalarVolumeData* inspiratoryreservevolume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspiratoryreservevolume_);
  }
  inspiratoryreservevolume_ = inspiratoryreservevolume;
  if (inspiratoryreservevolume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.InspiratoryReserveVolume)
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::release_inspiratoryreservevolume() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = inspiratoryreservevolume_;
  inspiratoryreservevolume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::unsafe_arena_release_inspiratoryreservevolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PulmonaryFunctionTestData.InspiratoryReserveVolume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = inspiratoryreservevolume_;
  inspiratoryreservevolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::_internal_mutable_inspiratoryreservevolume() {
  
  if (inspiratoryreservevolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    inspiratoryreservevolume_ = p;
  }
  return inspiratoryreservevolume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::mutable_inspiratoryreservevolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PulmonaryFunctionTestData.InspiratoryReserveVolume)
  return _internal_mutable_inspiratoryreservevolume();
}
inline void PulmonaryFunctionTestData::set_allocated_inspiratoryreservevolume(::pulse::cdm::bind::ScalarVolumeData* inspiratoryreservevolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspiratoryreservevolume_);
  }
  if (inspiratoryreservevolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspiratoryreservevolume)->GetArena();
    if (message_arena != submessage_arena) {
      inspiratoryreservevolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inspiratoryreservevolume, submessage_arena);
    }
    
  } else {
    
  }
  inspiratoryreservevolume_ = inspiratoryreservevolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.InspiratoryReserveVolume)
}

// .pulse.cdm.bind.ScalarVolumeData MaximumVoluntaryVentilation = 9;
inline bool PulmonaryFunctionTestData::_internal_has_maximumvoluntaryventilation() const {
  return this != internal_default_instance() && maximumvoluntaryventilation_ != nullptr;
}
inline bool PulmonaryFunctionTestData::has_maximumvoluntaryventilation() const {
  return _internal_has_maximumvoluntaryventilation();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PulmonaryFunctionTestData::_internal_maximumvoluntaryventilation() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = maximumvoluntaryventilation_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PulmonaryFunctionTestData::maximumvoluntaryventilation() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PulmonaryFunctionTestData.MaximumVoluntaryVentilation)
  return _internal_maximumvoluntaryventilation();
}
inline void PulmonaryFunctionTestData::unsafe_arena_set_allocated_maximumvoluntaryventilation(
    ::pulse::cdm::bind::ScalarVolumeData* maximumvoluntaryventilation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximumvoluntaryventilation_);
  }
  maximumvoluntaryventilation_ = maximumvoluntaryventilation;
  if (maximumvoluntaryventilation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.MaximumVoluntaryVentilation)
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::release_maximumvoluntaryventilation() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = maximumvoluntaryventilation_;
  maximumvoluntaryventilation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::unsafe_arena_release_maximumvoluntaryventilation() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PulmonaryFunctionTestData.MaximumVoluntaryVentilation)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = maximumvoluntaryventilation_;
  maximumvoluntaryventilation_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::_internal_mutable_maximumvoluntaryventilation() {
  
  if (maximumvoluntaryventilation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    maximumvoluntaryventilation_ = p;
  }
  return maximumvoluntaryventilation_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::mutable_maximumvoluntaryventilation() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PulmonaryFunctionTestData.MaximumVoluntaryVentilation)
  return _internal_mutable_maximumvoluntaryventilation();
}
inline void PulmonaryFunctionTestData::set_allocated_maximumvoluntaryventilation(::pulse::cdm::bind::ScalarVolumeData* maximumvoluntaryventilation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximumvoluntaryventilation_);
  }
  if (maximumvoluntaryventilation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximumvoluntaryventilation)->GetArena();
    if (message_arena != submessage_arena) {
      maximumvoluntaryventilation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maximumvoluntaryventilation, submessage_arena);
    }
    
  } else {
    
  }
  maximumvoluntaryventilation_ = maximumvoluntaryventilation;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.MaximumVoluntaryVentilation)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData PeakExpiratoryFlow = 10;
inline bool PulmonaryFunctionTestData::_internal_has_peakexpiratoryflow() const {
  return this != internal_default_instance() && peakexpiratoryflow_ != nullptr;
}
inline bool PulmonaryFunctionTestData::has_peakexpiratoryflow() const {
  return _internal_has_peakexpiratoryflow();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& PulmonaryFunctionTestData::_internal_peakexpiratoryflow() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = peakexpiratoryflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& PulmonaryFunctionTestData::peakexpiratoryflow() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PulmonaryFunctionTestData.PeakExpiratoryFlow)
  return _internal_peakexpiratoryflow();
}
inline void PulmonaryFunctionTestData::unsafe_arena_set_allocated_peakexpiratoryflow(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* peakexpiratoryflow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peakexpiratoryflow_);
  }
  peakexpiratoryflow_ = peakexpiratoryflow;
  if (peakexpiratoryflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.PeakExpiratoryFlow)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* PulmonaryFunctionTestData::release_peakexpiratoryflow() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = peakexpiratoryflow_;
  peakexpiratoryflow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* PulmonaryFunctionTestData::unsafe_arena_release_peakexpiratoryflow() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PulmonaryFunctionTestData.PeakExpiratoryFlow)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = peakexpiratoryflow_;
  peakexpiratoryflow_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* PulmonaryFunctionTestData::_internal_mutable_peakexpiratoryflow() {
  
  if (peakexpiratoryflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    peakexpiratoryflow_ = p;
  }
  return peakexpiratoryflow_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* PulmonaryFunctionTestData::mutable_peakexpiratoryflow() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PulmonaryFunctionTestData.PeakExpiratoryFlow)
  return _internal_mutable_peakexpiratoryflow();
}
inline void PulmonaryFunctionTestData::set_allocated_peakexpiratoryflow(::pulse::cdm::bind::ScalarVolumePerTimeData* peakexpiratoryflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peakexpiratoryflow_);
  }
  if (peakexpiratoryflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peakexpiratoryflow)->GetArena();
    if (message_arena != submessage_arena) {
      peakexpiratoryflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peakexpiratoryflow, submessage_arena);
    }
    
  } else {
    
  }
  peakexpiratoryflow_ = peakexpiratoryflow;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.PeakExpiratoryFlow)
}

// .pulse.cdm.bind.ScalarVolumeData ResidualVolume = 11;
inline bool PulmonaryFunctionTestData::_internal_has_residualvolume() const {
  return this != internal_default_instance() && residualvolume_ != nullptr;
}
inline bool PulmonaryFunctionTestData::has_residualvolume() const {
  return _internal_has_residualvolume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PulmonaryFunctionTestData::_internal_residualvolume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = residualvolume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PulmonaryFunctionTestData::residualvolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PulmonaryFunctionTestData.ResidualVolume)
  return _internal_residualvolume();
}
inline void PulmonaryFunctionTestData::unsafe_arena_set_allocated_residualvolume(
    ::pulse::cdm::bind::ScalarVolumeData* residualvolume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(residualvolume_);
  }
  residualvolume_ = residualvolume;
  if (residualvolume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.ResidualVolume)
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::release_residualvolume() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = residualvolume_;
  residualvolume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::unsafe_arena_release_residualvolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PulmonaryFunctionTestData.ResidualVolume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = residualvolume_;
  residualvolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::_internal_mutable_residualvolume() {
  
  if (residualvolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    residualvolume_ = p;
  }
  return residualvolume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::mutable_residualvolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PulmonaryFunctionTestData.ResidualVolume)
  return _internal_mutable_residualvolume();
}
inline void PulmonaryFunctionTestData::set_allocated_residualvolume(::pulse::cdm::bind::ScalarVolumeData* residualvolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(residualvolume_);
  }
  if (residualvolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(residualvolume)->GetArena();
    if (message_arena != submessage_arena) {
      residualvolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, residualvolume, submessage_arena);
    }
    
  } else {
    
  }
  residualvolume_ = residualvolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.ResidualVolume)
}

// .pulse.cdm.bind.ScalarVolumeData SlowVitalCapacity = 12;
inline bool PulmonaryFunctionTestData::_internal_has_slowvitalcapacity() const {
  return this != internal_default_instance() && slowvitalcapacity_ != nullptr;
}
inline bool PulmonaryFunctionTestData::has_slowvitalcapacity() const {
  return _internal_has_slowvitalcapacity();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PulmonaryFunctionTestData::_internal_slowvitalcapacity() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = slowvitalcapacity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PulmonaryFunctionTestData::slowvitalcapacity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PulmonaryFunctionTestData.SlowVitalCapacity)
  return _internal_slowvitalcapacity();
}
inline void PulmonaryFunctionTestData::unsafe_arena_set_allocated_slowvitalcapacity(
    ::pulse::cdm::bind::ScalarVolumeData* slowvitalcapacity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slowvitalcapacity_);
  }
  slowvitalcapacity_ = slowvitalcapacity;
  if (slowvitalcapacity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.SlowVitalCapacity)
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::release_slowvitalcapacity() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = slowvitalcapacity_;
  slowvitalcapacity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::unsafe_arena_release_slowvitalcapacity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PulmonaryFunctionTestData.SlowVitalCapacity)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = slowvitalcapacity_;
  slowvitalcapacity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::_internal_mutable_slowvitalcapacity() {
  
  if (slowvitalcapacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    slowvitalcapacity_ = p;
  }
  return slowvitalcapacity_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::mutable_slowvitalcapacity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PulmonaryFunctionTestData.SlowVitalCapacity)
  return _internal_mutable_slowvitalcapacity();
}
inline void PulmonaryFunctionTestData::set_allocated_slowvitalcapacity(::pulse::cdm::bind::ScalarVolumeData* slowvitalcapacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slowvitalcapacity_);
  }
  if (slowvitalcapacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slowvitalcapacity)->GetArena();
    if (message_arena != submessage_arena) {
      slowvitalcapacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slowvitalcapacity, submessage_arena);
    }
    
  } else {
    
  }
  slowvitalcapacity_ = slowvitalcapacity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.SlowVitalCapacity)
}

// .pulse.cdm.bind.ScalarVolumeData TotalLungCapacity = 13;
inline bool PulmonaryFunctionTestData::_internal_has_totallungcapacity() const {
  return this != internal_default_instance() && totallungcapacity_ != nullptr;
}
inline bool PulmonaryFunctionTestData::has_totallungcapacity() const {
  return _internal_has_totallungcapacity();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PulmonaryFunctionTestData::_internal_totallungcapacity() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = totallungcapacity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PulmonaryFunctionTestData::totallungcapacity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PulmonaryFunctionTestData.TotalLungCapacity)
  return _internal_totallungcapacity();
}
inline void PulmonaryFunctionTestData::unsafe_arena_set_allocated_totallungcapacity(
    ::pulse::cdm::bind::ScalarVolumeData* totallungcapacity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totallungcapacity_);
  }
  totallungcapacity_ = totallungcapacity;
  if (totallungcapacity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.TotalLungCapacity)
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::release_totallungcapacity() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = totallungcapacity_;
  totallungcapacity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::unsafe_arena_release_totallungcapacity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PulmonaryFunctionTestData.TotalLungCapacity)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = totallungcapacity_;
  totallungcapacity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::_internal_mutable_totallungcapacity() {
  
  if (totallungcapacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    totallungcapacity_ = p;
  }
  return totallungcapacity_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::mutable_totallungcapacity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PulmonaryFunctionTestData.TotalLungCapacity)
  return _internal_mutable_totallungcapacity();
}
inline void PulmonaryFunctionTestData::set_allocated_totallungcapacity(::pulse::cdm::bind::ScalarVolumeData* totallungcapacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(totallungcapacity_);
  }
  if (totallungcapacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totallungcapacity)->GetArena();
    if (message_arena != submessage_arena) {
      totallungcapacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totallungcapacity, submessage_arena);
    }
    
  } else {
    
  }
  totallungcapacity_ = totallungcapacity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.TotalLungCapacity)
}

// .pulse.cdm.bind.ScalarVolumeData VitalCapacity = 14;
inline bool PulmonaryFunctionTestData::_internal_has_vitalcapacity() const {
  return this != internal_default_instance() && vitalcapacity_ != nullptr;
}
inline bool PulmonaryFunctionTestData::has_vitalcapacity() const {
  return _internal_has_vitalcapacity();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PulmonaryFunctionTestData::_internal_vitalcapacity() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = vitalcapacity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& PulmonaryFunctionTestData::vitalcapacity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PulmonaryFunctionTestData.VitalCapacity)
  return _internal_vitalcapacity();
}
inline void PulmonaryFunctionTestData::unsafe_arena_set_allocated_vitalcapacity(
    ::pulse::cdm::bind::ScalarVolumeData* vitalcapacity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vitalcapacity_);
  }
  vitalcapacity_ = vitalcapacity;
  if (vitalcapacity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.VitalCapacity)
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::release_vitalcapacity() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = vitalcapacity_;
  vitalcapacity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::unsafe_arena_release_vitalcapacity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PulmonaryFunctionTestData.VitalCapacity)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = vitalcapacity_;
  vitalcapacity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::_internal_mutable_vitalcapacity() {
  
  if (vitalcapacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    vitalcapacity_ = p;
  }
  return vitalcapacity_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* PulmonaryFunctionTestData::mutable_vitalcapacity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PulmonaryFunctionTestData.VitalCapacity)
  return _internal_mutable_vitalcapacity();
}
inline void PulmonaryFunctionTestData::set_allocated_vitalcapacity(::pulse::cdm::bind::ScalarVolumeData* vitalcapacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vitalcapacity_);
  }
  if (vitalcapacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vitalcapacity)->GetArena();
    if (message_arena != submessage_arena) {
      vitalcapacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vitalcapacity, submessage_arena);
    }
    
  } else {
    
  }
  vitalcapacity_ = vitalcapacity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.VitalCapacity)
}

// .pulse.cdm.bind.FunctionVolumeVsTimeData LungVolumePlot = 15;
inline bool PulmonaryFunctionTestData::_internal_has_lungvolumeplot() const {
  return this != internal_default_instance() && lungvolumeplot_ != nullptr;
}
inline bool PulmonaryFunctionTestData::has_lungvolumeplot() const {
  return _internal_has_lungvolumeplot();
}
inline const ::pulse::cdm::bind::FunctionVolumeVsTimeData& PulmonaryFunctionTestData::_internal_lungvolumeplot() const {
  const ::pulse::cdm::bind::FunctionVolumeVsTimeData* p = lungvolumeplot_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::FunctionVolumeVsTimeData&>(
      ::pulse::cdm::bind::_FunctionVolumeVsTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::FunctionVolumeVsTimeData& PulmonaryFunctionTestData::lungvolumeplot() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PulmonaryFunctionTestData.LungVolumePlot)
  return _internal_lungvolumeplot();
}
inline void PulmonaryFunctionTestData::unsafe_arena_set_allocated_lungvolumeplot(
    ::pulse::cdm::bind::FunctionVolumeVsTimeData* lungvolumeplot) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lungvolumeplot_);
  }
  lungvolumeplot_ = lungvolumeplot;
  if (lungvolumeplot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.LungVolumePlot)
}
inline ::pulse::cdm::bind::FunctionVolumeVsTimeData* PulmonaryFunctionTestData::release_lungvolumeplot() {
  
  ::pulse::cdm::bind::FunctionVolumeVsTimeData* temp = lungvolumeplot_;
  lungvolumeplot_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::FunctionVolumeVsTimeData* PulmonaryFunctionTestData::unsafe_arena_release_lungvolumeplot() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PulmonaryFunctionTestData.LungVolumePlot)
  
  ::pulse::cdm::bind::FunctionVolumeVsTimeData* temp = lungvolumeplot_;
  lungvolumeplot_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::FunctionVolumeVsTimeData* PulmonaryFunctionTestData::_internal_mutable_lungvolumeplot() {
  
  if (lungvolumeplot_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::FunctionVolumeVsTimeData>(GetArena());
    lungvolumeplot_ = p;
  }
  return lungvolumeplot_;
}
inline ::pulse::cdm::bind::FunctionVolumeVsTimeData* PulmonaryFunctionTestData::mutable_lungvolumeplot() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PulmonaryFunctionTestData.LungVolumePlot)
  return _internal_mutable_lungvolumeplot();
}
inline void PulmonaryFunctionTestData::set_allocated_lungvolumeplot(::pulse::cdm::bind::FunctionVolumeVsTimeData* lungvolumeplot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lungvolumeplot_);
  }
  if (lungvolumeplot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lungvolumeplot)->GetArena();
    if (message_arena != submessage_arena) {
      lungvolumeplot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lungvolumeplot, submessage_arena);
    }
    
  } else {
    
  }
  lungvolumeplot_ = lungvolumeplot;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PulmonaryFunctionTestData.LungVolumePlot)
}

// -------------------------------------------------------------------

// CompleteBloodCountData

// .pulse.cdm.bind.PatientAssessmentData PatientAssessment = 1;
inline bool CompleteBloodCountData::_internal_has_patientassessment() const {
  return this != internal_default_instance() && patientassessment_ != nullptr;
}
inline bool CompleteBloodCountData::has_patientassessment() const {
  return _internal_has_patientassessment();
}
inline void CompleteBloodCountData::clear_patientassessment() {
  if (GetArena() == nullptr && patientassessment_ != nullptr) {
    delete patientassessment_;
  }
  patientassessment_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientAssessmentData& CompleteBloodCountData::_internal_patientassessment() const {
  const ::pulse::cdm::bind::PatientAssessmentData* p = patientassessment_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientAssessmentData&>(
      ::pulse::cdm::bind::_PatientAssessmentData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientAssessmentData& CompleteBloodCountData::patientassessment() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompleteBloodCountData.PatientAssessment)
  return _internal_patientassessment();
}
inline void CompleteBloodCountData::unsafe_arena_set_allocated_patientassessment(
    ::pulse::cdm::bind::PatientAssessmentData* patientassessment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientassessment_);
  }
  patientassessment_ = patientassessment;
  if (patientassessment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CompleteBloodCountData.PatientAssessment)
}
inline ::pulse::cdm::bind::PatientAssessmentData* CompleteBloodCountData::release_patientassessment() {
  
  ::pulse::cdm::bind::PatientAssessmentData* temp = patientassessment_;
  patientassessment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientAssessmentData* CompleteBloodCountData::unsafe_arena_release_patientassessment() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CompleteBloodCountData.PatientAssessment)
  
  ::pulse::cdm::bind::PatientAssessmentData* temp = patientassessment_;
  patientassessment_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientAssessmentData* CompleteBloodCountData::_internal_mutable_patientassessment() {
  
  if (patientassessment_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientAssessmentData>(GetArena());
    patientassessment_ = p;
  }
  return patientassessment_;
}
inline ::pulse::cdm::bind::PatientAssessmentData* CompleteBloodCountData::mutable_patientassessment() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompleteBloodCountData.PatientAssessment)
  return _internal_mutable_patientassessment();
}
inline void CompleteBloodCountData::set_allocated_patientassessment(::pulse::cdm::bind::PatientAssessmentData* patientassessment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientassessment_;
  }
  if (patientassessment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientassessment);
    if (message_arena != submessage_arena) {
      patientassessment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientassessment, submessage_arena);
    }
    
  } else {
    
  }
  patientassessment_ = patientassessment;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CompleteBloodCountData.PatientAssessment)
}

// .pulse.cdm.bind.Scalar0To1Data Hematocrit = 2;
inline bool CompleteBloodCountData::_internal_has_hematocrit() const {
  return this != internal_default_instance() && hematocrit_ != nullptr;
}
inline bool CompleteBloodCountData::has_hematocrit() const {
  return _internal_has_hematocrit();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& CompleteBloodCountData::_internal_hematocrit() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = hematocrit_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& CompleteBloodCountData::hematocrit() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompleteBloodCountData.Hematocrit)
  return _internal_hematocrit();
}
inline void CompleteBloodCountData::unsafe_arena_set_allocated_hematocrit(
    ::pulse::cdm::bind::Scalar0To1Data* hematocrit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hematocrit_);
  }
  hematocrit_ = hematocrit;
  if (hematocrit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CompleteBloodCountData.Hematocrit)
}
inline ::pulse::cdm::bind::Scalar0To1Data* CompleteBloodCountData::release_hematocrit() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = hematocrit_;
  hematocrit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* CompleteBloodCountData::unsafe_arena_release_hematocrit() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CompleteBloodCountData.Hematocrit)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = hematocrit_;
  hematocrit_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* CompleteBloodCountData::_internal_mutable_hematocrit() {
  
  if (hematocrit_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    hematocrit_ = p;
  }
  return hematocrit_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* CompleteBloodCountData::mutable_hematocrit() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompleteBloodCountData.Hematocrit)
  return _internal_mutable_hematocrit();
}
inline void CompleteBloodCountData::set_allocated_hematocrit(::pulse::cdm::bind::Scalar0To1Data* hematocrit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hematocrit_);
  }
  if (hematocrit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hematocrit)->GetArena();
    if (message_arena != submessage_arena) {
      hematocrit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hematocrit, submessage_arena);
    }
    
  } else {
    
  }
  hematocrit_ = hematocrit;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CompleteBloodCountData.Hematocrit)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData Hemoglobin = 3;
inline bool CompleteBloodCountData::_internal_has_hemoglobin() const {
  return this != internal_default_instance() && hemoglobin_ != nullptr;
}
inline bool CompleteBloodCountData::has_hemoglobin() const {
  return _internal_has_hemoglobin();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& CompleteBloodCountData::_internal_hemoglobin() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = hemoglobin_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& CompleteBloodCountData::hemoglobin() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompleteBloodCountData.Hemoglobin)
  return _internal_hemoglobin();
}
inline void CompleteBloodCountData::unsafe_arena_set_allocated_hemoglobin(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* hemoglobin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hemoglobin_);
  }
  hemoglobin_ = hemoglobin;
  if (hemoglobin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CompleteBloodCountData.Hemoglobin)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* CompleteBloodCountData::release_hemoglobin() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = hemoglobin_;
  hemoglobin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* CompleteBloodCountData::unsafe_arena_release_hemoglobin() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CompleteBloodCountData.Hemoglobin)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = hemoglobin_;
  hemoglobin_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* CompleteBloodCountData::_internal_mutable_hemoglobin() {
  
  if (hemoglobin_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    hemoglobin_ = p;
  }
  return hemoglobin_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* CompleteBloodCountData::mutable_hemoglobin() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompleteBloodCountData.Hemoglobin)
  return _internal_mutable_hemoglobin();
}
inline void CompleteBloodCountData::set_allocated_hemoglobin(::pulse::cdm::bind::ScalarMassPerVolumeData* hemoglobin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hemoglobin_);
  }
  if (hemoglobin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hemoglobin)->GetArena();
    if (message_arena != submessage_arena) {
      hemoglobin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hemoglobin, submessage_arena);
    }
    
  } else {
    
  }
  hemoglobin_ = hemoglobin;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CompleteBloodCountData.Hemoglobin)
}

// .pulse.cdm.bind.ScalarAmountPerVolumeData PlateletCount = 4;
inline bool CompleteBloodCountData::_internal_has_plateletcount() const {
  return this != internal_default_instance() && plateletcount_ != nullptr;
}
inline bool CompleteBloodCountData::has_plateletcount() const {
  return _internal_has_plateletcount();
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& CompleteBloodCountData::_internal_plateletcount() const {
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData* p = plateletcount_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAmountPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarAmountPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& CompleteBloodCountData::plateletcount() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompleteBloodCountData.PlateletCount)
  return _internal_plateletcount();
}
inline void CompleteBloodCountData::unsafe_arena_set_allocated_plateletcount(
    ::pulse::cdm::bind::ScalarAmountPerVolumeData* plateletcount) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plateletcount_);
  }
  plateletcount_ = plateletcount;
  if (plateletcount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CompleteBloodCountData.PlateletCount)
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* CompleteBloodCountData::release_plateletcount() {
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = plateletcount_;
  plateletcount_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* CompleteBloodCountData::unsafe_arena_release_plateletcount() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CompleteBloodCountData.PlateletCount)
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = plateletcount_;
  plateletcount_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* CompleteBloodCountData::_internal_mutable_plateletcount() {
  
  if (plateletcount_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountPerVolumeData>(GetArena());
    plateletcount_ = p;
  }
  return plateletcount_;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* CompleteBloodCountData::mutable_plateletcount() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompleteBloodCountData.PlateletCount)
  return _internal_mutable_plateletcount();
}
inline void CompleteBloodCountData::set_allocated_plateletcount(::pulse::cdm::bind::ScalarAmountPerVolumeData* plateletcount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(plateletcount_);
  }
  if (plateletcount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plateletcount)->GetArena();
    if (message_arena != submessage_arena) {
      plateletcount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plateletcount, submessage_arena);
    }
    
  } else {
    
  }
  plateletcount_ = plateletcount;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CompleteBloodCountData.PlateletCount)
}

// .pulse.cdm.bind.ScalarMassPerAmountData MeanCorpuscularHemoglobin = 5;
inline bool CompleteBloodCountData::_internal_has_meancorpuscularhemoglobin() const {
  return this != internal_default_instance() && meancorpuscularhemoglobin_ != nullptr;
}
inline bool CompleteBloodCountData::has_meancorpuscularhemoglobin() const {
  return _internal_has_meancorpuscularhemoglobin();
}
inline const ::pulse::cdm::bind::ScalarMassPerAmountData& CompleteBloodCountData::_internal_meancorpuscularhemoglobin() const {
  const ::pulse::cdm::bind::ScalarMassPerAmountData* p = meancorpuscularhemoglobin_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerAmountData&>(
      ::pulse::cdm::bind::_ScalarMassPerAmountData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerAmountData& CompleteBloodCountData::meancorpuscularhemoglobin() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompleteBloodCountData.MeanCorpuscularHemoglobin)
  return _internal_meancorpuscularhemoglobin();
}
inline void CompleteBloodCountData::unsafe_arena_set_allocated_meancorpuscularhemoglobin(
    ::pulse::cdm::bind::ScalarMassPerAmountData* meancorpuscularhemoglobin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meancorpuscularhemoglobin_);
  }
  meancorpuscularhemoglobin_ = meancorpuscularhemoglobin;
  if (meancorpuscularhemoglobin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CompleteBloodCountData.MeanCorpuscularHemoglobin)
}
inline ::pulse::cdm::bind::ScalarMassPerAmountData* CompleteBloodCountData::release_meancorpuscularhemoglobin() {
  
  ::pulse::cdm::bind::ScalarMassPerAmountData* temp = meancorpuscularhemoglobin_;
  meancorpuscularhemoglobin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerAmountData* CompleteBloodCountData::unsafe_arena_release_meancorpuscularhemoglobin() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CompleteBloodCountData.MeanCorpuscularHemoglobin)
  
  ::pulse::cdm::bind::ScalarMassPerAmountData* temp = meancorpuscularhemoglobin_;
  meancorpuscularhemoglobin_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerAmountData* CompleteBloodCountData::_internal_mutable_meancorpuscularhemoglobin() {
  
  if (meancorpuscularhemoglobin_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerAmountData>(GetArena());
    meancorpuscularhemoglobin_ = p;
  }
  return meancorpuscularhemoglobin_;
}
inline ::pulse::cdm::bind::ScalarMassPerAmountData* CompleteBloodCountData::mutable_meancorpuscularhemoglobin() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompleteBloodCountData.MeanCorpuscularHemoglobin)
  return _internal_mutable_meancorpuscularhemoglobin();
}
inline void CompleteBloodCountData::set_allocated_meancorpuscularhemoglobin(::pulse::cdm::bind::ScalarMassPerAmountData* meancorpuscularhemoglobin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meancorpuscularhemoglobin_);
  }
  if (meancorpuscularhemoglobin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meancorpuscularhemoglobin)->GetArena();
    if (message_arena != submessage_arena) {
      meancorpuscularhemoglobin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meancorpuscularhemoglobin, submessage_arena);
    }
    
  } else {
    
  }
  meancorpuscularhemoglobin_ = meancorpuscularhemoglobin;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CompleteBloodCountData.MeanCorpuscularHemoglobin)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData MeanCorpuscularHemoglobinConcentration = 6;
inline bool CompleteBloodCountData::_internal_has_meancorpuscularhemoglobinconcentration() const {
  return this != internal_default_instance() && meancorpuscularhemoglobinconcentration_ != nullptr;
}
inline bool CompleteBloodCountData::has_meancorpuscularhemoglobinconcentration() const {
  return _internal_has_meancorpuscularhemoglobinconcentration();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& CompleteBloodCountData::_internal_meancorpuscularhemoglobinconcentration() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = meancorpuscularhemoglobinconcentration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& CompleteBloodCountData::meancorpuscularhemoglobinconcentration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompleteBloodCountData.MeanCorpuscularHemoglobinConcentration)
  return _internal_meancorpuscularhemoglobinconcentration();
}
inline void CompleteBloodCountData::unsafe_arena_set_allocated_meancorpuscularhemoglobinconcentration(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* meancorpuscularhemoglobinconcentration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meancorpuscularhemoglobinconcentration_);
  }
  meancorpuscularhemoglobinconcentration_ = meancorpuscularhemoglobinconcentration;
  if (meancorpuscularhemoglobinconcentration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CompleteBloodCountData.MeanCorpuscularHemoglobinConcentration)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* CompleteBloodCountData::release_meancorpuscularhemoglobinconcentration() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = meancorpuscularhemoglobinconcentration_;
  meancorpuscularhemoglobinconcentration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* CompleteBloodCountData::unsafe_arena_release_meancorpuscularhemoglobinconcentration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CompleteBloodCountData.MeanCorpuscularHemoglobinConcentration)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = meancorpuscularhemoglobinconcentration_;
  meancorpuscularhemoglobinconcentration_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* CompleteBloodCountData::_internal_mutable_meancorpuscularhemoglobinconcentration() {
  
  if (meancorpuscularhemoglobinconcentration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    meancorpuscularhemoglobinconcentration_ = p;
  }
  return meancorpuscularhemoglobinconcentration_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* CompleteBloodCountData::mutable_meancorpuscularhemoglobinconcentration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompleteBloodCountData.MeanCorpuscularHemoglobinConcentration)
  return _internal_mutable_meancorpuscularhemoglobinconcentration();
}
inline void CompleteBloodCountData::set_allocated_meancorpuscularhemoglobinconcentration(::pulse::cdm::bind::ScalarMassPerVolumeData* meancorpuscularhemoglobinconcentration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meancorpuscularhemoglobinconcentration_);
  }
  if (meancorpuscularhemoglobinconcentration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meancorpuscularhemoglobinconcentration)->GetArena();
    if (message_arena != submessage_arena) {
      meancorpuscularhemoglobinconcentration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meancorpuscularhemoglobinconcentration, submessage_arena);
    }
    
  } else {
    
  }
  meancorpuscularhemoglobinconcentration_ = meancorpuscularhemoglobinconcentration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CompleteBloodCountData.MeanCorpuscularHemoglobinConcentration)
}

// .pulse.cdm.bind.ScalarVolumeData MeanCorpuscularVolume = 7;
inline bool CompleteBloodCountData::_internal_has_meancorpuscularvolume() const {
  return this != internal_default_instance() && meancorpuscularvolume_ != nullptr;
}
inline bool CompleteBloodCountData::has_meancorpuscularvolume() const {
  return _internal_has_meancorpuscularvolume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& CompleteBloodCountData::_internal_meancorpuscularvolume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = meancorpuscularvolume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& CompleteBloodCountData::meancorpuscularvolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompleteBloodCountData.MeanCorpuscularVolume)
  return _internal_meancorpuscularvolume();
}
inline void CompleteBloodCountData::unsafe_arena_set_allocated_meancorpuscularvolume(
    ::pulse::cdm::bind::ScalarVolumeData* meancorpuscularvolume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meancorpuscularvolume_);
  }
  meancorpuscularvolume_ = meancorpuscularvolume;
  if (meancorpuscularvolume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CompleteBloodCountData.MeanCorpuscularVolume)
}
inline ::pulse::cdm::bind::ScalarVolumeData* CompleteBloodCountData::release_meancorpuscularvolume() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = meancorpuscularvolume_;
  meancorpuscularvolume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* CompleteBloodCountData::unsafe_arena_release_meancorpuscularvolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CompleteBloodCountData.MeanCorpuscularVolume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = meancorpuscularvolume_;
  meancorpuscularvolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* CompleteBloodCountData::_internal_mutable_meancorpuscularvolume() {
  
  if (meancorpuscularvolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    meancorpuscularvolume_ = p;
  }
  return meancorpuscularvolume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* CompleteBloodCountData::mutable_meancorpuscularvolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompleteBloodCountData.MeanCorpuscularVolume)
  return _internal_mutable_meancorpuscularvolume();
}
inline void CompleteBloodCountData::set_allocated_meancorpuscularvolume(::pulse::cdm::bind::ScalarVolumeData* meancorpuscularvolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meancorpuscularvolume_);
  }
  if (meancorpuscularvolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meancorpuscularvolume)->GetArena();
    if (message_arena != submessage_arena) {
      meancorpuscularvolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meancorpuscularvolume, submessage_arena);
    }
    
  } else {
    
  }
  meancorpuscularvolume_ = meancorpuscularvolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CompleteBloodCountData.MeanCorpuscularVolume)
}

// .pulse.cdm.bind.ScalarAmountPerVolumeData RedBloodCellCount = 8;
inline bool CompleteBloodCountData::_internal_has_redbloodcellcount() const {
  return this != internal_default_instance() && redbloodcellcount_ != nullptr;
}
inline bool CompleteBloodCountData::has_redbloodcellcount() const {
  return _internal_has_redbloodcellcount();
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& CompleteBloodCountData::_internal_redbloodcellcount() const {
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData* p = redbloodcellcount_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAmountPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarAmountPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& CompleteBloodCountData::redbloodcellcount() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompleteBloodCountData.RedBloodCellCount)
  return _internal_redbloodcellcount();
}
inline void CompleteBloodCountData::unsafe_arena_set_allocated_redbloodcellcount(
    ::pulse::cdm::bind::ScalarAmountPerVolumeData* redbloodcellcount) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redbloodcellcount_);
  }
  redbloodcellcount_ = redbloodcellcount;
  if (redbloodcellcount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CompleteBloodCountData.RedBloodCellCount)
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* CompleteBloodCountData::release_redbloodcellcount() {
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = redbloodcellcount_;
  redbloodcellcount_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* CompleteBloodCountData::unsafe_arena_release_redbloodcellcount() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CompleteBloodCountData.RedBloodCellCount)
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = redbloodcellcount_;
  redbloodcellcount_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* CompleteBloodCountData::_internal_mutable_redbloodcellcount() {
  
  if (redbloodcellcount_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountPerVolumeData>(GetArena());
    redbloodcellcount_ = p;
  }
  return redbloodcellcount_;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* CompleteBloodCountData::mutable_redbloodcellcount() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompleteBloodCountData.RedBloodCellCount)
  return _internal_mutable_redbloodcellcount();
}
inline void CompleteBloodCountData::set_allocated_redbloodcellcount(::pulse::cdm::bind::ScalarAmountPerVolumeData* redbloodcellcount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(redbloodcellcount_);
  }
  if (redbloodcellcount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redbloodcellcount)->GetArena();
    if (message_arena != submessage_arena) {
      redbloodcellcount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redbloodcellcount, submessage_arena);
    }
    
  } else {
    
  }
  redbloodcellcount_ = redbloodcellcount;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CompleteBloodCountData.RedBloodCellCount)
}

// .pulse.cdm.bind.ScalarAmountPerVolumeData WhiteBloodCellCount = 9;
inline bool CompleteBloodCountData::_internal_has_whitebloodcellcount() const {
  return this != internal_default_instance() && whitebloodcellcount_ != nullptr;
}
inline bool CompleteBloodCountData::has_whitebloodcellcount() const {
  return _internal_has_whitebloodcellcount();
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& CompleteBloodCountData::_internal_whitebloodcellcount() const {
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData* p = whitebloodcellcount_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAmountPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarAmountPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& CompleteBloodCountData::whitebloodcellcount() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompleteBloodCountData.WhiteBloodCellCount)
  return _internal_whitebloodcellcount();
}
inline void CompleteBloodCountData::unsafe_arena_set_allocated_whitebloodcellcount(
    ::pulse::cdm::bind::ScalarAmountPerVolumeData* whitebloodcellcount) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(whitebloodcellcount_);
  }
  whitebloodcellcount_ = whitebloodcellcount;
  if (whitebloodcellcount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CompleteBloodCountData.WhiteBloodCellCount)
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* CompleteBloodCountData::release_whitebloodcellcount() {
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = whitebloodcellcount_;
  whitebloodcellcount_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* CompleteBloodCountData::unsafe_arena_release_whitebloodcellcount() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CompleteBloodCountData.WhiteBloodCellCount)
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = whitebloodcellcount_;
  whitebloodcellcount_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* CompleteBloodCountData::_internal_mutable_whitebloodcellcount() {
  
  if (whitebloodcellcount_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountPerVolumeData>(GetArena());
    whitebloodcellcount_ = p;
  }
  return whitebloodcellcount_;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* CompleteBloodCountData::mutable_whitebloodcellcount() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompleteBloodCountData.WhiteBloodCellCount)
  return _internal_mutable_whitebloodcellcount();
}
inline void CompleteBloodCountData::set_allocated_whitebloodcellcount(::pulse::cdm::bind::ScalarAmountPerVolumeData* whitebloodcellcount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(whitebloodcellcount_);
  }
  if (whitebloodcellcount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(whitebloodcellcount)->GetArena();
    if (message_arena != submessage_arena) {
      whitebloodcellcount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, whitebloodcellcount, submessage_arena);
    }
    
  } else {
    
  }
  whitebloodcellcount_ = whitebloodcellcount;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CompleteBloodCountData.WhiteBloodCellCount)
}

// -------------------------------------------------------------------

// ComprehensiveMetabolicPanelData

// .pulse.cdm.bind.PatientAssessmentData PatientAssessment = 1;
inline bool ComprehensiveMetabolicPanelData::_internal_has_patientassessment() const {
  return this != internal_default_instance() && patientassessment_ != nullptr;
}
inline bool ComprehensiveMetabolicPanelData::has_patientassessment() const {
  return _internal_has_patientassessment();
}
inline void ComprehensiveMetabolicPanelData::clear_patientassessment() {
  if (GetArena() == nullptr && patientassessment_ != nullptr) {
    delete patientassessment_;
  }
  patientassessment_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientAssessmentData& ComprehensiveMetabolicPanelData::_internal_patientassessment() const {
  const ::pulse::cdm::bind::PatientAssessmentData* p = patientassessment_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientAssessmentData&>(
      ::pulse::cdm::bind::_PatientAssessmentData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientAssessmentData& ComprehensiveMetabolicPanelData::patientassessment() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ComprehensiveMetabolicPanelData.PatientAssessment)
  return _internal_patientassessment();
}
inline void ComprehensiveMetabolicPanelData::unsafe_arena_set_allocated_patientassessment(
    ::pulse::cdm::bind::PatientAssessmentData* patientassessment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientassessment_);
  }
  patientassessment_ = patientassessment;
  if (patientassessment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.PatientAssessment)
}
inline ::pulse::cdm::bind::PatientAssessmentData* ComprehensiveMetabolicPanelData::release_patientassessment() {
  
  ::pulse::cdm::bind::PatientAssessmentData* temp = patientassessment_;
  patientassessment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientAssessmentData* ComprehensiveMetabolicPanelData::unsafe_arena_release_patientassessment() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ComprehensiveMetabolicPanelData.PatientAssessment)
  
  ::pulse::cdm::bind::PatientAssessmentData* temp = patientassessment_;
  patientassessment_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientAssessmentData* ComprehensiveMetabolicPanelData::_internal_mutable_patientassessment() {
  
  if (patientassessment_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientAssessmentData>(GetArena());
    patientassessment_ = p;
  }
  return patientassessment_;
}
inline ::pulse::cdm::bind::PatientAssessmentData* ComprehensiveMetabolicPanelData::mutable_patientassessment() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ComprehensiveMetabolicPanelData.PatientAssessment)
  return _internal_mutable_patientassessment();
}
inline void ComprehensiveMetabolicPanelData::set_allocated_patientassessment(::pulse::cdm::bind::PatientAssessmentData* patientassessment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientassessment_;
  }
  if (patientassessment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientassessment);
    if (message_arena != submessage_arena) {
      patientassessment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientassessment, submessage_arena);
    }
    
  } else {
    
  }
  patientassessment_ = patientassessment;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.PatientAssessment)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData Albumin = 2;
inline bool ComprehensiveMetabolicPanelData::_internal_has_albumin() const {
  return this != internal_default_instance() && albumin_ != nullptr;
}
inline bool ComprehensiveMetabolicPanelData::has_albumin() const {
  return _internal_has_albumin();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ComprehensiveMetabolicPanelData::_internal_albumin() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = albumin_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ComprehensiveMetabolicPanelData::albumin() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Albumin)
  return _internal_albumin();
}
inline void ComprehensiveMetabolicPanelData::unsafe_arena_set_allocated_albumin(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* albumin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(albumin_);
  }
  albumin_ = albumin;
  if (albumin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Albumin)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::release_albumin() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = albumin_;
  albumin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::unsafe_arena_release_albumin() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Albumin)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = albumin_;
  albumin_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::_internal_mutable_albumin() {
  
  if (albumin_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    albumin_ = p;
  }
  return albumin_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::mutable_albumin() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Albumin)
  return _internal_mutable_albumin();
}
inline void ComprehensiveMetabolicPanelData::set_allocated_albumin(::pulse::cdm::bind::ScalarMassPerVolumeData* albumin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(albumin_);
  }
  if (albumin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(albumin)->GetArena();
    if (message_arena != submessage_arena) {
      albumin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, albumin, submessage_arena);
    }
    
  } else {
    
  }
  albumin_ = albumin;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Albumin)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData ALP = 3;
inline bool ComprehensiveMetabolicPanelData::_internal_has_alp() const {
  return this != internal_default_instance() && alp_ != nullptr;
}
inline bool ComprehensiveMetabolicPanelData::has_alp() const {
  return _internal_has_alp();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ComprehensiveMetabolicPanelData::_internal_alp() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = alp_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ComprehensiveMetabolicPanelData::alp() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ComprehensiveMetabolicPanelData.ALP)
  return _internal_alp();
}
inline void ComprehensiveMetabolicPanelData::unsafe_arena_set_allocated_alp(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* alp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alp_);
  }
  alp_ = alp;
  if (alp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.ALP)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::release_alp() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = alp_;
  alp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::unsafe_arena_release_alp() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ComprehensiveMetabolicPanelData.ALP)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = alp_;
  alp_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::_internal_mutable_alp() {
  
  if (alp_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    alp_ = p;
  }
  return alp_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::mutable_alp() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ComprehensiveMetabolicPanelData.ALP)
  return _internal_mutable_alp();
}
inline void ComprehensiveMetabolicPanelData::set_allocated_alp(::pulse::cdm::bind::ScalarMassPerVolumeData* alp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(alp_);
  }
  if (alp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alp)->GetArena();
    if (message_arena != submessage_arena) {
      alp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alp, submessage_arena);
    }
    
  } else {
    
  }
  alp_ = alp;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.ALP)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData ALT = 4;
inline bool ComprehensiveMetabolicPanelData::_internal_has_alt() const {
  return this != internal_default_instance() && alt_ != nullptr;
}
inline bool ComprehensiveMetabolicPanelData::has_alt() const {
  return _internal_has_alt();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ComprehensiveMetabolicPanelData::_internal_alt() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = alt_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ComprehensiveMetabolicPanelData::alt() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ComprehensiveMetabolicPanelData.ALT)
  return _internal_alt();
}
inline void ComprehensiveMetabolicPanelData::unsafe_arena_set_allocated_alt(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* alt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alt_);
  }
  alt_ = alt;
  if (alt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.ALT)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::release_alt() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = alt_;
  alt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::unsafe_arena_release_alt() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ComprehensiveMetabolicPanelData.ALT)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = alt_;
  alt_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::_internal_mutable_alt() {
  
  if (alt_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    alt_ = p;
  }
  return alt_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::mutable_alt() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ComprehensiveMetabolicPanelData.ALT)
  return _internal_mutable_alt();
}
inline void ComprehensiveMetabolicPanelData::set_allocated_alt(::pulse::cdm::bind::ScalarMassPerVolumeData* alt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(alt_);
  }
  if (alt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alt)->GetArena();
    if (message_arena != submessage_arena) {
      alt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alt, submessage_arena);
    }
    
  } else {
    
  }
  alt_ = alt;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.ALT)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData AST = 5;
inline bool ComprehensiveMetabolicPanelData::_internal_has_ast() const {
  return this != internal_default_instance() && ast_ != nullptr;
}
inline bool ComprehensiveMetabolicPanelData::has_ast() const {
  return _internal_has_ast();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ComprehensiveMetabolicPanelData::_internal_ast() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = ast_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ComprehensiveMetabolicPanelData::ast() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ComprehensiveMetabolicPanelData.AST)
  return _internal_ast();
}
inline void ComprehensiveMetabolicPanelData::unsafe_arena_set_allocated_ast(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* ast) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ast_);
  }
  ast_ = ast;
  if (ast) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.AST)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::release_ast() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = ast_;
  ast_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::unsafe_arena_release_ast() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ComprehensiveMetabolicPanelData.AST)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = ast_;
  ast_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::_internal_mutable_ast() {
  
  if (ast_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    ast_ = p;
  }
  return ast_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::mutable_ast() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ComprehensiveMetabolicPanelData.AST)
  return _internal_mutable_ast();
}
inline void ComprehensiveMetabolicPanelData::set_allocated_ast(::pulse::cdm::bind::ScalarMassPerVolumeData* ast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ast_);
  }
  if (ast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ast)->GetArena();
    if (message_arena != submessage_arena) {
      ast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ast, submessage_arena);
    }
    
  } else {
    
  }
  ast_ = ast;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.AST)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData BUN = 6;
inline bool ComprehensiveMetabolicPanelData::_internal_has_bun() const {
  return this != internal_default_instance() && bun_ != nullptr;
}
inline bool ComprehensiveMetabolicPanelData::has_bun() const {
  return _internal_has_bun();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ComprehensiveMetabolicPanelData::_internal_bun() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = bun_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ComprehensiveMetabolicPanelData::bun() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ComprehensiveMetabolicPanelData.BUN)
  return _internal_bun();
}
inline void ComprehensiveMetabolicPanelData::unsafe_arena_set_allocated_bun(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* bun) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bun_);
  }
  bun_ = bun;
  if (bun) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.BUN)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::release_bun() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = bun_;
  bun_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::unsafe_arena_release_bun() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ComprehensiveMetabolicPanelData.BUN)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = bun_;
  bun_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::_internal_mutable_bun() {
  
  if (bun_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    bun_ = p;
  }
  return bun_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::mutable_bun() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ComprehensiveMetabolicPanelData.BUN)
  return _internal_mutable_bun();
}
inline void ComprehensiveMetabolicPanelData::set_allocated_bun(::pulse::cdm::bind::ScalarMassPerVolumeData* bun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bun_);
  }
  if (bun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bun)->GetArena();
    if (message_arena != submessage_arena) {
      bun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bun, submessage_arena);
    }
    
  } else {
    
  }
  bun_ = bun;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.BUN)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData Calcium = 7;
inline bool ComprehensiveMetabolicPanelData::_internal_has_calcium() const {
  return this != internal_default_instance() && calcium_ != nullptr;
}
inline bool ComprehensiveMetabolicPanelData::has_calcium() const {
  return _internal_has_calcium();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ComprehensiveMetabolicPanelData::_internal_calcium() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = calcium_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ComprehensiveMetabolicPanelData::calcium() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Calcium)
  return _internal_calcium();
}
inline void ComprehensiveMetabolicPanelData::unsafe_arena_set_allocated_calcium(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* calcium) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calcium_);
  }
  calcium_ = calcium;
  if (calcium) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Calcium)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::release_calcium() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = calcium_;
  calcium_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::unsafe_arena_release_calcium() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Calcium)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = calcium_;
  calcium_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::_internal_mutable_calcium() {
  
  if (calcium_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    calcium_ = p;
  }
  return calcium_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::mutable_calcium() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Calcium)
  return _internal_mutable_calcium();
}
inline void ComprehensiveMetabolicPanelData::set_allocated_calcium(::pulse::cdm::bind::ScalarMassPerVolumeData* calcium) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(calcium_);
  }
  if (calcium) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calcium)->GetArena();
    if (message_arena != submessage_arena) {
      calcium = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calcium, submessage_arena);
    }
    
  } else {
    
  }
  calcium_ = calcium;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Calcium)
}

// .pulse.cdm.bind.ScalarAmountPerVolumeData Chloride = 8;
inline bool ComprehensiveMetabolicPanelData::_internal_has_chloride() const {
  return this != internal_default_instance() && chloride_ != nullptr;
}
inline bool ComprehensiveMetabolicPanelData::has_chloride() const {
  return _internal_has_chloride();
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& ComprehensiveMetabolicPanelData::_internal_chloride() const {
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData* p = chloride_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAmountPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarAmountPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& ComprehensiveMetabolicPanelData::chloride() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Chloride)
  return _internal_chloride();
}
inline void ComprehensiveMetabolicPanelData::unsafe_arena_set_allocated_chloride(
    ::pulse::cdm::bind::ScalarAmountPerVolumeData* chloride) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chloride_);
  }
  chloride_ = chloride;
  if (chloride) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Chloride)
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* ComprehensiveMetabolicPanelData::release_chloride() {
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = chloride_;
  chloride_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* ComprehensiveMetabolicPanelData::unsafe_arena_release_chloride() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Chloride)
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = chloride_;
  chloride_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* ComprehensiveMetabolicPanelData::_internal_mutable_chloride() {
  
  if (chloride_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountPerVolumeData>(GetArena());
    chloride_ = p;
  }
  return chloride_;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* ComprehensiveMetabolicPanelData::mutable_chloride() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Chloride)
  return _internal_mutable_chloride();
}
inline void ComprehensiveMetabolicPanelData::set_allocated_chloride(::pulse::cdm::bind::ScalarAmountPerVolumeData* chloride) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chloride_);
  }
  if (chloride) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chloride)->GetArena();
    if (message_arena != submessage_arena) {
      chloride = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chloride, submessage_arena);
    }
    
  } else {
    
  }
  chloride_ = chloride;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Chloride)
}

// .pulse.cdm.bind.ScalarAmountPerVolumeData CO2 = 9;
inline bool ComprehensiveMetabolicPanelData::_internal_has_co2() const {
  return this != internal_default_instance() && co2_ != nullptr;
}
inline bool ComprehensiveMetabolicPanelData::has_co2() const {
  return _internal_has_co2();
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& ComprehensiveMetabolicPanelData::_internal_co2() const {
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData* p = co2_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAmountPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarAmountPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& ComprehensiveMetabolicPanelData::co2() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ComprehensiveMetabolicPanelData.CO2)
  return _internal_co2();
}
inline void ComprehensiveMetabolicPanelData::unsafe_arena_set_allocated_co2(
    ::pulse::cdm::bind::ScalarAmountPerVolumeData* co2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(co2_);
  }
  co2_ = co2;
  if (co2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.CO2)
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* ComprehensiveMetabolicPanelData::release_co2() {
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = co2_;
  co2_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* ComprehensiveMetabolicPanelData::unsafe_arena_release_co2() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ComprehensiveMetabolicPanelData.CO2)
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = co2_;
  co2_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* ComprehensiveMetabolicPanelData::_internal_mutable_co2() {
  
  if (co2_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountPerVolumeData>(GetArena());
    co2_ = p;
  }
  return co2_;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* ComprehensiveMetabolicPanelData::mutable_co2() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ComprehensiveMetabolicPanelData.CO2)
  return _internal_mutable_co2();
}
inline void ComprehensiveMetabolicPanelData::set_allocated_co2(::pulse::cdm::bind::ScalarAmountPerVolumeData* co2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(co2_);
  }
  if (co2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(co2)->GetArena();
    if (message_arena != submessage_arena) {
      co2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, co2, submessage_arena);
    }
    
  } else {
    
  }
  co2_ = co2;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.CO2)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData Creatinine = 10;
inline bool ComprehensiveMetabolicPanelData::_internal_has_creatinine() const {
  return this != internal_default_instance() && creatinine_ != nullptr;
}
inline bool ComprehensiveMetabolicPanelData::has_creatinine() const {
  return _internal_has_creatinine();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ComprehensiveMetabolicPanelData::_internal_creatinine() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = creatinine_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ComprehensiveMetabolicPanelData::creatinine() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Creatinine)
  return _internal_creatinine();
}
inline void ComprehensiveMetabolicPanelData::unsafe_arena_set_allocated_creatinine(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* creatinine) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(creatinine_);
  }
  creatinine_ = creatinine;
  if (creatinine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Creatinine)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::release_creatinine() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = creatinine_;
  creatinine_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::unsafe_arena_release_creatinine() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Creatinine)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = creatinine_;
  creatinine_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::_internal_mutable_creatinine() {
  
  if (creatinine_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    creatinine_ = p;
  }
  return creatinine_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::mutable_creatinine() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Creatinine)
  return _internal_mutable_creatinine();
}
inline void ComprehensiveMetabolicPanelData::set_allocated_creatinine(::pulse::cdm::bind::ScalarMassPerVolumeData* creatinine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(creatinine_);
  }
  if (creatinine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(creatinine)->GetArena();
    if (message_arena != submessage_arena) {
      creatinine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, creatinine, submessage_arena);
    }
    
  } else {
    
  }
  creatinine_ = creatinine;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Creatinine)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData Glucose = 11;
inline bool ComprehensiveMetabolicPanelData::_internal_has_glucose() const {
  return this != internal_default_instance() && glucose_ != nullptr;
}
inline bool ComprehensiveMetabolicPanelData::has_glucose() const {
  return _internal_has_glucose();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ComprehensiveMetabolicPanelData::_internal_glucose() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = glucose_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ComprehensiveMetabolicPanelData::glucose() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Glucose)
  return _internal_glucose();
}
inline void ComprehensiveMetabolicPanelData::unsafe_arena_set_allocated_glucose(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* glucose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(glucose_);
  }
  glucose_ = glucose;
  if (glucose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Glucose)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::release_glucose() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = glucose_;
  glucose_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::unsafe_arena_release_glucose() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Glucose)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = glucose_;
  glucose_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::_internal_mutable_glucose() {
  
  if (glucose_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    glucose_ = p;
  }
  return glucose_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::mutable_glucose() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Glucose)
  return _internal_mutable_glucose();
}
inline void ComprehensiveMetabolicPanelData::set_allocated_glucose(::pulse::cdm::bind::ScalarMassPerVolumeData* glucose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(glucose_);
  }
  if (glucose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(glucose)->GetArena();
    if (message_arena != submessage_arena) {
      glucose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, glucose, submessage_arena);
    }
    
  } else {
    
  }
  glucose_ = glucose;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Glucose)
}

// .pulse.cdm.bind.ScalarAmountPerVolumeData Potassium = 12;
inline bool ComprehensiveMetabolicPanelData::_internal_has_potassium() const {
  return this != internal_default_instance() && potassium_ != nullptr;
}
inline bool ComprehensiveMetabolicPanelData::has_potassium() const {
  return _internal_has_potassium();
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& ComprehensiveMetabolicPanelData::_internal_potassium() const {
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData* p = potassium_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAmountPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarAmountPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& ComprehensiveMetabolicPanelData::potassium() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Potassium)
  return _internal_potassium();
}
inline void ComprehensiveMetabolicPanelData::unsafe_arena_set_allocated_potassium(
    ::pulse::cdm::bind::ScalarAmountPerVolumeData* potassium) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(potassium_);
  }
  potassium_ = potassium;
  if (potassium) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Potassium)
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* ComprehensiveMetabolicPanelData::release_potassium() {
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = potassium_;
  potassium_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* ComprehensiveMetabolicPanelData::unsafe_arena_release_potassium() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Potassium)
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = potassium_;
  potassium_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* ComprehensiveMetabolicPanelData::_internal_mutable_potassium() {
  
  if (potassium_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountPerVolumeData>(GetArena());
    potassium_ = p;
  }
  return potassium_;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* ComprehensiveMetabolicPanelData::mutable_potassium() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Potassium)
  return _internal_mutable_potassium();
}
inline void ComprehensiveMetabolicPanelData::set_allocated_potassium(::pulse::cdm::bind::ScalarAmountPerVolumeData* potassium) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(potassium_);
  }
  if (potassium) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(potassium)->GetArena();
    if (message_arena != submessage_arena) {
      potassium = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, potassium, submessage_arena);
    }
    
  } else {
    
  }
  potassium_ = potassium;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Potassium)
}

// .pulse.cdm.bind.ScalarAmountPerVolumeData Sodium = 13;
inline bool ComprehensiveMetabolicPanelData::_internal_has_sodium() const {
  return this != internal_default_instance() && sodium_ != nullptr;
}
inline bool ComprehensiveMetabolicPanelData::has_sodium() const {
  return _internal_has_sodium();
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& ComprehensiveMetabolicPanelData::_internal_sodium() const {
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData* p = sodium_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAmountPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarAmountPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& ComprehensiveMetabolicPanelData::sodium() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Sodium)
  return _internal_sodium();
}
inline void ComprehensiveMetabolicPanelData::unsafe_arena_set_allocated_sodium(
    ::pulse::cdm::bind::ScalarAmountPerVolumeData* sodium) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sodium_);
  }
  sodium_ = sodium;
  if (sodium) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Sodium)
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* ComprehensiveMetabolicPanelData::release_sodium() {
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = sodium_;
  sodium_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* ComprehensiveMetabolicPanelData::unsafe_arena_release_sodium() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Sodium)
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = sodium_;
  sodium_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* ComprehensiveMetabolicPanelData::_internal_mutable_sodium() {
  
  if (sodium_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountPerVolumeData>(GetArena());
    sodium_ = p;
  }
  return sodium_;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* ComprehensiveMetabolicPanelData::mutable_sodium() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Sodium)
  return _internal_mutable_sodium();
}
inline void ComprehensiveMetabolicPanelData::set_allocated_sodium(::pulse::cdm::bind::ScalarAmountPerVolumeData* sodium) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sodium_);
  }
  if (sodium) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sodium)->GetArena();
    if (message_arena != submessage_arena) {
      sodium = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sodium, submessage_arena);
    }
    
  } else {
    
  }
  sodium_ = sodium;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.Sodium)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData TotalBilirubin = 14;
inline bool ComprehensiveMetabolicPanelData::_internal_has_totalbilirubin() const {
  return this != internal_default_instance() && totalbilirubin_ != nullptr;
}
inline bool ComprehensiveMetabolicPanelData::has_totalbilirubin() const {
  return _internal_has_totalbilirubin();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ComprehensiveMetabolicPanelData::_internal_totalbilirubin() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = totalbilirubin_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ComprehensiveMetabolicPanelData::totalbilirubin() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ComprehensiveMetabolicPanelData.TotalBilirubin)
  return _internal_totalbilirubin();
}
inline void ComprehensiveMetabolicPanelData::unsafe_arena_set_allocated_totalbilirubin(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* totalbilirubin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalbilirubin_);
  }
  totalbilirubin_ = totalbilirubin;
  if (totalbilirubin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.TotalBilirubin)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::release_totalbilirubin() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = totalbilirubin_;
  totalbilirubin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::unsafe_arena_release_totalbilirubin() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ComprehensiveMetabolicPanelData.TotalBilirubin)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = totalbilirubin_;
  totalbilirubin_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::_internal_mutable_totalbilirubin() {
  
  if (totalbilirubin_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    totalbilirubin_ = p;
  }
  return totalbilirubin_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::mutable_totalbilirubin() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ComprehensiveMetabolicPanelData.TotalBilirubin)
  return _internal_mutable_totalbilirubin();
}
inline void ComprehensiveMetabolicPanelData::set_allocated_totalbilirubin(::pulse::cdm::bind::ScalarMassPerVolumeData* totalbilirubin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalbilirubin_);
  }
  if (totalbilirubin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalbilirubin)->GetArena();
    if (message_arena != submessage_arena) {
      totalbilirubin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totalbilirubin, submessage_arena);
    }
    
  } else {
    
  }
  totalbilirubin_ = totalbilirubin;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.TotalBilirubin)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData TotalProtein = 15;
inline bool ComprehensiveMetabolicPanelData::_internal_has_totalprotein() const {
  return this != internal_default_instance() && totalprotein_ != nullptr;
}
inline bool ComprehensiveMetabolicPanelData::has_totalprotein() const {
  return _internal_has_totalprotein();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ComprehensiveMetabolicPanelData::_internal_totalprotein() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = totalprotein_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ComprehensiveMetabolicPanelData::totalprotein() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ComprehensiveMetabolicPanelData.TotalProtein)
  return _internal_totalprotein();
}
inline void ComprehensiveMetabolicPanelData::unsafe_arena_set_allocated_totalprotein(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* totalprotein) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalprotein_);
  }
  totalprotein_ = totalprotein;
  if (totalprotein) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.TotalProtein)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::release_totalprotein() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = totalprotein_;
  totalprotein_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::unsafe_arena_release_totalprotein() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ComprehensiveMetabolicPanelData.TotalProtein)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = totalprotein_;
  totalprotein_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::_internal_mutable_totalprotein() {
  
  if (totalprotein_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    totalprotein_ = p;
  }
  return totalprotein_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ComprehensiveMetabolicPanelData::mutable_totalprotein() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ComprehensiveMetabolicPanelData.TotalProtein)
  return _internal_mutable_totalprotein();
}
inline void ComprehensiveMetabolicPanelData::set_allocated_totalprotein(::pulse::cdm::bind::ScalarMassPerVolumeData* totalprotein) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalprotein_);
  }
  if (totalprotein) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalprotein)->GetArena();
    if (message_arena != submessage_arena) {
      totalprotein = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totalprotein, submessage_arena);
    }
    
  } else {
    
  }
  totalprotein_ = totalprotein;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ComprehensiveMetabolicPanelData.TotalProtein)
}

// -------------------------------------------------------------------

// UrinalysisMicroscopicData

// .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationType ObservationType = 1;
inline void UrinalysisMicroscopicData::clear_observationtype() {
  observationtype_ = 0;
}
inline ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationType UrinalysisMicroscopicData::_internal_observationtype() const {
  return static_cast< ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationType >(observationtype_);
}
inline ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationType UrinalysisMicroscopicData::observationtype() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinalysisMicroscopicData.ObservationType)
  return _internal_observationtype();
}
inline void UrinalysisMicroscopicData::_internal_set_observationtype(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationType value) {
  
  observationtype_ = value;
}
inline void UrinalysisMicroscopicData::set_observationtype(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationType value) {
  _internal_set_observationtype(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.UrinalysisMicroscopicData.ObservationType)
}

// .pulse.cdm.bind.ScalarAmountData RedBloodCells = 2;
inline bool UrinalysisMicroscopicData::_internal_has_redbloodcells() const {
  return this != internal_default_instance() && redbloodcells_ != nullptr;
}
inline bool UrinalysisMicroscopicData::has_redbloodcells() const {
  return _internal_has_redbloodcells();
}
inline const ::pulse::cdm::bind::ScalarAmountData& UrinalysisMicroscopicData::_internal_redbloodcells() const {
  const ::pulse::cdm::bind::ScalarAmountData* p = redbloodcells_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAmountData&>(
      ::pulse::cdm::bind::_ScalarAmountData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAmountData& UrinalysisMicroscopicData::redbloodcells() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinalysisMicroscopicData.RedBloodCells)
  return _internal_redbloodcells();
}
inline void UrinalysisMicroscopicData::unsafe_arena_set_allocated_redbloodcells(
    ::pulse::cdm::bind::ScalarAmountData* redbloodcells) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redbloodcells_);
  }
  redbloodcells_ = redbloodcells;
  if (redbloodcells) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.UrinalysisMicroscopicData.RedBloodCells)
}
inline ::pulse::cdm::bind::ScalarAmountData* UrinalysisMicroscopicData::release_redbloodcells() {
  
  ::pulse::cdm::bind::ScalarAmountData* temp = redbloodcells_;
  redbloodcells_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountData* UrinalysisMicroscopicData::unsafe_arena_release_redbloodcells() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.UrinalysisMicroscopicData.RedBloodCells)
  
  ::pulse::cdm::bind::ScalarAmountData* temp = redbloodcells_;
  redbloodcells_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountData* UrinalysisMicroscopicData::_internal_mutable_redbloodcells() {
  
  if (redbloodcells_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountData>(GetArena());
    redbloodcells_ = p;
  }
  return redbloodcells_;
}
inline ::pulse::cdm::bind::ScalarAmountData* UrinalysisMicroscopicData::mutable_redbloodcells() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.UrinalysisMicroscopicData.RedBloodCells)
  return _internal_mutable_redbloodcells();
}
inline void UrinalysisMicroscopicData::set_allocated_redbloodcells(::pulse::cdm::bind::ScalarAmountData* redbloodcells) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(redbloodcells_);
  }
  if (redbloodcells) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redbloodcells)->GetArena();
    if (message_arena != submessage_arena) {
      redbloodcells = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redbloodcells, submessage_arena);
    }
    
  } else {
    
  }
  redbloodcells_ = redbloodcells;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.UrinalysisMicroscopicData.RedBloodCells)
}

// .pulse.cdm.bind.ScalarAmountData WhiteBloodCells = 3;
inline bool UrinalysisMicroscopicData::_internal_has_whitebloodcells() const {
  return this != internal_default_instance() && whitebloodcells_ != nullptr;
}
inline bool UrinalysisMicroscopicData::has_whitebloodcells() const {
  return _internal_has_whitebloodcells();
}
inline const ::pulse::cdm::bind::ScalarAmountData& UrinalysisMicroscopicData::_internal_whitebloodcells() const {
  const ::pulse::cdm::bind::ScalarAmountData* p = whitebloodcells_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAmountData&>(
      ::pulse::cdm::bind::_ScalarAmountData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAmountData& UrinalysisMicroscopicData::whitebloodcells() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinalysisMicroscopicData.WhiteBloodCells)
  return _internal_whitebloodcells();
}
inline void UrinalysisMicroscopicData::unsafe_arena_set_allocated_whitebloodcells(
    ::pulse::cdm::bind::ScalarAmountData* whitebloodcells) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(whitebloodcells_);
  }
  whitebloodcells_ = whitebloodcells;
  if (whitebloodcells) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.UrinalysisMicroscopicData.WhiteBloodCells)
}
inline ::pulse::cdm::bind::ScalarAmountData* UrinalysisMicroscopicData::release_whitebloodcells() {
  
  ::pulse::cdm::bind::ScalarAmountData* temp = whitebloodcells_;
  whitebloodcells_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountData* UrinalysisMicroscopicData::unsafe_arena_release_whitebloodcells() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.UrinalysisMicroscopicData.WhiteBloodCells)
  
  ::pulse::cdm::bind::ScalarAmountData* temp = whitebloodcells_;
  whitebloodcells_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountData* UrinalysisMicroscopicData::_internal_mutable_whitebloodcells() {
  
  if (whitebloodcells_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountData>(GetArena());
    whitebloodcells_ = p;
  }
  return whitebloodcells_;
}
inline ::pulse::cdm::bind::ScalarAmountData* UrinalysisMicroscopicData::mutable_whitebloodcells() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.UrinalysisMicroscopicData.WhiteBloodCells)
  return _internal_mutable_whitebloodcells();
}
inline void UrinalysisMicroscopicData::set_allocated_whitebloodcells(::pulse::cdm::bind::ScalarAmountData* whitebloodcells) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(whitebloodcells_);
  }
  if (whitebloodcells) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(whitebloodcells)->GetArena();
    if (message_arena != submessage_arena) {
      whitebloodcells = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, whitebloodcells, submessage_arena);
    }
    
  } else {
    
  }
  whitebloodcells_ = whitebloodcells;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.UrinalysisMicroscopicData.WhiteBloodCells)
}

// .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount EpithelialCells = 4;
inline void UrinalysisMicroscopicData::clear_epithelialcells() {
  epithelialcells_ = 0;
}
inline ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount UrinalysisMicroscopicData::_internal_epithelialcells() const {
  return static_cast< ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount >(epithelialcells_);
}
inline ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount UrinalysisMicroscopicData::epithelialcells() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinalysisMicroscopicData.EpithelialCells)
  return _internal_epithelialcells();
}
inline void UrinalysisMicroscopicData::_internal_set_epithelialcells(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount value) {
  
  epithelialcells_ = value;
}
inline void UrinalysisMicroscopicData::set_epithelialcells(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount value) {
  _internal_set_epithelialcells(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.UrinalysisMicroscopicData.EpithelialCells)
}

// .pulse.cdm.bind.ScalarAmountData Casts = 5;
inline bool UrinalysisMicroscopicData::_internal_has_casts() const {
  return this != internal_default_instance() && casts_ != nullptr;
}
inline bool UrinalysisMicroscopicData::has_casts() const {
  return _internal_has_casts();
}
inline const ::pulse::cdm::bind::ScalarAmountData& UrinalysisMicroscopicData::_internal_casts() const {
  const ::pulse::cdm::bind::ScalarAmountData* p = casts_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAmountData&>(
      ::pulse::cdm::bind::_ScalarAmountData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAmountData& UrinalysisMicroscopicData::casts() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinalysisMicroscopicData.Casts)
  return _internal_casts();
}
inline void UrinalysisMicroscopicData::unsafe_arena_set_allocated_casts(
    ::pulse::cdm::bind::ScalarAmountData* casts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(casts_);
  }
  casts_ = casts;
  if (casts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.UrinalysisMicroscopicData.Casts)
}
inline ::pulse::cdm::bind::ScalarAmountData* UrinalysisMicroscopicData::release_casts() {
  
  ::pulse::cdm::bind::ScalarAmountData* temp = casts_;
  casts_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountData* UrinalysisMicroscopicData::unsafe_arena_release_casts() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.UrinalysisMicroscopicData.Casts)
  
  ::pulse::cdm::bind::ScalarAmountData* temp = casts_;
  casts_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountData* UrinalysisMicroscopicData::_internal_mutable_casts() {
  
  if (casts_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountData>(GetArena());
    casts_ = p;
  }
  return casts_;
}
inline ::pulse::cdm::bind::ScalarAmountData* UrinalysisMicroscopicData::mutable_casts() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.UrinalysisMicroscopicData.Casts)
  return _internal_mutable_casts();
}
inline void UrinalysisMicroscopicData::set_allocated_casts(::pulse::cdm::bind::ScalarAmountData* casts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(casts_);
  }
  if (casts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(casts)->GetArena();
    if (message_arena != submessage_arena) {
      casts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, casts, submessage_arena);
    }
    
  } else {
    
  }
  casts_ = casts;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.UrinalysisMicroscopicData.Casts)
}

// .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount Crystals = 6;
inline void UrinalysisMicroscopicData::clear_crystals() {
  crystals_ = 0;
}
inline ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount UrinalysisMicroscopicData::_internal_crystals() const {
  return static_cast< ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount >(crystals_);
}
inline ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount UrinalysisMicroscopicData::crystals() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinalysisMicroscopicData.Crystals)
  return _internal_crystals();
}
inline void UrinalysisMicroscopicData::_internal_set_crystals(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount value) {
  
  crystals_ = value;
}
inline void UrinalysisMicroscopicData::set_crystals(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount value) {
  _internal_set_crystals(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.UrinalysisMicroscopicData.Crystals)
}

// .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount Bacteria = 7;
inline void UrinalysisMicroscopicData::clear_bacteria() {
  bacteria_ = 0;
}
inline ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount UrinalysisMicroscopicData::_internal_bacteria() const {
  return static_cast< ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount >(bacteria_);
}
inline ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount UrinalysisMicroscopicData::bacteria() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinalysisMicroscopicData.Bacteria)
  return _internal_bacteria();
}
inline void UrinalysisMicroscopicData::_internal_set_bacteria(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount value) {
  
  bacteria_ = value;
}
inline void UrinalysisMicroscopicData::set_bacteria(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount value) {
  _internal_set_bacteria(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.UrinalysisMicroscopicData.Bacteria)
}

// .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount Trichomonads = 8;
inline void UrinalysisMicroscopicData::clear_trichomonads() {
  trichomonads_ = 0;
}
inline ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount UrinalysisMicroscopicData::_internal_trichomonads() const {
  return static_cast< ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount >(trichomonads_);
}
inline ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount UrinalysisMicroscopicData::trichomonads() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinalysisMicroscopicData.Trichomonads)
  return _internal_trichomonads();
}
inline void UrinalysisMicroscopicData::_internal_set_trichomonads(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount value) {
  
  trichomonads_ = value;
}
inline void UrinalysisMicroscopicData::set_trichomonads(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount value) {
  _internal_set_trichomonads(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.UrinalysisMicroscopicData.Trichomonads)
}

// .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount Yeast = 9;
inline void UrinalysisMicroscopicData::clear_yeast() {
  yeast_ = 0;
}
inline ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount UrinalysisMicroscopicData::_internal_yeast() const {
  return static_cast< ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount >(yeast_);
}
inline ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount UrinalysisMicroscopicData::yeast() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinalysisMicroscopicData.Yeast)
  return _internal_yeast();
}
inline void UrinalysisMicroscopicData::_internal_set_yeast(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount value) {
  
  yeast_ = value;
}
inline void UrinalysisMicroscopicData::set_yeast(::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount value) {
  _internal_set_yeast(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.UrinalysisMicroscopicData.Yeast)
}

// -------------------------------------------------------------------

// UrinalysisData

// .pulse.cdm.bind.PatientAssessmentData PatientAssessment = 1;
inline bool UrinalysisData::_internal_has_patientassessment() const {
  return this != internal_default_instance() && patientassessment_ != nullptr;
}
inline bool UrinalysisData::has_patientassessment() const {
  return _internal_has_patientassessment();
}
inline void UrinalysisData::clear_patientassessment() {
  if (GetArena() == nullptr && patientassessment_ != nullptr) {
    delete patientassessment_;
  }
  patientassessment_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientAssessmentData& UrinalysisData::_internal_patientassessment() const {
  const ::pulse::cdm::bind::PatientAssessmentData* p = patientassessment_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientAssessmentData&>(
      ::pulse::cdm::bind::_PatientAssessmentData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientAssessmentData& UrinalysisData::patientassessment() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinalysisData.PatientAssessment)
  return _internal_patientassessment();
}
inline void UrinalysisData::unsafe_arena_set_allocated_patientassessment(
    ::pulse::cdm::bind::PatientAssessmentData* patientassessment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientassessment_);
  }
  patientassessment_ = patientassessment;
  if (patientassessment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.UrinalysisData.PatientAssessment)
}
inline ::pulse::cdm::bind::PatientAssessmentData* UrinalysisData::release_patientassessment() {
  
  ::pulse::cdm::bind::PatientAssessmentData* temp = patientassessment_;
  patientassessment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientAssessmentData* UrinalysisData::unsafe_arena_release_patientassessment() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.UrinalysisData.PatientAssessment)
  
  ::pulse::cdm::bind::PatientAssessmentData* temp = patientassessment_;
  patientassessment_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientAssessmentData* UrinalysisData::_internal_mutable_patientassessment() {
  
  if (patientassessment_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientAssessmentData>(GetArena());
    patientassessment_ = p;
  }
  return patientassessment_;
}
inline ::pulse::cdm::bind::PatientAssessmentData* UrinalysisData::mutable_patientassessment() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.UrinalysisData.PatientAssessment)
  return _internal_mutable_patientassessment();
}
inline void UrinalysisData::set_allocated_patientassessment(::pulse::cdm::bind::PatientAssessmentData* patientassessment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientassessment_;
  }
  if (patientassessment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientassessment);
    if (message_arena != submessage_arena) {
      patientassessment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientassessment, submessage_arena);
    }
    
  } else {
    
  }
  patientassessment_ = patientassessment;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.UrinalysisData.PatientAssessment)
}

// .pulse.cdm.bind.UrinalysisData.eUrineColor Color = 2;
inline void UrinalysisData::clear_color() {
  color_ = 0;
}
inline ::pulse::cdm::bind::UrinalysisData_eUrineColor UrinalysisData::_internal_color() const {
  return static_cast< ::pulse::cdm::bind::UrinalysisData_eUrineColor >(color_);
}
inline ::pulse::cdm::bind::UrinalysisData_eUrineColor UrinalysisData::color() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinalysisData.Color)
  return _internal_color();
}
inline void UrinalysisData::_internal_set_color(::pulse::cdm::bind::UrinalysisData_eUrineColor value) {
  
  color_ = value;
}
inline void UrinalysisData::set_color(::pulse::cdm::bind::UrinalysisData_eUrineColor value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.UrinalysisData.Color)
}

// .pulse.cdm.bind.UrinalysisData.eClarityIndicator Appearance = 3;
inline void UrinalysisData::clear_appearance() {
  appearance_ = 0;
}
inline ::pulse::cdm::bind::UrinalysisData_eClarityIndicator UrinalysisData::_internal_appearance() const {
  return static_cast< ::pulse::cdm::bind::UrinalysisData_eClarityIndicator >(appearance_);
}
inline ::pulse::cdm::bind::UrinalysisData_eClarityIndicator UrinalysisData::appearance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinalysisData.Appearance)
  return _internal_appearance();
}
inline void UrinalysisData::_internal_set_appearance(::pulse::cdm::bind::UrinalysisData_eClarityIndicator value) {
  
  appearance_ = value;
}
inline void UrinalysisData::set_appearance(::pulse::cdm::bind::UrinalysisData_eClarityIndicator value) {
  _internal_set_appearance(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.UrinalysisData.Appearance)
}

// .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Glucose = 4;
inline void UrinalysisData::clear_glucose() {
  glucose_ = 0;
}
inline ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator UrinalysisData::_internal_glucose() const {
  return static_cast< ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator >(glucose_);
}
inline ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator UrinalysisData::glucose() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinalysisData.Glucose)
  return _internal_glucose();
}
inline void UrinalysisData::_internal_set_glucose(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value) {
  
  glucose_ = value;
}
inline void UrinalysisData::set_glucose(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value) {
  _internal_set_glucose(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.UrinalysisData.Glucose)
}

// .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Ketone = 5;
inline void UrinalysisData::clear_ketone() {
  ketone_ = 0;
}
inline ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator UrinalysisData::_internal_ketone() const {
  return static_cast< ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator >(ketone_);
}
inline ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator UrinalysisData::ketone() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinalysisData.Ketone)
  return _internal_ketone();
}
inline void UrinalysisData::_internal_set_ketone(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value) {
  
  ketone_ = value;
}
inline void UrinalysisData::set_ketone(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value) {
  _internal_set_ketone(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.UrinalysisData.Ketone)
}

// .pulse.cdm.bind.ScalarData Bilirubin = 6;
inline bool UrinalysisData::_internal_has_bilirubin() const {
  return this != internal_default_instance() && bilirubin_ != nullptr;
}
inline bool UrinalysisData::has_bilirubin() const {
  return _internal_has_bilirubin();
}
inline const ::pulse::cdm::bind::ScalarData& UrinalysisData::_internal_bilirubin() const {
  const ::pulse::cdm::bind::ScalarData* p = bilirubin_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& UrinalysisData::bilirubin() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinalysisData.Bilirubin)
  return _internal_bilirubin();
}
inline void UrinalysisData::unsafe_arena_set_allocated_bilirubin(
    ::pulse::cdm::bind::ScalarData* bilirubin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bilirubin_);
  }
  bilirubin_ = bilirubin;
  if (bilirubin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.UrinalysisData.Bilirubin)
}
inline ::pulse::cdm::bind::ScalarData* UrinalysisData::release_bilirubin() {
  
  ::pulse::cdm::bind::ScalarData* temp = bilirubin_;
  bilirubin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* UrinalysisData::unsafe_arena_release_bilirubin() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.UrinalysisData.Bilirubin)
  
  ::pulse::cdm::bind::ScalarData* temp = bilirubin_;
  bilirubin_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* UrinalysisData::_internal_mutable_bilirubin() {
  
  if (bilirubin_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    bilirubin_ = p;
  }
  return bilirubin_;
}
inline ::pulse::cdm::bind::ScalarData* UrinalysisData::mutable_bilirubin() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.UrinalysisData.Bilirubin)
  return _internal_mutable_bilirubin();
}
inline void UrinalysisData::set_allocated_bilirubin(::pulse::cdm::bind::ScalarData* bilirubin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bilirubin_);
  }
  if (bilirubin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bilirubin)->GetArena();
    if (message_arena != submessage_arena) {
      bilirubin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bilirubin, submessage_arena);
    }
    
  } else {
    
  }
  bilirubin_ = bilirubin;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.UrinalysisData.Bilirubin)
}

// .pulse.cdm.bind.ScalarData SpecificGravity = 7;
inline bool UrinalysisData::_internal_has_specificgravity() const {
  return this != internal_default_instance() && specificgravity_ != nullptr;
}
inline bool UrinalysisData::has_specificgravity() const {
  return _internal_has_specificgravity();
}
inline const ::pulse::cdm::bind::ScalarData& UrinalysisData::_internal_specificgravity() const {
  const ::pulse::cdm::bind::ScalarData* p = specificgravity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& UrinalysisData::specificgravity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinalysisData.SpecificGravity)
  return _internal_specificgravity();
}
inline void UrinalysisData::unsafe_arena_set_allocated_specificgravity(
    ::pulse::cdm::bind::ScalarData* specificgravity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(specificgravity_);
  }
  specificgravity_ = specificgravity;
  if (specificgravity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.UrinalysisData.SpecificGravity)
}
inline ::pulse::cdm::bind::ScalarData* UrinalysisData::release_specificgravity() {
  
  ::pulse::cdm::bind::ScalarData* temp = specificgravity_;
  specificgravity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* UrinalysisData::unsafe_arena_release_specificgravity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.UrinalysisData.SpecificGravity)
  
  ::pulse::cdm::bind::ScalarData* temp = specificgravity_;
  specificgravity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* UrinalysisData::_internal_mutable_specificgravity() {
  
  if (specificgravity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    specificgravity_ = p;
  }
  return specificgravity_;
}
inline ::pulse::cdm::bind::ScalarData* UrinalysisData::mutable_specificgravity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.UrinalysisData.SpecificGravity)
  return _internal_mutable_specificgravity();
}
inline void UrinalysisData::set_allocated_specificgravity(::pulse::cdm::bind::ScalarData* specificgravity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(specificgravity_);
  }
  if (specificgravity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(specificgravity)->GetArena();
    if (message_arena != submessage_arena) {
      specificgravity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, specificgravity, submessage_arena);
    }
    
  } else {
    
  }
  specificgravity_ = specificgravity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.UrinalysisData.SpecificGravity)
}

// .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Blood = 8;
inline void UrinalysisData::clear_blood() {
  blood_ = 0;
}
inline ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator UrinalysisData::_internal_blood() const {
  return static_cast< ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator >(blood_);
}
inline ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator UrinalysisData::blood() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinalysisData.Blood)
  return _internal_blood();
}
inline void UrinalysisData::_internal_set_blood(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value) {
  
  blood_ = value;
}
inline void UrinalysisData::set_blood(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value) {
  _internal_set_blood(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.UrinalysisData.Blood)
}

// .pulse.cdm.bind.ScalarData pH = 9;
inline bool UrinalysisData::_internal_has_ph() const {
  return this != internal_default_instance() && ph_ != nullptr;
}
inline bool UrinalysisData::has_ph() const {
  return _internal_has_ph();
}
inline const ::pulse::cdm::bind::ScalarData& UrinalysisData::_internal_ph() const {
  const ::pulse::cdm::bind::ScalarData* p = ph_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& UrinalysisData::ph() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinalysisData.pH)
  return _internal_ph();
}
inline void UrinalysisData::unsafe_arena_set_allocated_ph(
    ::pulse::cdm::bind::ScalarData* ph) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ph_);
  }
  ph_ = ph;
  if (ph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.UrinalysisData.pH)
}
inline ::pulse::cdm::bind::ScalarData* UrinalysisData::release_ph() {
  
  ::pulse::cdm::bind::ScalarData* temp = ph_;
  ph_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* UrinalysisData::unsafe_arena_release_ph() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.UrinalysisData.pH)
  
  ::pulse::cdm::bind::ScalarData* temp = ph_;
  ph_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* UrinalysisData::_internal_mutable_ph() {
  
  if (ph_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    ph_ = p;
  }
  return ph_;
}
inline ::pulse::cdm::bind::ScalarData* UrinalysisData::mutable_ph() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.UrinalysisData.pH)
  return _internal_mutable_ph();
}
inline void UrinalysisData::set_allocated_ph(::pulse::cdm::bind::ScalarData* ph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ph_);
  }
  if (ph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ph)->GetArena();
    if (message_arena != submessage_arena) {
      ph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ph, submessage_arena);
    }
    
  } else {
    
  }
  ph_ = ph;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.UrinalysisData.pH)
}

// .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Protein = 10;
inline void UrinalysisData::clear_protein() {
  protein_ = 0;
}
inline ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator UrinalysisData::_internal_protein() const {
  return static_cast< ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator >(protein_);
}
inline ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator UrinalysisData::protein() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinalysisData.Protein)
  return _internal_protein();
}
inline void UrinalysisData::_internal_set_protein(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value) {
  
  protein_ = value;
}
inline void UrinalysisData::set_protein(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value) {
  _internal_set_protein(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.UrinalysisData.Protein)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData Urobilinogen = 11;
inline bool UrinalysisData::_internal_has_urobilinogen() const {
  return this != internal_default_instance() && urobilinogen_ != nullptr;
}
inline bool UrinalysisData::has_urobilinogen() const {
  return _internal_has_urobilinogen();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& UrinalysisData::_internal_urobilinogen() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = urobilinogen_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& UrinalysisData::urobilinogen() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinalysisData.Urobilinogen)
  return _internal_urobilinogen();
}
inline void UrinalysisData::unsafe_arena_set_allocated_urobilinogen(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* urobilinogen) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(urobilinogen_);
  }
  urobilinogen_ = urobilinogen;
  if (urobilinogen) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.UrinalysisData.Urobilinogen)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* UrinalysisData::release_urobilinogen() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = urobilinogen_;
  urobilinogen_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* UrinalysisData::unsafe_arena_release_urobilinogen() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.UrinalysisData.Urobilinogen)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = urobilinogen_;
  urobilinogen_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* UrinalysisData::_internal_mutable_urobilinogen() {
  
  if (urobilinogen_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    urobilinogen_ = p;
  }
  return urobilinogen_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* UrinalysisData::mutable_urobilinogen() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.UrinalysisData.Urobilinogen)
  return _internal_mutable_urobilinogen();
}
inline void UrinalysisData::set_allocated_urobilinogen(::pulse::cdm::bind::ScalarMassPerVolumeData* urobilinogen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(urobilinogen_);
  }
  if (urobilinogen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(urobilinogen)->GetArena();
    if (message_arena != submessage_arena) {
      urobilinogen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, urobilinogen, submessage_arena);
    }
    
  } else {
    
  }
  urobilinogen_ = urobilinogen;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.UrinalysisData.Urobilinogen)
}

// .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Nitrite = 12;
inline void UrinalysisData::clear_nitrite() {
  nitrite_ = 0;
}
inline ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator UrinalysisData::_internal_nitrite() const {
  return static_cast< ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator >(nitrite_);
}
inline ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator UrinalysisData::nitrite() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinalysisData.Nitrite)
  return _internal_nitrite();
}
inline void UrinalysisData::_internal_set_nitrite(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value) {
  
  nitrite_ = value;
}
inline void UrinalysisData::set_nitrite(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value) {
  _internal_set_nitrite(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.UrinalysisData.Nitrite)
}

// .pulse.cdm.bind.UrinalysisData.ePresenceIndicator LeukocyteEsterase = 13;
inline void UrinalysisData::clear_leukocyteesterase() {
  leukocyteesterase_ = 0;
}
inline ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator UrinalysisData::_internal_leukocyteesterase() const {
  return static_cast< ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator >(leukocyteesterase_);
}
inline ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator UrinalysisData::leukocyteesterase() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinalysisData.LeukocyteEsterase)
  return _internal_leukocyteesterase();
}
inline void UrinalysisData::_internal_set_leukocyteesterase(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value) {
  
  leukocyteesterase_ = value;
}
inline void UrinalysisData::set_leukocyteesterase(::pulse::cdm::bind::UrinalysisData_ePresenceIndicator value) {
  _internal_set_leukocyteesterase(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.UrinalysisData.LeukocyteEsterase)
}

// .pulse.cdm.bind.UrinalysisMicroscopicData Microscopic = 14;
inline bool UrinalysisData::_internal_has_microscopic() const {
  return this != internal_default_instance() && microscopic_ != nullptr;
}
inline bool UrinalysisData::has_microscopic() const {
  return _internal_has_microscopic();
}
inline void UrinalysisData::clear_microscopic() {
  if (GetArena() == nullptr && microscopic_ != nullptr) {
    delete microscopic_;
  }
  microscopic_ = nullptr;
}
inline const ::pulse::cdm::bind::UrinalysisMicroscopicData& UrinalysisData::_internal_microscopic() const {
  const ::pulse::cdm::bind::UrinalysisMicroscopicData* p = microscopic_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::UrinalysisMicroscopicData&>(
      ::pulse::cdm::bind::_UrinalysisMicroscopicData_default_instance_);
}
inline const ::pulse::cdm::bind::UrinalysisMicroscopicData& UrinalysisData::microscopic() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinalysisData.Microscopic)
  return _internal_microscopic();
}
inline void UrinalysisData::unsafe_arena_set_allocated_microscopic(
    ::pulse::cdm::bind::UrinalysisMicroscopicData* microscopic) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(microscopic_);
  }
  microscopic_ = microscopic;
  if (microscopic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.UrinalysisData.Microscopic)
}
inline ::pulse::cdm::bind::UrinalysisMicroscopicData* UrinalysisData::release_microscopic() {
  
  ::pulse::cdm::bind::UrinalysisMicroscopicData* temp = microscopic_;
  microscopic_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::UrinalysisMicroscopicData* UrinalysisData::unsafe_arena_release_microscopic() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.UrinalysisData.Microscopic)
  
  ::pulse::cdm::bind::UrinalysisMicroscopicData* temp = microscopic_;
  microscopic_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::UrinalysisMicroscopicData* UrinalysisData::_internal_mutable_microscopic() {
  
  if (microscopic_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::UrinalysisMicroscopicData>(GetArena());
    microscopic_ = p;
  }
  return microscopic_;
}
inline ::pulse::cdm::bind::UrinalysisMicroscopicData* UrinalysisData::mutable_microscopic() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.UrinalysisData.Microscopic)
  return _internal_mutable_microscopic();
}
inline void UrinalysisData::set_allocated_microscopic(::pulse::cdm::bind::UrinalysisMicroscopicData* microscopic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete microscopic_;
  }
  if (microscopic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(microscopic);
    if (message_arena != submessage_arena) {
      microscopic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, microscopic, submessage_arena);
    }
    
  } else {
    
  }
  microscopic_ = microscopic;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.UrinalysisData.Microscopic)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationType>() {
  return ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationType_descriptor();
}
template <> struct is_proto_enum< ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount>() {
  return ::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount_descriptor();
}
template <> struct is_proto_enum< ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator>() {
  return ::pulse::cdm::bind::UrinalysisData_ePresenceIndicator_descriptor();
}
template <> struct is_proto_enum< ::pulse::cdm::bind::UrinalysisData_eClarityIndicator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::UrinalysisData_eClarityIndicator>() {
  return ::pulse::cdm::bind::UrinalysisData_eClarityIndicator_descriptor();
}
template <> struct is_proto_enum< ::pulse::cdm::bind::UrinalysisData_eUrineColor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::UrinalysisData_eUrineColor>() {
  return ::pulse::cdm::bind::UrinalysisData_eUrineColor_descriptor();
}
template <> struct is_proto_enum< ::pulse::cdm::bind::ePatientAssessmentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::ePatientAssessmentType>() {
  return ::pulse::cdm::bind::ePatientAssessmentType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto
