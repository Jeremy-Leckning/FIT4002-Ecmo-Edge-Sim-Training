// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/EquipmentActions.proto

#include "pulse/cdm/bind/EquipmentActions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineConfigurationData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineExpiratoryValveLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineExpiratoryValveObstructionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineInspiratoryValveLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineInspiratoryValveObstructionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineMaskLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnesthesiaMachineOxygenTankPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnesthesiaMachineOxygenWallPortPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineSodaLimeFailureData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineTubeCuffLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineVaporizerFailureData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineVentilatorPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnesthesiaMachineYPieceDisconnectData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fInhalerActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InhalerConfigurationData_pulse_2fcdm_2fbind_2fInhalerActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MechanicalVentilatorConfigurationData_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class AnyEquipmentActionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnyEquipmentActionData> _instance;
} _AnyEquipmentActionData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_AnyEquipmentActionData_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnyEquipmentActionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnyEquipmentActionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_AnyEquipmentActionData_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 15, 0, InitDefaultsscc_info_AnyEquipmentActionData_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto}, {
      &scc_info_AnesthesiaMachineConfigurationData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineExpiratoryValveLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineExpiratoryValveObstructionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineInspiratoryValveLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineInspiratoryValveObstructionData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineMaskLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineSodaLimeFailureData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineTubeCuffLeakData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineVaporizerFailureData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineVentilatorPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineYPieceDisconnectData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineOxygenWallPortPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_AnesthesiaMachineOxygenTankPressureLossData_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.base,
      &scc_info_InhalerConfigurationData_pulse_2fcdm_2fbind_2fInhalerActions_2eproto.base,
      &scc_info_MechanicalVentilatorConfigurationData_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyEquipmentActionData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyEquipmentActionData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyEquipmentActionData, Action_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::AnyEquipmentActionData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnyEquipmentActionData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%pulse/cdm/bind/EquipmentActions.proto\022"
  "\016pulse.cdm.bind\032-pulse/cdm/bind/Anesthes"
  "iaMachineActions.proto\032#pulse/cdm/bind/I"
  "nhalerActions.proto\0320pulse/cdm/bind/Mech"
  "anicalVentilatorActions.proto\"\251\014\n\026AnyEqu"
  "ipmentActionData\022\\\n\036AnesthesiaMachineCon"
  "figuration\030\001 \001(\01322.pulse.cdm.bind.Anesth"
  "esiaMachineConfigurationDataH\000\022h\n$Anesth"
  "esiaMachineExpiratoryValveLeak\030\002 \001(\01328.p"
  "ulse.cdm.bind.AnesthesiaMachineExpirator"
  "yValveLeakDataH\000\022v\n+AnesthesiaMachineExp"
  "iratoryValveObstruction\030\003 \001(\0132\?.pulse.cd"
  "m.bind.AnesthesiaMachineExpiratoryValveO"
  "bstructionDataH\000\022j\n%AnesthesiaMachineIns"
  "piratoryValveLeak\030\004 \001(\01329.pulse.cdm.bind"
  ".AnesthesiaMachineInspiratoryValveLeakDa"
  "taH\000\022x\n,AnesthesiaMachineInspiratoryValv"
  "eObstruction\030\005 \001(\0132@.pulse.cdm.bind.Anes"
  "thesiaMachineInspiratoryValveObstruction"
  "DataH\000\022R\n\031AnesthesiaMachineMaskLeak\030\006 \001("
  "\0132-.pulse.cdm.bind.AnesthesiaMachineMask"
  "LeakDataH\000\022`\n AnesthesiaMachineSodaLimeF"
  "ailure\030\007 \001(\01324.pulse.cdm.bind.Anesthesia"
  "MachineSodaLimeFailureDataH\000\022Z\n\035Anesthes"
  "iaMachineTubeCuffLeak\030\010 \001(\01321.pulse.cdm."
  "bind.AnesthesiaMachineTubeCuffLeakDataH\000"
  "\022b\n!AnesthesiaMachineVaporizerFailure\030\t "
  "\001(\01325.pulse.cdm.bind.AnesthesiaMachineVa"
  "porizerFailureDataH\000\022n\n\'AnesthesiaMachin"
  "eVentilatorPressureLoss\030\n \001(\0132;.pulse.cd"
  "m.bind.AnesthesiaMachineVentilatorPressu"
  "reLossDataH\000\022b\n!AnesthesiaMachineYPieceD"
  "isconnect\030\013 \001(\01325.pulse.cdm.bind.Anesthe"
  "siaMachineYPieceDisconnectDataH\000\022v\n+Anes"
  "thesiaMachineOxygenWallPortPressureLoss\030"
  "\014 \001(\0132\?.pulse.cdm.bind.AnesthesiaMachine"
  "OxygenWallPortPressureLossDataH\000\022n\n\'Anes"
  "thesiaMachineOxygenTankPressureLoss\030\r \001("
  "\0132;.pulse.cdm.bind.AnesthesiaMachineOxyg"
  "enTankPressureLossDataH\000\022H\n\024InhalerConfi"
  "guration\030e \001(\0132(.pulse.cdm.bind.InhalerC"
  "onfigurationDataH\000\022c\n!MechanicalVentilat"
  "orConfiguration\030\311\001 \001(\01325.pulse.cdm.bind."
  "MechanicalVentilatorConfigurationDataH\000B"
  "\010\n\006ActionB/\n\032com.kitware.pulse.cdm.bindH"
  "\001\252\002\016pulse.cdm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto_deps[3] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fInhalerActions_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto_sccs[1] = {
  &scc_info_AnyEquipmentActionData_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto, "pulse/cdm/bind/EquipmentActions.proto", 1826,
  &descriptor_table_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto, 1, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto)), true);
namespace pulse {
namespace cdm {
namespace bind {

// ===================================================================

class AnyEquipmentActionData::_Internal {
 public:
  static const ::pulse::cdm::bind::AnesthesiaMachineConfigurationData& anesthesiamachineconfiguration(const AnyEquipmentActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData& anesthesiamachineexpiratoryvalveleak(const AnyEquipmentActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData& anesthesiamachineexpiratoryvalveobstruction(const AnyEquipmentActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData& anesthesiamachineinspiratoryvalveleak(const AnyEquipmentActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData& anesthesiamachineinspiratoryvalveobstruction(const AnyEquipmentActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData& anesthesiamachinemaskleak(const AnyEquipmentActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData& anesthesiamachinesodalimefailure(const AnyEquipmentActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData& anesthesiamachinetubecuffleak(const AnyEquipmentActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData& anesthesiamachinevaporizerfailure(const AnyEquipmentActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData& anesthesiamachineventilatorpressureloss(const AnyEquipmentActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData& anesthesiamachineypiecedisconnect(const AnyEquipmentActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData& anesthesiamachineoxygenwallportpressureloss(const AnyEquipmentActionData* msg);
  static const ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData& anesthesiamachineoxygentankpressureloss(const AnyEquipmentActionData* msg);
  static const ::pulse::cdm::bind::InhalerConfigurationData& inhalerconfiguration(const AnyEquipmentActionData* msg);
  static const ::pulse::cdm::bind::MechanicalVentilatorConfigurationData& mechanicalventilatorconfiguration(const AnyEquipmentActionData* msg);
};

const ::pulse::cdm::bind::AnesthesiaMachineConfigurationData&
AnyEquipmentActionData::_Internal::anesthesiamachineconfiguration(const AnyEquipmentActionData* msg) {
  return *msg->Action_.anesthesiamachineconfiguration_;
}
const ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData&
AnyEquipmentActionData::_Internal::anesthesiamachineexpiratoryvalveleak(const AnyEquipmentActionData* msg) {
  return *msg->Action_.anesthesiamachineexpiratoryvalveleak_;
}
const ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData&
AnyEquipmentActionData::_Internal::anesthesiamachineexpiratoryvalveobstruction(const AnyEquipmentActionData* msg) {
  return *msg->Action_.anesthesiamachineexpiratoryvalveobstruction_;
}
const ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData&
AnyEquipmentActionData::_Internal::anesthesiamachineinspiratoryvalveleak(const AnyEquipmentActionData* msg) {
  return *msg->Action_.anesthesiamachineinspiratoryvalveleak_;
}
const ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData&
AnyEquipmentActionData::_Internal::anesthesiamachineinspiratoryvalveobstruction(const AnyEquipmentActionData* msg) {
  return *msg->Action_.anesthesiamachineinspiratoryvalveobstruction_;
}
const ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData&
AnyEquipmentActionData::_Internal::anesthesiamachinemaskleak(const AnyEquipmentActionData* msg) {
  return *msg->Action_.anesthesiamachinemaskleak_;
}
const ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData&
AnyEquipmentActionData::_Internal::anesthesiamachinesodalimefailure(const AnyEquipmentActionData* msg) {
  return *msg->Action_.anesthesiamachinesodalimefailure_;
}
const ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData&
AnyEquipmentActionData::_Internal::anesthesiamachinetubecuffleak(const AnyEquipmentActionData* msg) {
  return *msg->Action_.anesthesiamachinetubecuffleak_;
}
const ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData&
AnyEquipmentActionData::_Internal::anesthesiamachinevaporizerfailure(const AnyEquipmentActionData* msg) {
  return *msg->Action_.anesthesiamachinevaporizerfailure_;
}
const ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData&
AnyEquipmentActionData::_Internal::anesthesiamachineventilatorpressureloss(const AnyEquipmentActionData* msg) {
  return *msg->Action_.anesthesiamachineventilatorpressureloss_;
}
const ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData&
AnyEquipmentActionData::_Internal::anesthesiamachineypiecedisconnect(const AnyEquipmentActionData* msg) {
  return *msg->Action_.anesthesiamachineypiecedisconnect_;
}
const ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData&
AnyEquipmentActionData::_Internal::anesthesiamachineoxygenwallportpressureloss(const AnyEquipmentActionData* msg) {
  return *msg->Action_.anesthesiamachineoxygenwallportpressureloss_;
}
const ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData&
AnyEquipmentActionData::_Internal::anesthesiamachineoxygentankpressureloss(const AnyEquipmentActionData* msg) {
  return *msg->Action_.anesthesiamachineoxygentankpressureloss_;
}
const ::pulse::cdm::bind::InhalerConfigurationData&
AnyEquipmentActionData::_Internal::inhalerconfiguration(const AnyEquipmentActionData* msg) {
  return *msg->Action_.inhalerconfiguration_;
}
const ::pulse::cdm::bind::MechanicalVentilatorConfigurationData&
AnyEquipmentActionData::_Internal::mechanicalventilatorconfiguration(const AnyEquipmentActionData* msg) {
  return *msg->Action_.mechanicalventilatorconfiguration_;
}
void AnyEquipmentActionData::set_allocated_anesthesiamachineconfiguration(::pulse::cdm::bind::AnesthesiaMachineConfigurationData* anesthesiamachineconfiguration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (anesthesiamachineconfiguration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachineconfiguration)->GetArena();
    if (message_arena != submessage_arena) {
      anesthesiamachineconfiguration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachineconfiguration, submessage_arena);
    }
    set_has_anesthesiamachineconfiguration();
    Action_.anesthesiamachineconfiguration_ = anesthesiamachineconfiguration;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineConfiguration)
}
void AnyEquipmentActionData::clear_anesthesiamachineconfiguration() {
  if (_internal_has_anesthesiamachineconfiguration()) {
    if (GetArena() == nullptr) {
      delete Action_.anesthesiamachineconfiguration_;
    }
    clear_has_Action();
  }
}
void AnyEquipmentActionData::set_allocated_anesthesiamachineexpiratoryvalveleak(::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData* anesthesiamachineexpiratoryvalveleak) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (anesthesiamachineexpiratoryvalveleak) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachineexpiratoryvalveleak)->GetArena();
    if (message_arena != submessage_arena) {
      anesthesiamachineexpiratoryvalveleak = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachineexpiratoryvalveleak, submessage_arena);
    }
    set_has_anesthesiamachineexpiratoryvalveleak();
    Action_.anesthesiamachineexpiratoryvalveleak_ = anesthesiamachineexpiratoryvalveleak;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineExpiratoryValveLeak)
}
void AnyEquipmentActionData::clear_anesthesiamachineexpiratoryvalveleak() {
  if (_internal_has_anesthesiamachineexpiratoryvalveleak()) {
    if (GetArena() == nullptr) {
      delete Action_.anesthesiamachineexpiratoryvalveleak_;
    }
    clear_has_Action();
  }
}
void AnyEquipmentActionData::set_allocated_anesthesiamachineexpiratoryvalveobstruction(::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData* anesthesiamachineexpiratoryvalveobstruction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (anesthesiamachineexpiratoryvalveobstruction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachineexpiratoryvalveobstruction)->GetArena();
    if (message_arena != submessage_arena) {
      anesthesiamachineexpiratoryvalveobstruction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachineexpiratoryvalveobstruction, submessage_arena);
    }
    set_has_anesthesiamachineexpiratoryvalveobstruction();
    Action_.anesthesiamachineexpiratoryvalveobstruction_ = anesthesiamachineexpiratoryvalveobstruction;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineExpiratoryValveObstruction)
}
void AnyEquipmentActionData::clear_anesthesiamachineexpiratoryvalveobstruction() {
  if (_internal_has_anesthesiamachineexpiratoryvalveobstruction()) {
    if (GetArena() == nullptr) {
      delete Action_.anesthesiamachineexpiratoryvalveobstruction_;
    }
    clear_has_Action();
  }
}
void AnyEquipmentActionData::set_allocated_anesthesiamachineinspiratoryvalveleak(::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData* anesthesiamachineinspiratoryvalveleak) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (anesthesiamachineinspiratoryvalveleak) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachineinspiratoryvalveleak)->GetArena();
    if (message_arena != submessage_arena) {
      anesthesiamachineinspiratoryvalveleak = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachineinspiratoryvalveleak, submessage_arena);
    }
    set_has_anesthesiamachineinspiratoryvalveleak();
    Action_.anesthesiamachineinspiratoryvalveleak_ = anesthesiamachineinspiratoryvalveleak;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineInspiratoryValveLeak)
}
void AnyEquipmentActionData::clear_anesthesiamachineinspiratoryvalveleak() {
  if (_internal_has_anesthesiamachineinspiratoryvalveleak()) {
    if (GetArena() == nullptr) {
      delete Action_.anesthesiamachineinspiratoryvalveleak_;
    }
    clear_has_Action();
  }
}
void AnyEquipmentActionData::set_allocated_anesthesiamachineinspiratoryvalveobstruction(::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData* anesthesiamachineinspiratoryvalveobstruction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (anesthesiamachineinspiratoryvalveobstruction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachineinspiratoryvalveobstruction)->GetArena();
    if (message_arena != submessage_arena) {
      anesthesiamachineinspiratoryvalveobstruction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachineinspiratoryvalveobstruction, submessage_arena);
    }
    set_has_anesthesiamachineinspiratoryvalveobstruction();
    Action_.anesthesiamachineinspiratoryvalveobstruction_ = anesthesiamachineinspiratoryvalveobstruction;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineInspiratoryValveObstruction)
}
void AnyEquipmentActionData::clear_anesthesiamachineinspiratoryvalveobstruction() {
  if (_internal_has_anesthesiamachineinspiratoryvalveobstruction()) {
    if (GetArena() == nullptr) {
      delete Action_.anesthesiamachineinspiratoryvalveobstruction_;
    }
    clear_has_Action();
  }
}
void AnyEquipmentActionData::set_allocated_anesthesiamachinemaskleak(::pulse::cdm::bind::AnesthesiaMachineMaskLeakData* anesthesiamachinemaskleak) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (anesthesiamachinemaskleak) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachinemaskleak)->GetArena();
    if (message_arena != submessage_arena) {
      anesthesiamachinemaskleak = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachinemaskleak, submessage_arena);
    }
    set_has_anesthesiamachinemaskleak();
    Action_.anesthesiamachinemaskleak_ = anesthesiamachinemaskleak;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineMaskLeak)
}
void AnyEquipmentActionData::clear_anesthesiamachinemaskleak() {
  if (_internal_has_anesthesiamachinemaskleak()) {
    if (GetArena() == nullptr) {
      delete Action_.anesthesiamachinemaskleak_;
    }
    clear_has_Action();
  }
}
void AnyEquipmentActionData::set_allocated_anesthesiamachinesodalimefailure(::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData* anesthesiamachinesodalimefailure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (anesthesiamachinesodalimefailure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachinesodalimefailure)->GetArena();
    if (message_arena != submessage_arena) {
      anesthesiamachinesodalimefailure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachinesodalimefailure, submessage_arena);
    }
    set_has_anesthesiamachinesodalimefailure();
    Action_.anesthesiamachinesodalimefailure_ = anesthesiamachinesodalimefailure;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineSodaLimeFailure)
}
void AnyEquipmentActionData::clear_anesthesiamachinesodalimefailure() {
  if (_internal_has_anesthesiamachinesodalimefailure()) {
    if (GetArena() == nullptr) {
      delete Action_.anesthesiamachinesodalimefailure_;
    }
    clear_has_Action();
  }
}
void AnyEquipmentActionData::set_allocated_anesthesiamachinetubecuffleak(::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData* anesthesiamachinetubecuffleak) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (anesthesiamachinetubecuffleak) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachinetubecuffleak)->GetArena();
    if (message_arena != submessage_arena) {
      anesthesiamachinetubecuffleak = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachinetubecuffleak, submessage_arena);
    }
    set_has_anesthesiamachinetubecuffleak();
    Action_.anesthesiamachinetubecuffleak_ = anesthesiamachinetubecuffleak;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineTubeCuffLeak)
}
void AnyEquipmentActionData::clear_anesthesiamachinetubecuffleak() {
  if (_internal_has_anesthesiamachinetubecuffleak()) {
    if (GetArena() == nullptr) {
      delete Action_.anesthesiamachinetubecuffleak_;
    }
    clear_has_Action();
  }
}
void AnyEquipmentActionData::set_allocated_anesthesiamachinevaporizerfailure(::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData* anesthesiamachinevaporizerfailure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (anesthesiamachinevaporizerfailure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachinevaporizerfailure)->GetArena();
    if (message_arena != submessage_arena) {
      anesthesiamachinevaporizerfailure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachinevaporizerfailure, submessage_arena);
    }
    set_has_anesthesiamachinevaporizerfailure();
    Action_.anesthesiamachinevaporizerfailure_ = anesthesiamachinevaporizerfailure;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineVaporizerFailure)
}
void AnyEquipmentActionData::clear_anesthesiamachinevaporizerfailure() {
  if (_internal_has_anesthesiamachinevaporizerfailure()) {
    if (GetArena() == nullptr) {
      delete Action_.anesthesiamachinevaporizerfailure_;
    }
    clear_has_Action();
  }
}
void AnyEquipmentActionData::set_allocated_anesthesiamachineventilatorpressureloss(::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData* anesthesiamachineventilatorpressureloss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (anesthesiamachineventilatorpressureloss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachineventilatorpressureloss)->GetArena();
    if (message_arena != submessage_arena) {
      anesthesiamachineventilatorpressureloss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachineventilatorpressureloss, submessage_arena);
    }
    set_has_anesthesiamachineventilatorpressureloss();
    Action_.anesthesiamachineventilatorpressureloss_ = anesthesiamachineventilatorpressureloss;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineVentilatorPressureLoss)
}
void AnyEquipmentActionData::clear_anesthesiamachineventilatorpressureloss() {
  if (_internal_has_anesthesiamachineventilatorpressureloss()) {
    if (GetArena() == nullptr) {
      delete Action_.anesthesiamachineventilatorpressureloss_;
    }
    clear_has_Action();
  }
}
void AnyEquipmentActionData::set_allocated_anesthesiamachineypiecedisconnect(::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData* anesthesiamachineypiecedisconnect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (anesthesiamachineypiecedisconnect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachineypiecedisconnect)->GetArena();
    if (message_arena != submessage_arena) {
      anesthesiamachineypiecedisconnect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachineypiecedisconnect, submessage_arena);
    }
    set_has_anesthesiamachineypiecedisconnect();
    Action_.anesthesiamachineypiecedisconnect_ = anesthesiamachineypiecedisconnect;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineYPieceDisconnect)
}
void AnyEquipmentActionData::clear_anesthesiamachineypiecedisconnect() {
  if (_internal_has_anesthesiamachineypiecedisconnect()) {
    if (GetArena() == nullptr) {
      delete Action_.anesthesiamachineypiecedisconnect_;
    }
    clear_has_Action();
  }
}
void AnyEquipmentActionData::set_allocated_anesthesiamachineoxygenwallportpressureloss(::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData* anesthesiamachineoxygenwallportpressureloss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (anesthesiamachineoxygenwallportpressureloss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachineoxygenwallportpressureloss)->GetArena();
    if (message_arena != submessage_arena) {
      anesthesiamachineoxygenwallportpressureloss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachineoxygenwallportpressureloss, submessage_arena);
    }
    set_has_anesthesiamachineoxygenwallportpressureloss();
    Action_.anesthesiamachineoxygenwallportpressureloss_ = anesthesiamachineoxygenwallportpressureloss;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineOxygenWallPortPressureLoss)
}
void AnyEquipmentActionData::clear_anesthesiamachineoxygenwallportpressureloss() {
  if (_internal_has_anesthesiamachineoxygenwallportpressureloss()) {
    if (GetArena() == nullptr) {
      delete Action_.anesthesiamachineoxygenwallportpressureloss_;
    }
    clear_has_Action();
  }
}
void AnyEquipmentActionData::set_allocated_anesthesiamachineoxygentankpressureloss(::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData* anesthesiamachineoxygentankpressureloss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (anesthesiamachineoxygentankpressureloss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachineoxygentankpressureloss)->GetArena();
    if (message_arena != submessage_arena) {
      anesthesiamachineoxygentankpressureloss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachineoxygentankpressureloss, submessage_arena);
    }
    set_has_anesthesiamachineoxygentankpressureloss();
    Action_.anesthesiamachineoxygentankpressureloss_ = anesthesiamachineoxygentankpressureloss;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineOxygenTankPressureLoss)
}
void AnyEquipmentActionData::clear_anesthesiamachineoxygentankpressureloss() {
  if (_internal_has_anesthesiamachineoxygentankpressureloss()) {
    if (GetArena() == nullptr) {
      delete Action_.anesthesiamachineoxygentankpressureloss_;
    }
    clear_has_Action();
  }
}
void AnyEquipmentActionData::set_allocated_inhalerconfiguration(::pulse::cdm::bind::InhalerConfigurationData* inhalerconfiguration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (inhalerconfiguration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inhalerconfiguration)->GetArena();
    if (message_arena != submessage_arena) {
      inhalerconfiguration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inhalerconfiguration, submessage_arena);
    }
    set_has_inhalerconfiguration();
    Action_.inhalerconfiguration_ = inhalerconfiguration;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.InhalerConfiguration)
}
void AnyEquipmentActionData::clear_inhalerconfiguration() {
  if (_internal_has_inhalerconfiguration()) {
    if (GetArena() == nullptr) {
      delete Action_.inhalerconfiguration_;
    }
    clear_has_Action();
  }
}
void AnyEquipmentActionData::set_allocated_mechanicalventilatorconfiguration(::pulse::cdm::bind::MechanicalVentilatorConfigurationData* mechanicalventilatorconfiguration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Action();
  if (mechanicalventilatorconfiguration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mechanicalventilatorconfiguration)->GetArena();
    if (message_arena != submessage_arena) {
      mechanicalventilatorconfiguration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mechanicalventilatorconfiguration, submessage_arena);
    }
    set_has_mechanicalventilatorconfiguration();
    Action_.mechanicalventilatorconfiguration_ = mechanicalventilatorconfiguration;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.MechanicalVentilatorConfiguration)
}
void AnyEquipmentActionData::clear_mechanicalventilatorconfiguration() {
  if (_internal_has_mechanicalventilatorconfiguration()) {
    if (GetArena() == nullptr) {
      delete Action_.mechanicalventilatorconfiguration_;
    }
    clear_has_Action();
  }
}
AnyEquipmentActionData::AnyEquipmentActionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.AnyEquipmentActionData)
}
AnyEquipmentActionData::AnyEquipmentActionData(const AnyEquipmentActionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Action();
  switch (from.Action_case()) {
    case kAnesthesiaMachineConfiguration: {
      _internal_mutable_anesthesiamachineconfiguration()->::pulse::cdm::bind::AnesthesiaMachineConfigurationData::MergeFrom(from._internal_anesthesiamachineconfiguration());
      break;
    }
    case kAnesthesiaMachineExpiratoryValveLeak: {
      _internal_mutable_anesthesiamachineexpiratoryvalveleak()->::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData::MergeFrom(from._internal_anesthesiamachineexpiratoryvalveleak());
      break;
    }
    case kAnesthesiaMachineExpiratoryValveObstruction: {
      _internal_mutable_anesthesiamachineexpiratoryvalveobstruction()->::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData::MergeFrom(from._internal_anesthesiamachineexpiratoryvalveobstruction());
      break;
    }
    case kAnesthesiaMachineInspiratoryValveLeak: {
      _internal_mutable_anesthesiamachineinspiratoryvalveleak()->::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData::MergeFrom(from._internal_anesthesiamachineinspiratoryvalveleak());
      break;
    }
    case kAnesthesiaMachineInspiratoryValveObstruction: {
      _internal_mutable_anesthesiamachineinspiratoryvalveobstruction()->::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData::MergeFrom(from._internal_anesthesiamachineinspiratoryvalveobstruction());
      break;
    }
    case kAnesthesiaMachineMaskLeak: {
      _internal_mutable_anesthesiamachinemaskleak()->::pulse::cdm::bind::AnesthesiaMachineMaskLeakData::MergeFrom(from._internal_anesthesiamachinemaskleak());
      break;
    }
    case kAnesthesiaMachineSodaLimeFailure: {
      _internal_mutable_anesthesiamachinesodalimefailure()->::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData::MergeFrom(from._internal_anesthesiamachinesodalimefailure());
      break;
    }
    case kAnesthesiaMachineTubeCuffLeak: {
      _internal_mutable_anesthesiamachinetubecuffleak()->::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData::MergeFrom(from._internal_anesthesiamachinetubecuffleak());
      break;
    }
    case kAnesthesiaMachineVaporizerFailure: {
      _internal_mutable_anesthesiamachinevaporizerfailure()->::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData::MergeFrom(from._internal_anesthesiamachinevaporizerfailure());
      break;
    }
    case kAnesthesiaMachineVentilatorPressureLoss: {
      _internal_mutable_anesthesiamachineventilatorpressureloss()->::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData::MergeFrom(from._internal_anesthesiamachineventilatorpressureloss());
      break;
    }
    case kAnesthesiaMachineYPieceDisconnect: {
      _internal_mutable_anesthesiamachineypiecedisconnect()->::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData::MergeFrom(from._internal_anesthesiamachineypiecedisconnect());
      break;
    }
    case kAnesthesiaMachineOxygenWallPortPressureLoss: {
      _internal_mutable_anesthesiamachineoxygenwallportpressureloss()->::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData::MergeFrom(from._internal_anesthesiamachineoxygenwallportpressureloss());
      break;
    }
    case kAnesthesiaMachineOxygenTankPressureLoss: {
      _internal_mutable_anesthesiamachineoxygentankpressureloss()->::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData::MergeFrom(from._internal_anesthesiamachineoxygentankpressureloss());
      break;
    }
    case kInhalerConfiguration: {
      _internal_mutable_inhalerconfiguration()->::pulse::cdm::bind::InhalerConfigurationData::MergeFrom(from._internal_inhalerconfiguration());
      break;
    }
    case kMechanicalVentilatorConfiguration: {
      _internal_mutable_mechanicalventilatorconfiguration()->::pulse::cdm::bind::MechanicalVentilatorConfigurationData::MergeFrom(from._internal_mechanicalventilatorconfiguration());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnyEquipmentActionData)
}

void AnyEquipmentActionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyEquipmentActionData_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto.base);
  clear_has_Action();
}

AnyEquipmentActionData::~AnyEquipmentActionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnyEquipmentActionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnyEquipmentActionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_Action()) {
    clear_Action();
  }
}

void AnyEquipmentActionData::ArenaDtor(void* object) {
  AnyEquipmentActionData* _this = reinterpret_cast< AnyEquipmentActionData* >(object);
  (void)_this;
}
void AnyEquipmentActionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyEquipmentActionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnyEquipmentActionData& AnyEquipmentActionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyEquipmentActionData_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto.base);
  return *internal_default_instance();
}


void AnyEquipmentActionData::clear_Action() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.AnyEquipmentActionData)
  switch (Action_case()) {
    case kAnesthesiaMachineConfiguration: {
      if (GetArena() == nullptr) {
        delete Action_.anesthesiamachineconfiguration_;
      }
      break;
    }
    case kAnesthesiaMachineExpiratoryValveLeak: {
      if (GetArena() == nullptr) {
        delete Action_.anesthesiamachineexpiratoryvalveleak_;
      }
      break;
    }
    case kAnesthesiaMachineExpiratoryValveObstruction: {
      if (GetArena() == nullptr) {
        delete Action_.anesthesiamachineexpiratoryvalveobstruction_;
      }
      break;
    }
    case kAnesthesiaMachineInspiratoryValveLeak: {
      if (GetArena() == nullptr) {
        delete Action_.anesthesiamachineinspiratoryvalveleak_;
      }
      break;
    }
    case kAnesthesiaMachineInspiratoryValveObstruction: {
      if (GetArena() == nullptr) {
        delete Action_.anesthesiamachineinspiratoryvalveobstruction_;
      }
      break;
    }
    case kAnesthesiaMachineMaskLeak: {
      if (GetArena() == nullptr) {
        delete Action_.anesthesiamachinemaskleak_;
      }
      break;
    }
    case kAnesthesiaMachineSodaLimeFailure: {
      if (GetArena() == nullptr) {
        delete Action_.anesthesiamachinesodalimefailure_;
      }
      break;
    }
    case kAnesthesiaMachineTubeCuffLeak: {
      if (GetArena() == nullptr) {
        delete Action_.anesthesiamachinetubecuffleak_;
      }
      break;
    }
    case kAnesthesiaMachineVaporizerFailure: {
      if (GetArena() == nullptr) {
        delete Action_.anesthesiamachinevaporizerfailure_;
      }
      break;
    }
    case kAnesthesiaMachineVentilatorPressureLoss: {
      if (GetArena() == nullptr) {
        delete Action_.anesthesiamachineventilatorpressureloss_;
      }
      break;
    }
    case kAnesthesiaMachineYPieceDisconnect: {
      if (GetArena() == nullptr) {
        delete Action_.anesthesiamachineypiecedisconnect_;
      }
      break;
    }
    case kAnesthesiaMachineOxygenWallPortPressureLoss: {
      if (GetArena() == nullptr) {
        delete Action_.anesthesiamachineoxygenwallportpressureloss_;
      }
      break;
    }
    case kAnesthesiaMachineOxygenTankPressureLoss: {
      if (GetArena() == nullptr) {
        delete Action_.anesthesiamachineoxygentankpressureloss_;
      }
      break;
    }
    case kInhalerConfiguration: {
      if (GetArena() == nullptr) {
        delete Action_.inhalerconfiguration_;
      }
      break;
    }
    case kMechanicalVentilatorConfiguration: {
      if (GetArena() == nullptr) {
        delete Action_.mechanicalventilatorconfiguration_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void AnyEquipmentActionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnyEquipmentActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnyEquipmentActionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.AnesthesiaMachineConfigurationData AnesthesiaMachineConfiguration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachineconfiguration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData AnesthesiaMachineExpiratoryValveLeak = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachineexpiratoryvalveleak(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData AnesthesiaMachineExpiratoryValveObstruction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachineexpiratoryvalveobstruction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData AnesthesiaMachineInspiratoryValveLeak = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachineinspiratoryvalveleak(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData AnesthesiaMachineInspiratoryValveObstruction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachineinspiratoryvalveobstruction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineMaskLeakData AnesthesiaMachineMaskLeak = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachinemaskleak(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData AnesthesiaMachineSodaLimeFailure = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachinesodalimefailure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData AnesthesiaMachineTubeCuffLeak = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachinetubecuffleak(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData AnesthesiaMachineVaporizerFailure = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachinevaporizerfailure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData AnesthesiaMachineVentilatorPressureLoss = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachineventilatorpressureloss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData AnesthesiaMachineYPieceDisconnect = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachineypiecedisconnect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData AnesthesiaMachineOxygenWallPortPressureLoss = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachineoxygenwallportpressureloss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData AnesthesiaMachineOxygenTankPressureLoss = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachineoxygentankpressureloss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.InhalerConfigurationData InhalerConfiguration = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_inhalerconfiguration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.MechanicalVentilatorConfigurationData MechanicalVentilatorConfiguration = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_mechanicalventilatorconfiguration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyEquipmentActionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnyEquipmentActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineConfigurationData AnesthesiaMachineConfiguration = 1;
  if (_internal_has_anesthesiamachineconfiguration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::anesthesiamachineconfiguration(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData AnesthesiaMachineExpiratoryValveLeak = 2;
  if (_internal_has_anesthesiamachineexpiratoryvalveleak()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::anesthesiamachineexpiratoryvalveleak(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData AnesthesiaMachineExpiratoryValveObstruction = 3;
  if (_internal_has_anesthesiamachineexpiratoryvalveobstruction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::anesthesiamachineexpiratoryvalveobstruction(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData AnesthesiaMachineInspiratoryValveLeak = 4;
  if (_internal_has_anesthesiamachineinspiratoryvalveleak()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::anesthesiamachineinspiratoryvalveleak(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData AnesthesiaMachineInspiratoryValveObstruction = 5;
  if (_internal_has_anesthesiamachineinspiratoryvalveobstruction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::anesthesiamachineinspiratoryvalveobstruction(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineMaskLeakData AnesthesiaMachineMaskLeak = 6;
  if (_internal_has_anesthesiamachinemaskleak()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::anesthesiamachinemaskleak(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData AnesthesiaMachineSodaLimeFailure = 7;
  if (_internal_has_anesthesiamachinesodalimefailure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::anesthesiamachinesodalimefailure(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData AnesthesiaMachineTubeCuffLeak = 8;
  if (_internal_has_anesthesiamachinetubecuffleak()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::anesthesiamachinetubecuffleak(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData AnesthesiaMachineVaporizerFailure = 9;
  if (_internal_has_anesthesiamachinevaporizerfailure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::anesthesiamachinevaporizerfailure(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData AnesthesiaMachineVentilatorPressureLoss = 10;
  if (_internal_has_anesthesiamachineventilatorpressureloss()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::anesthesiamachineventilatorpressureloss(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData AnesthesiaMachineYPieceDisconnect = 11;
  if (_internal_has_anesthesiamachineypiecedisconnect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::anesthesiamachineypiecedisconnect(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData AnesthesiaMachineOxygenWallPortPressureLoss = 12;
  if (_internal_has_anesthesiamachineoxygenwallportpressureloss()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::anesthesiamachineoxygenwallportpressureloss(this), target, stream);
  }

  // .pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData AnesthesiaMachineOxygenTankPressureLoss = 13;
  if (_internal_has_anesthesiamachineoxygentankpressureloss()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::anesthesiamachineoxygentankpressureloss(this), target, stream);
  }

  // .pulse.cdm.bind.InhalerConfigurationData InhalerConfiguration = 101;
  if (_internal_has_inhalerconfiguration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::inhalerconfiguration(this), target, stream);
  }

  // .pulse.cdm.bind.MechanicalVentilatorConfigurationData MechanicalVentilatorConfiguration = 201;
  if (_internal_has_mechanicalventilatorconfiguration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        201, _Internal::mechanicalventilatorconfiguration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnyEquipmentActionData)
  return target;
}

size_t AnyEquipmentActionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnyEquipmentActionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Action_case()) {
    // .pulse.cdm.bind.AnesthesiaMachineConfigurationData AnesthesiaMachineConfiguration = 1;
    case kAnesthesiaMachineConfiguration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.anesthesiamachineconfiguration_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData AnesthesiaMachineExpiratoryValveLeak = 2;
    case kAnesthesiaMachineExpiratoryValveLeak: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.anesthesiamachineexpiratoryvalveleak_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData AnesthesiaMachineExpiratoryValveObstruction = 3;
    case kAnesthesiaMachineExpiratoryValveObstruction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.anesthesiamachineexpiratoryvalveobstruction_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData AnesthesiaMachineInspiratoryValveLeak = 4;
    case kAnesthesiaMachineInspiratoryValveLeak: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.anesthesiamachineinspiratoryvalveleak_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData AnesthesiaMachineInspiratoryValveObstruction = 5;
    case kAnesthesiaMachineInspiratoryValveObstruction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.anesthesiamachineinspiratoryvalveobstruction_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineMaskLeakData AnesthesiaMachineMaskLeak = 6;
    case kAnesthesiaMachineMaskLeak: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.anesthesiamachinemaskleak_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData AnesthesiaMachineSodaLimeFailure = 7;
    case kAnesthesiaMachineSodaLimeFailure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.anesthesiamachinesodalimefailure_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData AnesthesiaMachineTubeCuffLeak = 8;
    case kAnesthesiaMachineTubeCuffLeak: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.anesthesiamachinetubecuffleak_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData AnesthesiaMachineVaporizerFailure = 9;
    case kAnesthesiaMachineVaporizerFailure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.anesthesiamachinevaporizerfailure_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData AnesthesiaMachineVentilatorPressureLoss = 10;
    case kAnesthesiaMachineVentilatorPressureLoss: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.anesthesiamachineventilatorpressureloss_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData AnesthesiaMachineYPieceDisconnect = 11;
    case kAnesthesiaMachineYPieceDisconnect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.anesthesiamachineypiecedisconnect_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData AnesthesiaMachineOxygenWallPortPressureLoss = 12;
    case kAnesthesiaMachineOxygenWallPortPressureLoss: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.anesthesiamachineoxygenwallportpressureloss_);
      break;
    }
    // .pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData AnesthesiaMachineOxygenTankPressureLoss = 13;
    case kAnesthesiaMachineOxygenTankPressureLoss: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.anesthesiamachineoxygentankpressureloss_);
      break;
    }
    // .pulse.cdm.bind.InhalerConfigurationData InhalerConfiguration = 101;
    case kInhalerConfiguration: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.inhalerconfiguration_);
      break;
    }
    // .pulse.cdm.bind.MechanicalVentilatorConfigurationData MechanicalVentilatorConfiguration = 201;
    case kMechanicalVentilatorConfiguration: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Action_.mechanicalventilatorconfiguration_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyEquipmentActionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnyEquipmentActionData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnyEquipmentActionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnyEquipmentActionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnyEquipmentActionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnyEquipmentActionData)
    MergeFrom(*source);
  }
}

void AnyEquipmentActionData::MergeFrom(const AnyEquipmentActionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnyEquipmentActionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Action_case()) {
    case kAnesthesiaMachineConfiguration: {
      _internal_mutable_anesthesiamachineconfiguration()->::pulse::cdm::bind::AnesthesiaMachineConfigurationData::MergeFrom(from._internal_anesthesiamachineconfiguration());
      break;
    }
    case kAnesthesiaMachineExpiratoryValveLeak: {
      _internal_mutable_anesthesiamachineexpiratoryvalveleak()->::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData::MergeFrom(from._internal_anesthesiamachineexpiratoryvalveleak());
      break;
    }
    case kAnesthesiaMachineExpiratoryValveObstruction: {
      _internal_mutable_anesthesiamachineexpiratoryvalveobstruction()->::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData::MergeFrom(from._internal_anesthesiamachineexpiratoryvalveobstruction());
      break;
    }
    case kAnesthesiaMachineInspiratoryValveLeak: {
      _internal_mutable_anesthesiamachineinspiratoryvalveleak()->::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData::MergeFrom(from._internal_anesthesiamachineinspiratoryvalveleak());
      break;
    }
    case kAnesthesiaMachineInspiratoryValveObstruction: {
      _internal_mutable_anesthesiamachineinspiratoryvalveobstruction()->::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData::MergeFrom(from._internal_anesthesiamachineinspiratoryvalveobstruction());
      break;
    }
    case kAnesthesiaMachineMaskLeak: {
      _internal_mutable_anesthesiamachinemaskleak()->::pulse::cdm::bind::AnesthesiaMachineMaskLeakData::MergeFrom(from._internal_anesthesiamachinemaskleak());
      break;
    }
    case kAnesthesiaMachineSodaLimeFailure: {
      _internal_mutable_anesthesiamachinesodalimefailure()->::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData::MergeFrom(from._internal_anesthesiamachinesodalimefailure());
      break;
    }
    case kAnesthesiaMachineTubeCuffLeak: {
      _internal_mutable_anesthesiamachinetubecuffleak()->::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData::MergeFrom(from._internal_anesthesiamachinetubecuffleak());
      break;
    }
    case kAnesthesiaMachineVaporizerFailure: {
      _internal_mutable_anesthesiamachinevaporizerfailure()->::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData::MergeFrom(from._internal_anesthesiamachinevaporizerfailure());
      break;
    }
    case kAnesthesiaMachineVentilatorPressureLoss: {
      _internal_mutable_anesthesiamachineventilatorpressureloss()->::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData::MergeFrom(from._internal_anesthesiamachineventilatorpressureloss());
      break;
    }
    case kAnesthesiaMachineYPieceDisconnect: {
      _internal_mutable_anesthesiamachineypiecedisconnect()->::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData::MergeFrom(from._internal_anesthesiamachineypiecedisconnect());
      break;
    }
    case kAnesthesiaMachineOxygenWallPortPressureLoss: {
      _internal_mutable_anesthesiamachineoxygenwallportpressureloss()->::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData::MergeFrom(from._internal_anesthesiamachineoxygenwallportpressureloss());
      break;
    }
    case kAnesthesiaMachineOxygenTankPressureLoss: {
      _internal_mutable_anesthesiamachineoxygentankpressureloss()->::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData::MergeFrom(from._internal_anesthesiamachineoxygentankpressureloss());
      break;
    }
    case kInhalerConfiguration: {
      _internal_mutable_inhalerconfiguration()->::pulse::cdm::bind::InhalerConfigurationData::MergeFrom(from._internal_inhalerconfiguration());
      break;
    }
    case kMechanicalVentilatorConfiguration: {
      _internal_mutable_mechanicalventilatorconfiguration()->::pulse::cdm::bind::MechanicalVentilatorConfigurationData::MergeFrom(from._internal_mechanicalventilatorconfiguration());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void AnyEquipmentActionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnyEquipmentActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyEquipmentActionData::CopyFrom(const AnyEquipmentActionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnyEquipmentActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyEquipmentActionData::IsInitialized() const {
  return true;
}

void AnyEquipmentActionData::InternalSwap(AnyEquipmentActionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(Action_, other->Action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyEquipmentActionData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnyEquipmentActionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnyEquipmentActionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::AnyEquipmentActionData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
