// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/Compartment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fCompartment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fCompartment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Properties.pb.h"
#include "pulse/cdm/bind/SubstanceQuantity.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fCompartment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fCompartment_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class CompartmentData;
class CompartmentDataDefaultTypeInternal;
extern CompartmentDataDefaultTypeInternal _CompartmentData_default_instance_;
class CompartmentGraphData;
class CompartmentGraphDataDefaultTypeInternal;
extern CompartmentGraphDataDefaultTypeInternal _CompartmentGraphData_default_instance_;
class CompartmentLinkData;
class CompartmentLinkDataDefaultTypeInternal;
extern CompartmentLinkDataDefaultTypeInternal _CompartmentLinkData_default_instance_;
class CompartmentManagerData;
class CompartmentManagerDataDefaultTypeInternal;
extern CompartmentManagerDataDefaultTypeInternal _CompartmentManagerData_default_instance_;
class ElectricalCompartmentData;
class ElectricalCompartmentDataDefaultTypeInternal;
extern ElectricalCompartmentDataDefaultTypeInternal _ElectricalCompartmentData_default_instance_;
class ElectricalCompartmentLinkData;
class ElectricalCompartmentLinkDataDefaultTypeInternal;
extern ElectricalCompartmentLinkDataDefaultTypeInternal _ElectricalCompartmentLinkData_default_instance_;
class FluidCompartmentData;
class FluidCompartmentDataDefaultTypeInternal;
extern FluidCompartmentDataDefaultTypeInternal _FluidCompartmentData_default_instance_;
class FluidCompartmentGraphData;
class FluidCompartmentGraphDataDefaultTypeInternal;
extern FluidCompartmentGraphDataDefaultTypeInternal _FluidCompartmentGraphData_default_instance_;
class FluidCompartmentLinkData;
class FluidCompartmentLinkDataDefaultTypeInternal;
extern FluidCompartmentLinkDataDefaultTypeInternal _FluidCompartmentLinkData_default_instance_;
class GasCompartmentData;
class GasCompartmentDataDefaultTypeInternal;
extern GasCompartmentDataDefaultTypeInternal _GasCompartmentData_default_instance_;
class GasCompartmentGraphData;
class GasCompartmentGraphDataDefaultTypeInternal;
extern GasCompartmentGraphDataDefaultTypeInternal _GasCompartmentGraphData_default_instance_;
class GasCompartmentLinkData;
class GasCompartmentLinkDataDefaultTypeInternal;
extern GasCompartmentLinkDataDefaultTypeInternal _GasCompartmentLinkData_default_instance_;
class LiquidCompartmentData;
class LiquidCompartmentDataDefaultTypeInternal;
extern LiquidCompartmentDataDefaultTypeInternal _LiquidCompartmentData_default_instance_;
class LiquidCompartmentGraphData;
class LiquidCompartmentGraphDataDefaultTypeInternal;
extern LiquidCompartmentGraphDataDefaultTypeInternal _LiquidCompartmentGraphData_default_instance_;
class LiquidCompartmentLinkData;
class LiquidCompartmentLinkDataDefaultTypeInternal;
extern LiquidCompartmentLinkDataDefaultTypeInternal _LiquidCompartmentLinkData_default_instance_;
class ThermalCompartmentData;
class ThermalCompartmentDataDefaultTypeInternal;
extern ThermalCompartmentDataDefaultTypeInternal _ThermalCompartmentData_default_instance_;
class ThermalCompartmentLinkData;
class ThermalCompartmentLinkDataDefaultTypeInternal;
extern ThermalCompartmentLinkDataDefaultTypeInternal _ThermalCompartmentLinkData_default_instance_;
class TissueCompartmentData;
class TissueCompartmentDataDefaultTypeInternal;
extern TissueCompartmentDataDefaultTypeInternal _TissueCompartmentData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::CompartmentData* Arena::CreateMaybeMessage<::pulse::cdm::bind::CompartmentData>(Arena*);
template<> ::pulse::cdm::bind::CompartmentGraphData* Arena::CreateMaybeMessage<::pulse::cdm::bind::CompartmentGraphData>(Arena*);
template<> ::pulse::cdm::bind::CompartmentLinkData* Arena::CreateMaybeMessage<::pulse::cdm::bind::CompartmentLinkData>(Arena*);
template<> ::pulse::cdm::bind::CompartmentManagerData* Arena::CreateMaybeMessage<::pulse::cdm::bind::CompartmentManagerData>(Arena*);
template<> ::pulse::cdm::bind::ElectricalCompartmentData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ElectricalCompartmentData>(Arena*);
template<> ::pulse::cdm::bind::ElectricalCompartmentLinkData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ElectricalCompartmentLinkData>(Arena*);
template<> ::pulse::cdm::bind::FluidCompartmentData* Arena::CreateMaybeMessage<::pulse::cdm::bind::FluidCompartmentData>(Arena*);
template<> ::pulse::cdm::bind::FluidCompartmentGraphData* Arena::CreateMaybeMessage<::pulse::cdm::bind::FluidCompartmentGraphData>(Arena*);
template<> ::pulse::cdm::bind::FluidCompartmentLinkData* Arena::CreateMaybeMessage<::pulse::cdm::bind::FluidCompartmentLinkData>(Arena*);
template<> ::pulse::cdm::bind::GasCompartmentData* Arena::CreateMaybeMessage<::pulse::cdm::bind::GasCompartmentData>(Arena*);
template<> ::pulse::cdm::bind::GasCompartmentGraphData* Arena::CreateMaybeMessage<::pulse::cdm::bind::GasCompartmentGraphData>(Arena*);
template<> ::pulse::cdm::bind::GasCompartmentLinkData* Arena::CreateMaybeMessage<::pulse::cdm::bind::GasCompartmentLinkData>(Arena*);
template<> ::pulse::cdm::bind::LiquidCompartmentData* Arena::CreateMaybeMessage<::pulse::cdm::bind::LiquidCompartmentData>(Arena*);
template<> ::pulse::cdm::bind::LiquidCompartmentGraphData* Arena::CreateMaybeMessage<::pulse::cdm::bind::LiquidCompartmentGraphData>(Arena*);
template<> ::pulse::cdm::bind::LiquidCompartmentLinkData* Arena::CreateMaybeMessage<::pulse::cdm::bind::LiquidCompartmentLinkData>(Arena*);
template<> ::pulse::cdm::bind::ThermalCompartmentData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ThermalCompartmentData>(Arena*);
template<> ::pulse::cdm::bind::ThermalCompartmentLinkData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ThermalCompartmentLinkData>(Arena*);
template<> ::pulse::cdm::bind::TissueCompartmentData* Arena::CreateMaybeMessage<::pulse::cdm::bind::TissueCompartmentData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

enum CompartmentData_eType : int {
  CompartmentData_eType_Electrical = 0,
  CompartmentData_eType_Gas = 1,
  CompartmentData_eType_Liquid = 2,
  CompartmentData_eType_Thermal = 3,
  CompartmentData_eType_Tissue = 4,
  CompartmentData_eType_CompartmentData_eType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CompartmentData_eType_CompartmentData_eType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CompartmentData_eType_IsValid(int value);
constexpr CompartmentData_eType CompartmentData_eType_eType_MIN = CompartmentData_eType_Electrical;
constexpr CompartmentData_eType CompartmentData_eType_eType_MAX = CompartmentData_eType_Tissue;
constexpr int CompartmentData_eType_eType_ARRAYSIZE = CompartmentData_eType_eType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompartmentData_eType_descriptor();
template<typename T>
inline const std::string& CompartmentData_eType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CompartmentData_eType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CompartmentData_eType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CompartmentData_eType_descriptor(), enum_t_value);
}
inline bool CompartmentData_eType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CompartmentData_eType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CompartmentData_eType>(
    CompartmentData_eType_descriptor(), name, value);
}
// ===================================================================

class CompartmentData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.CompartmentData) */ {
 public:
  inline CompartmentData() : CompartmentData(nullptr) {}
  virtual ~CompartmentData();

  CompartmentData(const CompartmentData& from);
  CompartmentData(CompartmentData&& from) noexcept
    : CompartmentData() {
    *this = ::std::move(from);
  }

  inline CompartmentData& operator=(const CompartmentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompartmentData& operator=(CompartmentData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompartmentData& default_instance();

  static inline const CompartmentData* internal_default_instance() {
    return reinterpret_cast<const CompartmentData*>(
               &_CompartmentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CompartmentData& a, CompartmentData& b) {
    a.Swap(&b);
  }
  inline void Swap(CompartmentData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompartmentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompartmentData* New() const final {
    return CreateMaybeMessage<CompartmentData>(nullptr);
  }

  CompartmentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompartmentData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompartmentData& from);
  void MergeFrom(const CompartmentData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompartmentData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.CompartmentData";
  }
  protected:
  explicit CompartmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CompartmentData_eType eType;
  static constexpr eType Electrical =
    CompartmentData_eType_Electrical;
  static constexpr eType Gas =
    CompartmentData_eType_Gas;
  static constexpr eType Liquid =
    CompartmentData_eType_Liquid;
  static constexpr eType Thermal =
    CompartmentData_eType_Thermal;
  static constexpr eType Tissue =
    CompartmentData_eType_Tissue;
  static inline bool eType_IsValid(int value) {
    return CompartmentData_eType_IsValid(value);
  }
  static constexpr eType eType_MIN =
    CompartmentData_eType_eType_MIN;
  static constexpr eType eType_MAX =
    CompartmentData_eType_eType_MAX;
  static constexpr int eType_ARRAYSIZE =
    CompartmentData_eType_eType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eType_descriptor() {
    return CompartmentData_eType_descriptor();
  }
  template<typename T>
  static inline const std::string& eType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eType_Name.");
    return CompartmentData_eType_Name(enum_t_value);
  }
  static inline bool eType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eType* value) {
    return CompartmentData_eType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 2,
    kChildFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated string Node = 2;
  int node_size() const;
  private:
  int _internal_node_size() const;
  public:
  void clear_node();
  const std::string& node(int index) const;
  std::string* mutable_node(int index);
  void set_node(int index, const std::string& value);
  void set_node(int index, std::string&& value);
  void set_node(int index, const char* value);
  void set_node(int index, const char* value, size_t size);
  std::string* add_node();
  void add_node(const std::string& value);
  void add_node(std::string&& value);
  void add_node(const char* value);
  void add_node(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& node() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_node();
  private:
  const std::string& _internal_node(int index) const;
  std::string* _internal_add_node();
  public:

  // repeated string Child = 3;
  int child_size() const;
  private:
  int _internal_child_size() const;
  public:
  void clear_child();
  const std::string& child(int index) const;
  std::string* mutable_child(int index);
  void set_child(int index, const std::string& value);
  void set_child(int index, std::string&& value);
  void set_child(int index, const char* value);
  void set_child(int index, const char* value, size_t size);
  std::string* add_child();
  void add_child(const std::string& value);
  void add_child(std::string&& value);
  void add_child(const char* value);
  void add_child(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& child() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_child();
  private:
  const std::string& _internal_child(int index) const;
  std::string* _internal_add_child();
  public:

  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.CompartmentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> node_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> child_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fCompartment_2eproto;
};
// -------------------------------------------------------------------

class CompartmentLinkData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.CompartmentLinkData) */ {
 public:
  inline CompartmentLinkData() : CompartmentLinkData(nullptr) {}
  virtual ~CompartmentLinkData();

  CompartmentLinkData(const CompartmentLinkData& from);
  CompartmentLinkData(CompartmentLinkData&& from) noexcept
    : CompartmentLinkData() {
    *this = ::std::move(from);
  }

  inline CompartmentLinkData& operator=(const CompartmentLinkData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompartmentLinkData& operator=(CompartmentLinkData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompartmentLinkData& default_instance();

  static inline const CompartmentLinkData* internal_default_instance() {
    return reinterpret_cast<const CompartmentLinkData*>(
               &_CompartmentLinkData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CompartmentLinkData& a, CompartmentLinkData& b) {
    a.Swap(&b);
  }
  inline void Swap(CompartmentLinkData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompartmentLinkData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompartmentLinkData* New() const final {
    return CreateMaybeMessage<CompartmentLinkData>(nullptr);
  }

  CompartmentLinkData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompartmentLinkData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompartmentLinkData& from);
  void MergeFrom(const CompartmentLinkData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompartmentLinkData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.CompartmentLinkData";
  }
  protected:
  explicit CompartmentLinkData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPathFieldNumber = 2,
    kSourceCompartmentFieldNumber = 3,
    kTargetCompartmentFieldNumber = 4,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Path = 2;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string SourceCompartment = 3;
  void clear_sourcecompartment();
  const std::string& sourcecompartment() const;
  void set_sourcecompartment(const std::string& value);
  void set_sourcecompartment(std::string&& value);
  void set_sourcecompartment(const char* value);
  void set_sourcecompartment(const char* value, size_t size);
  std::string* mutable_sourcecompartment();
  std::string* release_sourcecompartment();
  void set_allocated_sourcecompartment(std::string* sourcecompartment);
  private:
  const std::string& _internal_sourcecompartment() const;
  void _internal_set_sourcecompartment(const std::string& value);
  std::string* _internal_mutable_sourcecompartment();
  public:

  // string TargetCompartment = 4;
  void clear_targetcompartment();
  const std::string& targetcompartment() const;
  void set_targetcompartment(const std::string& value);
  void set_targetcompartment(std::string&& value);
  void set_targetcompartment(const char* value);
  void set_targetcompartment(const char* value, size_t size);
  std::string* mutable_targetcompartment();
  std::string* release_targetcompartment();
  void set_allocated_targetcompartment(std::string* targetcompartment);
  private:
  const std::string& _internal_targetcompartment() const;
  void _internal_set_targetcompartment(const std::string& value);
  std::string* _internal_mutable_targetcompartment();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.CompartmentLinkData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourcecompartment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetcompartment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fCompartment_2eproto;
};
// -------------------------------------------------------------------

class CompartmentGraphData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.CompartmentGraphData) */ {
 public:
  inline CompartmentGraphData() : CompartmentGraphData(nullptr) {}
  virtual ~CompartmentGraphData();

  CompartmentGraphData(const CompartmentGraphData& from);
  CompartmentGraphData(CompartmentGraphData&& from) noexcept
    : CompartmentGraphData() {
    *this = ::std::move(from);
  }

  inline CompartmentGraphData& operator=(const CompartmentGraphData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompartmentGraphData& operator=(CompartmentGraphData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompartmentGraphData& default_instance();

  static inline const CompartmentGraphData* internal_default_instance() {
    return reinterpret_cast<const CompartmentGraphData*>(
               &_CompartmentGraphData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CompartmentGraphData& a, CompartmentGraphData& b) {
    a.Swap(&b);
  }
  inline void Swap(CompartmentGraphData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompartmentGraphData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompartmentGraphData* New() const final {
    return CreateMaybeMessage<CompartmentGraphData>(nullptr);
  }

  CompartmentGraphData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompartmentGraphData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompartmentGraphData& from);
  void MergeFrom(const CompartmentGraphData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompartmentGraphData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.CompartmentGraphData";
  }
  protected:
  explicit CompartmentGraphData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompartmentFieldNumber = 2,
    kLinkFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated string Compartment = 2;
  int compartment_size() const;
  private:
  int _internal_compartment_size() const;
  public:
  void clear_compartment();
  const std::string& compartment(int index) const;
  std::string* mutable_compartment(int index);
  void set_compartment(int index, const std::string& value);
  void set_compartment(int index, std::string&& value);
  void set_compartment(int index, const char* value);
  void set_compartment(int index, const char* value, size_t size);
  std::string* add_compartment();
  void add_compartment(const std::string& value);
  void add_compartment(std::string&& value);
  void add_compartment(const char* value);
  void add_compartment(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& compartment() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_compartment();
  private:
  const std::string& _internal_compartment(int index) const;
  std::string* _internal_add_compartment();
  public:

  // repeated string Link = 3;
  int link_size() const;
  private:
  int _internal_link_size() const;
  public:
  void clear_link();
  const std::string& link(int index) const;
  std::string* mutable_link(int index);
  void set_link(int index, const std::string& value);
  void set_link(int index, std::string&& value);
  void set_link(int index, const char* value);
  void set_link(int index, const char* value, size_t size);
  std::string* add_link();
  void add_link(const std::string& value);
  void add_link(std::string&& value);
  void add_link(const char* value);
  void add_link(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& link() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_link();
  private:
  const std::string& _internal_link(int index) const;
  std::string* _internal_add_link();
  public:

  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.CompartmentGraphData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> compartment_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> link_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fCompartment_2eproto;
};
// -------------------------------------------------------------------

class FluidCompartmentData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.FluidCompartmentData) */ {
 public:
  inline FluidCompartmentData() : FluidCompartmentData(nullptr) {}
  virtual ~FluidCompartmentData();

  FluidCompartmentData(const FluidCompartmentData& from);
  FluidCompartmentData(FluidCompartmentData&& from) noexcept
    : FluidCompartmentData() {
    *this = ::std::move(from);
  }

  inline FluidCompartmentData& operator=(const FluidCompartmentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FluidCompartmentData& operator=(FluidCompartmentData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FluidCompartmentData& default_instance();

  static inline const FluidCompartmentData* internal_default_instance() {
    return reinterpret_cast<const FluidCompartmentData*>(
               &_FluidCompartmentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FluidCompartmentData& a, FluidCompartmentData& b) {
    a.Swap(&b);
  }
  inline void Swap(FluidCompartmentData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FluidCompartmentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FluidCompartmentData* New() const final {
    return CreateMaybeMessage<FluidCompartmentData>(nullptr);
  }

  FluidCompartmentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FluidCompartmentData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FluidCompartmentData& from);
  void MergeFrom(const FluidCompartmentData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FluidCompartmentData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.FluidCompartmentData";
  }
  protected:
  explicit FluidCompartmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompartmentFieldNumber = 1,
    kInFlowFieldNumber = 2,
    kOutFlowFieldNumber = 3,
    kPressureFieldNumber = 4,
    kVolumeFieldNumber = 5,
  };
  // .pulse.cdm.bind.CompartmentData Compartment = 1;
  bool has_compartment() const;
  private:
  bool _internal_has_compartment() const;
  public:
  void clear_compartment();
  const ::pulse::cdm::bind::CompartmentData& compartment() const;
  ::pulse::cdm::bind::CompartmentData* release_compartment();
  ::pulse::cdm::bind::CompartmentData* mutable_compartment();
  void set_allocated_compartment(::pulse::cdm::bind::CompartmentData* compartment);
  private:
  const ::pulse::cdm::bind::CompartmentData& _internal_compartment() const;
  ::pulse::cdm::bind::CompartmentData* _internal_mutable_compartment();
  public:
  void unsafe_arena_set_allocated_compartment(
      ::pulse::cdm::bind::CompartmentData* compartment);
  ::pulse::cdm::bind::CompartmentData* unsafe_arena_release_compartment();

  // .pulse.cdm.bind.ScalarVolumePerTimeData InFlow = 2;
  bool has_inflow() const;
  private:
  bool _internal_has_inflow() const;
  public:
  void clear_inflow();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& inflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_inflow();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_inflow();
  void set_allocated_inflow(::pulse::cdm::bind::ScalarVolumePerTimeData* inflow);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_inflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_inflow();
  public:
  void unsafe_arena_set_allocated_inflow(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* inflow);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_inflow();

  // .pulse.cdm.bind.ScalarVolumePerTimeData OutFlow = 3;
  bool has_outflow() const;
  private:
  bool _internal_has_outflow() const;
  public:
  void clear_outflow();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& outflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_outflow();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_outflow();
  void set_allocated_outflow(::pulse::cdm::bind::ScalarVolumePerTimeData* outflow);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_outflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_outflow();
  public:
  void unsafe_arena_set_allocated_outflow(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* outflow);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_outflow();

  // .pulse.cdm.bind.ScalarPressureData Pressure = 4;
  bool has_pressure() const;
  private:
  bool _internal_has_pressure() const;
  public:
  void clear_pressure();
  const ::pulse::cdm::bind::ScalarPressureData& pressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_pressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_pressure();
  void set_allocated_pressure(::pulse::cdm::bind::ScalarPressureData* pressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_pressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_pressure();
  public:
  void unsafe_arena_set_allocated_pressure(
      ::pulse::cdm::bind::ScalarPressureData* pressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_pressure();

  // .pulse.cdm.bind.ScalarVolumeData Volume = 5;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  const ::pulse::cdm::bind::ScalarVolumeData& volume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_volume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_volume();
  void set_allocated_volume(::pulse::cdm::bind::ScalarVolumeData* volume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_volume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_volume();
  public:
  void unsafe_arena_set_allocated_volume(
      ::pulse::cdm::bind::ScalarVolumeData* volume);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_volume();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.FluidCompartmentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::CompartmentData* compartment_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* inflow_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* outflow_;
  ::pulse::cdm::bind::ScalarPressureData* pressure_;
  ::pulse::cdm::bind::ScalarVolumeData* volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fCompartment_2eproto;
};
// -------------------------------------------------------------------

class FluidCompartmentLinkData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.FluidCompartmentLinkData) */ {
 public:
  inline FluidCompartmentLinkData() : FluidCompartmentLinkData(nullptr) {}
  virtual ~FluidCompartmentLinkData();

  FluidCompartmentLinkData(const FluidCompartmentLinkData& from);
  FluidCompartmentLinkData(FluidCompartmentLinkData&& from) noexcept
    : FluidCompartmentLinkData() {
    *this = ::std::move(from);
  }

  inline FluidCompartmentLinkData& operator=(const FluidCompartmentLinkData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FluidCompartmentLinkData& operator=(FluidCompartmentLinkData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FluidCompartmentLinkData& default_instance();

  static inline const FluidCompartmentLinkData* internal_default_instance() {
    return reinterpret_cast<const FluidCompartmentLinkData*>(
               &_FluidCompartmentLinkData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FluidCompartmentLinkData& a, FluidCompartmentLinkData& b) {
    a.Swap(&b);
  }
  inline void Swap(FluidCompartmentLinkData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FluidCompartmentLinkData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FluidCompartmentLinkData* New() const final {
    return CreateMaybeMessage<FluidCompartmentLinkData>(nullptr);
  }

  FluidCompartmentLinkData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FluidCompartmentLinkData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FluidCompartmentLinkData& from);
  void MergeFrom(const FluidCompartmentLinkData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FluidCompartmentLinkData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.FluidCompartmentLinkData";
  }
  protected:
  explicit FluidCompartmentLinkData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkFieldNumber = 1,
    kFlowFieldNumber = 2,
  };
  // .pulse.cdm.bind.CompartmentLinkData Link = 1;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const ::pulse::cdm::bind::CompartmentLinkData& link() const;
  ::pulse::cdm::bind::CompartmentLinkData* release_link();
  ::pulse::cdm::bind::CompartmentLinkData* mutable_link();
  void set_allocated_link(::pulse::cdm::bind::CompartmentLinkData* link);
  private:
  const ::pulse::cdm::bind::CompartmentLinkData& _internal_link() const;
  ::pulse::cdm::bind::CompartmentLinkData* _internal_mutable_link();
  public:
  void unsafe_arena_set_allocated_link(
      ::pulse::cdm::bind::CompartmentLinkData* link);
  ::pulse::cdm::bind::CompartmentLinkData* unsafe_arena_release_link();

  // .pulse.cdm.bind.ScalarVolumePerTimeData Flow = 2;
  bool has_flow() const;
  private:
  bool _internal_has_flow() const;
  public:
  void clear_flow();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& flow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_flow();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_flow();
  void set_allocated_flow(::pulse::cdm::bind::ScalarVolumePerTimeData* flow);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_flow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_flow();
  public:
  void unsafe_arena_set_allocated_flow(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* flow);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_flow();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.FluidCompartmentLinkData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::CompartmentLinkData* link_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* flow_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fCompartment_2eproto;
};
// -------------------------------------------------------------------

class FluidCompartmentGraphData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.FluidCompartmentGraphData) */ {
 public:
  inline FluidCompartmentGraphData() : FluidCompartmentGraphData(nullptr) {}
  virtual ~FluidCompartmentGraphData();

  FluidCompartmentGraphData(const FluidCompartmentGraphData& from);
  FluidCompartmentGraphData(FluidCompartmentGraphData&& from) noexcept
    : FluidCompartmentGraphData() {
    *this = ::std::move(from);
  }

  inline FluidCompartmentGraphData& operator=(const FluidCompartmentGraphData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FluidCompartmentGraphData& operator=(FluidCompartmentGraphData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FluidCompartmentGraphData& default_instance();

  static inline const FluidCompartmentGraphData* internal_default_instance() {
    return reinterpret_cast<const FluidCompartmentGraphData*>(
               &_FluidCompartmentGraphData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FluidCompartmentGraphData& a, FluidCompartmentGraphData& b) {
    a.Swap(&b);
  }
  inline void Swap(FluidCompartmentGraphData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FluidCompartmentGraphData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FluidCompartmentGraphData* New() const final {
    return CreateMaybeMessage<FluidCompartmentGraphData>(nullptr);
  }

  FluidCompartmentGraphData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FluidCompartmentGraphData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FluidCompartmentGraphData& from);
  void MergeFrom(const FluidCompartmentGraphData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FluidCompartmentGraphData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.FluidCompartmentGraphData";
  }
  protected:
  explicit FluidCompartmentGraphData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphFieldNumber = 1,
  };
  // .pulse.cdm.bind.CompartmentGraphData Graph = 1;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::pulse::cdm::bind::CompartmentGraphData& graph() const;
  ::pulse::cdm::bind::CompartmentGraphData* release_graph();
  ::pulse::cdm::bind::CompartmentGraphData* mutable_graph();
  void set_allocated_graph(::pulse::cdm::bind::CompartmentGraphData* graph);
  private:
  const ::pulse::cdm::bind::CompartmentGraphData& _internal_graph() const;
  ::pulse::cdm::bind::CompartmentGraphData* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::pulse::cdm::bind::CompartmentGraphData* graph);
  ::pulse::cdm::bind::CompartmentGraphData* unsafe_arena_release_graph();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.FluidCompartmentGraphData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::CompartmentGraphData* graph_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fCompartment_2eproto;
};
// -------------------------------------------------------------------

class GasCompartmentData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.GasCompartmentData) */ {
 public:
  inline GasCompartmentData() : GasCompartmentData(nullptr) {}
  virtual ~GasCompartmentData();

  GasCompartmentData(const GasCompartmentData& from);
  GasCompartmentData(GasCompartmentData&& from) noexcept
    : GasCompartmentData() {
    *this = ::std::move(from);
  }

  inline GasCompartmentData& operator=(const GasCompartmentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GasCompartmentData& operator=(GasCompartmentData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GasCompartmentData& default_instance();

  static inline const GasCompartmentData* internal_default_instance() {
    return reinterpret_cast<const GasCompartmentData*>(
               &_GasCompartmentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GasCompartmentData& a, GasCompartmentData& b) {
    a.Swap(&b);
  }
  inline void Swap(GasCompartmentData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GasCompartmentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GasCompartmentData* New() const final {
    return CreateMaybeMessage<GasCompartmentData>(nullptr);
  }

  GasCompartmentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GasCompartmentData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GasCompartmentData& from);
  void MergeFrom(const GasCompartmentData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GasCompartmentData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.GasCompartmentData";
  }
  protected:
  explicit GasCompartmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubstanceQuantityFieldNumber = 2,
    kFluidCompartmentFieldNumber = 1,
  };
  // repeated .pulse.cdm.bind.GasSubstanceQuantityData SubstanceQuantity = 2;
  int substancequantity_size() const;
  private:
  int _internal_substancequantity_size() const;
  public:
  void clear_substancequantity();
  ::pulse::cdm::bind::GasSubstanceQuantityData* mutable_substancequantity(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasSubstanceQuantityData >*
      mutable_substancequantity();
  private:
  const ::pulse::cdm::bind::GasSubstanceQuantityData& _internal_substancequantity(int index) const;
  ::pulse::cdm::bind::GasSubstanceQuantityData* _internal_add_substancequantity();
  public:
  const ::pulse::cdm::bind::GasSubstanceQuantityData& substancequantity(int index) const;
  ::pulse::cdm::bind::GasSubstanceQuantityData* add_substancequantity();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasSubstanceQuantityData >&
      substancequantity() const;

  // .pulse.cdm.bind.FluidCompartmentData FluidCompartment = 1;
  bool has_fluidcompartment() const;
  private:
  bool _internal_has_fluidcompartment() const;
  public:
  void clear_fluidcompartment();
  const ::pulse::cdm::bind::FluidCompartmentData& fluidcompartment() const;
  ::pulse::cdm::bind::FluidCompartmentData* release_fluidcompartment();
  ::pulse::cdm::bind::FluidCompartmentData* mutable_fluidcompartment();
  void set_allocated_fluidcompartment(::pulse::cdm::bind::FluidCompartmentData* fluidcompartment);
  private:
  const ::pulse::cdm::bind::FluidCompartmentData& _internal_fluidcompartment() const;
  ::pulse::cdm::bind::FluidCompartmentData* _internal_mutable_fluidcompartment();
  public:
  void unsafe_arena_set_allocated_fluidcompartment(
      ::pulse::cdm::bind::FluidCompartmentData* fluidcompartment);
  ::pulse::cdm::bind::FluidCompartmentData* unsafe_arena_release_fluidcompartment();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.GasCompartmentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasSubstanceQuantityData > substancequantity_;
  ::pulse::cdm::bind::FluidCompartmentData* fluidcompartment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fCompartment_2eproto;
};
// -------------------------------------------------------------------

class GasCompartmentLinkData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.GasCompartmentLinkData) */ {
 public:
  inline GasCompartmentLinkData() : GasCompartmentLinkData(nullptr) {}
  virtual ~GasCompartmentLinkData();

  GasCompartmentLinkData(const GasCompartmentLinkData& from);
  GasCompartmentLinkData(GasCompartmentLinkData&& from) noexcept
    : GasCompartmentLinkData() {
    *this = ::std::move(from);
  }

  inline GasCompartmentLinkData& operator=(const GasCompartmentLinkData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GasCompartmentLinkData& operator=(GasCompartmentLinkData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GasCompartmentLinkData& default_instance();

  static inline const GasCompartmentLinkData* internal_default_instance() {
    return reinterpret_cast<const GasCompartmentLinkData*>(
               &_GasCompartmentLinkData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GasCompartmentLinkData& a, GasCompartmentLinkData& b) {
    a.Swap(&b);
  }
  inline void Swap(GasCompartmentLinkData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GasCompartmentLinkData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GasCompartmentLinkData* New() const final {
    return CreateMaybeMessage<GasCompartmentLinkData>(nullptr);
  }

  GasCompartmentLinkData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GasCompartmentLinkData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GasCompartmentLinkData& from);
  void MergeFrom(const GasCompartmentLinkData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GasCompartmentLinkData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.GasCompartmentLinkData";
  }
  protected:
  explicit GasCompartmentLinkData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFluidLinkFieldNumber = 1,
  };
  // .pulse.cdm.bind.FluidCompartmentLinkData FluidLink = 1;
  bool has_fluidlink() const;
  private:
  bool _internal_has_fluidlink() const;
  public:
  void clear_fluidlink();
  const ::pulse::cdm::bind::FluidCompartmentLinkData& fluidlink() const;
  ::pulse::cdm::bind::FluidCompartmentLinkData* release_fluidlink();
  ::pulse::cdm::bind::FluidCompartmentLinkData* mutable_fluidlink();
  void set_allocated_fluidlink(::pulse::cdm::bind::FluidCompartmentLinkData* fluidlink);
  private:
  const ::pulse::cdm::bind::FluidCompartmentLinkData& _internal_fluidlink() const;
  ::pulse::cdm::bind::FluidCompartmentLinkData* _internal_mutable_fluidlink();
  public:
  void unsafe_arena_set_allocated_fluidlink(
      ::pulse::cdm::bind::FluidCompartmentLinkData* fluidlink);
  ::pulse::cdm::bind::FluidCompartmentLinkData* unsafe_arena_release_fluidlink();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.GasCompartmentLinkData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::FluidCompartmentLinkData* fluidlink_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fCompartment_2eproto;
};
// -------------------------------------------------------------------

class GasCompartmentGraphData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.GasCompartmentGraphData) */ {
 public:
  inline GasCompartmentGraphData() : GasCompartmentGraphData(nullptr) {}
  virtual ~GasCompartmentGraphData();

  GasCompartmentGraphData(const GasCompartmentGraphData& from);
  GasCompartmentGraphData(GasCompartmentGraphData&& from) noexcept
    : GasCompartmentGraphData() {
    *this = ::std::move(from);
  }

  inline GasCompartmentGraphData& operator=(const GasCompartmentGraphData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GasCompartmentGraphData& operator=(GasCompartmentGraphData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GasCompartmentGraphData& default_instance();

  static inline const GasCompartmentGraphData* internal_default_instance() {
    return reinterpret_cast<const GasCompartmentGraphData*>(
               &_GasCompartmentGraphData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GasCompartmentGraphData& a, GasCompartmentGraphData& b) {
    a.Swap(&b);
  }
  inline void Swap(GasCompartmentGraphData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GasCompartmentGraphData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GasCompartmentGraphData* New() const final {
    return CreateMaybeMessage<GasCompartmentGraphData>(nullptr);
  }

  GasCompartmentGraphData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GasCompartmentGraphData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GasCompartmentGraphData& from);
  void MergeFrom(const GasCompartmentGraphData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GasCompartmentGraphData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.GasCompartmentGraphData";
  }
  protected:
  explicit GasCompartmentGraphData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFluidGraphFieldNumber = 1,
  };
  // .pulse.cdm.bind.FluidCompartmentGraphData FluidGraph = 1;
  bool has_fluidgraph() const;
  private:
  bool _internal_has_fluidgraph() const;
  public:
  void clear_fluidgraph();
  const ::pulse::cdm::bind::FluidCompartmentGraphData& fluidgraph() const;
  ::pulse::cdm::bind::FluidCompartmentGraphData* release_fluidgraph();
  ::pulse::cdm::bind::FluidCompartmentGraphData* mutable_fluidgraph();
  void set_allocated_fluidgraph(::pulse::cdm::bind::FluidCompartmentGraphData* fluidgraph);
  private:
  const ::pulse::cdm::bind::FluidCompartmentGraphData& _internal_fluidgraph() const;
  ::pulse::cdm::bind::FluidCompartmentGraphData* _internal_mutable_fluidgraph();
  public:
  void unsafe_arena_set_allocated_fluidgraph(
      ::pulse::cdm::bind::FluidCompartmentGraphData* fluidgraph);
  ::pulse::cdm::bind::FluidCompartmentGraphData* unsafe_arena_release_fluidgraph();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.GasCompartmentGraphData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::FluidCompartmentGraphData* fluidgraph_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fCompartment_2eproto;
};
// -------------------------------------------------------------------

class LiquidCompartmentData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.LiquidCompartmentData) */ {
 public:
  inline LiquidCompartmentData() : LiquidCompartmentData(nullptr) {}
  virtual ~LiquidCompartmentData();

  LiquidCompartmentData(const LiquidCompartmentData& from);
  LiquidCompartmentData(LiquidCompartmentData&& from) noexcept
    : LiquidCompartmentData() {
    *this = ::std::move(from);
  }

  inline LiquidCompartmentData& operator=(const LiquidCompartmentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidCompartmentData& operator=(LiquidCompartmentData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiquidCompartmentData& default_instance();

  static inline const LiquidCompartmentData* internal_default_instance() {
    return reinterpret_cast<const LiquidCompartmentData*>(
               &_LiquidCompartmentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LiquidCompartmentData& a, LiquidCompartmentData& b) {
    a.Swap(&b);
  }
  inline void Swap(LiquidCompartmentData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidCompartmentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiquidCompartmentData* New() const final {
    return CreateMaybeMessage<LiquidCompartmentData>(nullptr);
  }

  LiquidCompartmentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiquidCompartmentData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiquidCompartmentData& from);
  void MergeFrom(const LiquidCompartmentData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiquidCompartmentData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.LiquidCompartmentData";
  }
  protected:
  explicit LiquidCompartmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubstanceQuantityFieldNumber = 4,
    kFluidCompartmentFieldNumber = 1,
    kPHFieldNumber = 2,
    kWaterVolumeFractionFieldNumber = 3,
  };
  // repeated .pulse.cdm.bind.LiquidSubstanceQuantityData SubstanceQuantity = 4;
  int substancequantity_size() const;
  private:
  int _internal_substancequantity_size() const;
  public:
  void clear_substancequantity();
  ::pulse::cdm::bind::LiquidSubstanceQuantityData* mutable_substancequantity(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidSubstanceQuantityData >*
      mutable_substancequantity();
  private:
  const ::pulse::cdm::bind::LiquidSubstanceQuantityData& _internal_substancequantity(int index) const;
  ::pulse::cdm::bind::LiquidSubstanceQuantityData* _internal_add_substancequantity();
  public:
  const ::pulse::cdm::bind::LiquidSubstanceQuantityData& substancequantity(int index) const;
  ::pulse::cdm::bind::LiquidSubstanceQuantityData* add_substancequantity();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidSubstanceQuantityData >&
      substancequantity() const;

  // .pulse.cdm.bind.FluidCompartmentData FluidCompartment = 1;
  bool has_fluidcompartment() const;
  private:
  bool _internal_has_fluidcompartment() const;
  public:
  void clear_fluidcompartment();
  const ::pulse::cdm::bind::FluidCompartmentData& fluidcompartment() const;
  ::pulse::cdm::bind::FluidCompartmentData* release_fluidcompartment();
  ::pulse::cdm::bind::FluidCompartmentData* mutable_fluidcompartment();
  void set_allocated_fluidcompartment(::pulse::cdm::bind::FluidCompartmentData* fluidcompartment);
  private:
  const ::pulse::cdm::bind::FluidCompartmentData& _internal_fluidcompartment() const;
  ::pulse::cdm::bind::FluidCompartmentData* _internal_mutable_fluidcompartment();
  public:
  void unsafe_arena_set_allocated_fluidcompartment(
      ::pulse::cdm::bind::FluidCompartmentData* fluidcompartment);
  ::pulse::cdm::bind::FluidCompartmentData* unsafe_arena_release_fluidcompartment();

  // .pulse.cdm.bind.ScalarData pH = 2;
  bool has_ph() const;
  private:
  bool _internal_has_ph() const;
  public:
  void clear_ph();
  const ::pulse::cdm::bind::ScalarData& ph() const;
  ::pulse::cdm::bind::ScalarData* release_ph();
  ::pulse::cdm::bind::ScalarData* mutable_ph();
  void set_allocated_ph(::pulse::cdm::bind::ScalarData* ph);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_ph() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_ph();
  public:
  void unsafe_arena_set_allocated_ph(
      ::pulse::cdm::bind::ScalarData* ph);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_ph();

  // .pulse.cdm.bind.Scalar0To1Data WaterVolumeFraction = 3;
  bool has_watervolumefraction() const;
  private:
  bool _internal_has_watervolumefraction() const;
  public:
  void clear_watervolumefraction();
  const ::pulse::cdm::bind::Scalar0To1Data& watervolumefraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_watervolumefraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_watervolumefraction();
  void set_allocated_watervolumefraction(::pulse::cdm::bind::Scalar0To1Data* watervolumefraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_watervolumefraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_watervolumefraction();
  public:
  void unsafe_arena_set_allocated_watervolumefraction(
      ::pulse::cdm::bind::Scalar0To1Data* watervolumefraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_watervolumefraction();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.LiquidCompartmentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidSubstanceQuantityData > substancequantity_;
  ::pulse::cdm::bind::FluidCompartmentData* fluidcompartment_;
  ::pulse::cdm::bind::ScalarData* ph_;
  ::pulse::cdm::bind::Scalar0To1Data* watervolumefraction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fCompartment_2eproto;
};
// -------------------------------------------------------------------

class LiquidCompartmentLinkData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.LiquidCompartmentLinkData) */ {
 public:
  inline LiquidCompartmentLinkData() : LiquidCompartmentLinkData(nullptr) {}
  virtual ~LiquidCompartmentLinkData();

  LiquidCompartmentLinkData(const LiquidCompartmentLinkData& from);
  LiquidCompartmentLinkData(LiquidCompartmentLinkData&& from) noexcept
    : LiquidCompartmentLinkData() {
    *this = ::std::move(from);
  }

  inline LiquidCompartmentLinkData& operator=(const LiquidCompartmentLinkData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidCompartmentLinkData& operator=(LiquidCompartmentLinkData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiquidCompartmentLinkData& default_instance();

  static inline const LiquidCompartmentLinkData* internal_default_instance() {
    return reinterpret_cast<const LiquidCompartmentLinkData*>(
               &_LiquidCompartmentLinkData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LiquidCompartmentLinkData& a, LiquidCompartmentLinkData& b) {
    a.Swap(&b);
  }
  inline void Swap(LiquidCompartmentLinkData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidCompartmentLinkData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiquidCompartmentLinkData* New() const final {
    return CreateMaybeMessage<LiquidCompartmentLinkData>(nullptr);
  }

  LiquidCompartmentLinkData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiquidCompartmentLinkData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiquidCompartmentLinkData& from);
  void MergeFrom(const LiquidCompartmentLinkData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiquidCompartmentLinkData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.LiquidCompartmentLinkData";
  }
  protected:
  explicit LiquidCompartmentLinkData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFluidLinkFieldNumber = 1,
  };
  // .pulse.cdm.bind.FluidCompartmentLinkData FluidLink = 1;
  bool has_fluidlink() const;
  private:
  bool _internal_has_fluidlink() const;
  public:
  void clear_fluidlink();
  const ::pulse::cdm::bind::FluidCompartmentLinkData& fluidlink() const;
  ::pulse::cdm::bind::FluidCompartmentLinkData* release_fluidlink();
  ::pulse::cdm::bind::FluidCompartmentLinkData* mutable_fluidlink();
  void set_allocated_fluidlink(::pulse::cdm::bind::FluidCompartmentLinkData* fluidlink);
  private:
  const ::pulse::cdm::bind::FluidCompartmentLinkData& _internal_fluidlink() const;
  ::pulse::cdm::bind::FluidCompartmentLinkData* _internal_mutable_fluidlink();
  public:
  void unsafe_arena_set_allocated_fluidlink(
      ::pulse::cdm::bind::FluidCompartmentLinkData* fluidlink);
  ::pulse::cdm::bind::FluidCompartmentLinkData* unsafe_arena_release_fluidlink();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.LiquidCompartmentLinkData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::FluidCompartmentLinkData* fluidlink_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fCompartment_2eproto;
};
// -------------------------------------------------------------------

class LiquidCompartmentGraphData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.LiquidCompartmentGraphData) */ {
 public:
  inline LiquidCompartmentGraphData() : LiquidCompartmentGraphData(nullptr) {}
  virtual ~LiquidCompartmentGraphData();

  LiquidCompartmentGraphData(const LiquidCompartmentGraphData& from);
  LiquidCompartmentGraphData(LiquidCompartmentGraphData&& from) noexcept
    : LiquidCompartmentGraphData() {
    *this = ::std::move(from);
  }

  inline LiquidCompartmentGraphData& operator=(const LiquidCompartmentGraphData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidCompartmentGraphData& operator=(LiquidCompartmentGraphData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiquidCompartmentGraphData& default_instance();

  static inline const LiquidCompartmentGraphData* internal_default_instance() {
    return reinterpret_cast<const LiquidCompartmentGraphData*>(
               &_LiquidCompartmentGraphData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LiquidCompartmentGraphData& a, LiquidCompartmentGraphData& b) {
    a.Swap(&b);
  }
  inline void Swap(LiquidCompartmentGraphData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidCompartmentGraphData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiquidCompartmentGraphData* New() const final {
    return CreateMaybeMessage<LiquidCompartmentGraphData>(nullptr);
  }

  LiquidCompartmentGraphData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiquidCompartmentGraphData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiquidCompartmentGraphData& from);
  void MergeFrom(const LiquidCompartmentGraphData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiquidCompartmentGraphData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.LiquidCompartmentGraphData";
  }
  protected:
  explicit LiquidCompartmentGraphData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFluidGraphFieldNumber = 1,
  };
  // .pulse.cdm.bind.FluidCompartmentGraphData FluidGraph = 1;
  bool has_fluidgraph() const;
  private:
  bool _internal_has_fluidgraph() const;
  public:
  void clear_fluidgraph();
  const ::pulse::cdm::bind::FluidCompartmentGraphData& fluidgraph() const;
  ::pulse::cdm::bind::FluidCompartmentGraphData* release_fluidgraph();
  ::pulse::cdm::bind::FluidCompartmentGraphData* mutable_fluidgraph();
  void set_allocated_fluidgraph(::pulse::cdm::bind::FluidCompartmentGraphData* fluidgraph);
  private:
  const ::pulse::cdm::bind::FluidCompartmentGraphData& _internal_fluidgraph() const;
  ::pulse::cdm::bind::FluidCompartmentGraphData* _internal_mutable_fluidgraph();
  public:
  void unsafe_arena_set_allocated_fluidgraph(
      ::pulse::cdm::bind::FluidCompartmentGraphData* fluidgraph);
  ::pulse::cdm::bind::FluidCompartmentGraphData* unsafe_arena_release_fluidgraph();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.LiquidCompartmentGraphData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::FluidCompartmentGraphData* fluidgraph_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fCompartment_2eproto;
};
// -------------------------------------------------------------------

class TissueCompartmentData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.TissueCompartmentData) */ {
 public:
  inline TissueCompartmentData() : TissueCompartmentData(nullptr) {}
  virtual ~TissueCompartmentData();

  TissueCompartmentData(const TissueCompartmentData& from);
  TissueCompartmentData(TissueCompartmentData&& from) noexcept
    : TissueCompartmentData() {
    *this = ::std::move(from);
  }

  inline TissueCompartmentData& operator=(const TissueCompartmentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TissueCompartmentData& operator=(TissueCompartmentData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TissueCompartmentData& default_instance();

  static inline const TissueCompartmentData* internal_default_instance() {
    return reinterpret_cast<const TissueCompartmentData*>(
               &_TissueCompartmentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TissueCompartmentData& a, TissueCompartmentData& b) {
    a.Swap(&b);
  }
  inline void Swap(TissueCompartmentData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TissueCompartmentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TissueCompartmentData* New() const final {
    return CreateMaybeMessage<TissueCompartmentData>(nullptr);
  }

  TissueCompartmentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TissueCompartmentData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TissueCompartmentData& from);
  void MergeFrom(const TissueCompartmentData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TissueCompartmentData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.TissueCompartmentData";
  }
  protected:
  explicit TissueCompartmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompartmentFieldNumber = 1,
    kAcidicPhospohlipidConcentrationFieldNumber = 2,
    kMatrixVolumeFieldNumber = 3,
    kNeutralLipidsVolumeFractionFieldNumber = 4,
    kNeutralPhospholipidsVolumeFractionFieldNumber = 5,
    kTissueToPlasmaAlbuminRatioFieldNumber = 6,
    kTissueToPlasmaAlphaAcidGlycoproteinRatioFieldNumber = 7,
    kTissueToPlasmaLipoproteinRatioFieldNumber = 8,
    kTotalMassFieldNumber = 9,
  };
  // .pulse.cdm.bind.CompartmentData Compartment = 1;
  bool has_compartment() const;
  private:
  bool _internal_has_compartment() const;
  public:
  void clear_compartment();
  const ::pulse::cdm::bind::CompartmentData& compartment() const;
  ::pulse::cdm::bind::CompartmentData* release_compartment();
  ::pulse::cdm::bind::CompartmentData* mutable_compartment();
  void set_allocated_compartment(::pulse::cdm::bind::CompartmentData* compartment);
  private:
  const ::pulse::cdm::bind::CompartmentData& _internal_compartment() const;
  ::pulse::cdm::bind::CompartmentData* _internal_mutable_compartment();
  public:
  void unsafe_arena_set_allocated_compartment(
      ::pulse::cdm::bind::CompartmentData* compartment);
  ::pulse::cdm::bind::CompartmentData* unsafe_arena_release_compartment();

  // .pulse.cdm.bind.ScalarMassPerMassData AcidicPhospohlipidConcentration = 2;
  bool has_acidicphospohlipidconcentration() const;
  private:
  bool _internal_has_acidicphospohlipidconcentration() const;
  public:
  void clear_acidicphospohlipidconcentration();
  const ::pulse::cdm::bind::ScalarMassPerMassData& acidicphospohlipidconcentration() const;
  ::pulse::cdm::bind::ScalarMassPerMassData* release_acidicphospohlipidconcentration();
  ::pulse::cdm::bind::ScalarMassPerMassData* mutable_acidicphospohlipidconcentration();
  void set_allocated_acidicphospohlipidconcentration(::pulse::cdm::bind::ScalarMassPerMassData* acidicphospohlipidconcentration);
  private:
  const ::pulse::cdm::bind::ScalarMassPerMassData& _internal_acidicphospohlipidconcentration() const;
  ::pulse::cdm::bind::ScalarMassPerMassData* _internal_mutable_acidicphospohlipidconcentration();
  public:
  void unsafe_arena_set_allocated_acidicphospohlipidconcentration(
      ::pulse::cdm::bind::ScalarMassPerMassData* acidicphospohlipidconcentration);
  ::pulse::cdm::bind::ScalarMassPerMassData* unsafe_arena_release_acidicphospohlipidconcentration();

  // .pulse.cdm.bind.ScalarVolumeData MatrixVolume = 3;
  bool has_matrixvolume() const;
  private:
  bool _internal_has_matrixvolume() const;
  public:
  void clear_matrixvolume();
  const ::pulse::cdm::bind::ScalarVolumeData& matrixvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_matrixvolume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_matrixvolume();
  void set_allocated_matrixvolume(::pulse::cdm::bind::ScalarVolumeData* matrixvolume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_matrixvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_matrixvolume();
  public:
  void unsafe_arena_set_allocated_matrixvolume(
      ::pulse::cdm::bind::ScalarVolumeData* matrixvolume);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_matrixvolume();

  // .pulse.cdm.bind.Scalar0To1Data NeutralLipidsVolumeFraction = 4;
  bool has_neutrallipidsvolumefraction() const;
  private:
  bool _internal_has_neutrallipidsvolumefraction() const;
  public:
  void clear_neutrallipidsvolumefraction();
  const ::pulse::cdm::bind::Scalar0To1Data& neutrallipidsvolumefraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_neutrallipidsvolumefraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_neutrallipidsvolumefraction();
  void set_allocated_neutrallipidsvolumefraction(::pulse::cdm::bind::Scalar0To1Data* neutrallipidsvolumefraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_neutrallipidsvolumefraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_neutrallipidsvolumefraction();
  public:
  void unsafe_arena_set_allocated_neutrallipidsvolumefraction(
      ::pulse::cdm::bind::Scalar0To1Data* neutrallipidsvolumefraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_neutrallipidsvolumefraction();

  // .pulse.cdm.bind.Scalar0To1Data NeutralPhospholipidsVolumeFraction = 5;
  bool has_neutralphospholipidsvolumefraction() const;
  private:
  bool _internal_has_neutralphospholipidsvolumefraction() const;
  public:
  void clear_neutralphospholipidsvolumefraction();
  const ::pulse::cdm::bind::Scalar0To1Data& neutralphospholipidsvolumefraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_neutralphospholipidsvolumefraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_neutralphospholipidsvolumefraction();
  void set_allocated_neutralphospholipidsvolumefraction(::pulse::cdm::bind::Scalar0To1Data* neutralphospholipidsvolumefraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_neutralphospholipidsvolumefraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_neutralphospholipidsvolumefraction();
  public:
  void unsafe_arena_set_allocated_neutralphospholipidsvolumefraction(
      ::pulse::cdm::bind::Scalar0To1Data* neutralphospholipidsvolumefraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_neutralphospholipidsvolumefraction();

  // .pulse.cdm.bind.ScalarData TissueToPlasmaAlbuminRatio = 6;
  bool has_tissuetoplasmaalbuminratio() const;
  private:
  bool _internal_has_tissuetoplasmaalbuminratio() const;
  public:
  void clear_tissuetoplasmaalbuminratio();
  const ::pulse::cdm::bind::ScalarData& tissuetoplasmaalbuminratio() const;
  ::pulse::cdm::bind::ScalarData* release_tissuetoplasmaalbuminratio();
  ::pulse::cdm::bind::ScalarData* mutable_tissuetoplasmaalbuminratio();
  void set_allocated_tissuetoplasmaalbuminratio(::pulse::cdm::bind::ScalarData* tissuetoplasmaalbuminratio);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_tissuetoplasmaalbuminratio() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_tissuetoplasmaalbuminratio();
  public:
  void unsafe_arena_set_allocated_tissuetoplasmaalbuminratio(
      ::pulse::cdm::bind::ScalarData* tissuetoplasmaalbuminratio);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_tissuetoplasmaalbuminratio();

  // .pulse.cdm.bind.ScalarData TissueToPlasmaAlphaAcidGlycoproteinRatio = 7;
  bool has_tissuetoplasmaalphaacidglycoproteinratio() const;
  private:
  bool _internal_has_tissuetoplasmaalphaacidglycoproteinratio() const;
  public:
  void clear_tissuetoplasmaalphaacidglycoproteinratio();
  const ::pulse::cdm::bind::ScalarData& tissuetoplasmaalphaacidglycoproteinratio() const;
  ::pulse::cdm::bind::ScalarData* release_tissuetoplasmaalphaacidglycoproteinratio();
  ::pulse::cdm::bind::ScalarData* mutable_tissuetoplasmaalphaacidglycoproteinratio();
  void set_allocated_tissuetoplasmaalphaacidglycoproteinratio(::pulse::cdm::bind::ScalarData* tissuetoplasmaalphaacidglycoproteinratio);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_tissuetoplasmaalphaacidglycoproteinratio() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_tissuetoplasmaalphaacidglycoproteinratio();
  public:
  void unsafe_arena_set_allocated_tissuetoplasmaalphaacidglycoproteinratio(
      ::pulse::cdm::bind::ScalarData* tissuetoplasmaalphaacidglycoproteinratio);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_tissuetoplasmaalphaacidglycoproteinratio();

  // .pulse.cdm.bind.ScalarData TissueToPlasmaLipoproteinRatio = 8;
  bool has_tissuetoplasmalipoproteinratio() const;
  private:
  bool _internal_has_tissuetoplasmalipoproteinratio() const;
  public:
  void clear_tissuetoplasmalipoproteinratio();
  const ::pulse::cdm::bind::ScalarData& tissuetoplasmalipoproteinratio() const;
  ::pulse::cdm::bind::ScalarData* release_tissuetoplasmalipoproteinratio();
  ::pulse::cdm::bind::ScalarData* mutable_tissuetoplasmalipoproteinratio();
  void set_allocated_tissuetoplasmalipoproteinratio(::pulse::cdm::bind::ScalarData* tissuetoplasmalipoproteinratio);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_tissuetoplasmalipoproteinratio() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_tissuetoplasmalipoproteinratio();
  public:
  void unsafe_arena_set_allocated_tissuetoplasmalipoproteinratio(
      ::pulse::cdm::bind::ScalarData* tissuetoplasmalipoproteinratio);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_tissuetoplasmalipoproteinratio();

  // .pulse.cdm.bind.ScalarMassData TotalMass = 9;
  bool has_totalmass() const;
  private:
  bool _internal_has_totalmass() const;
  public:
  void clear_totalmass();
  const ::pulse::cdm::bind::ScalarMassData& totalmass() const;
  ::pulse::cdm::bind::ScalarMassData* release_totalmass();
  ::pulse::cdm::bind::ScalarMassData* mutable_totalmass();
  void set_allocated_totalmass(::pulse::cdm::bind::ScalarMassData* totalmass);
  private:
  const ::pulse::cdm::bind::ScalarMassData& _internal_totalmass() const;
  ::pulse::cdm::bind::ScalarMassData* _internal_mutable_totalmass();
  public:
  void unsafe_arena_set_allocated_totalmass(
      ::pulse::cdm::bind::ScalarMassData* totalmass);
  ::pulse::cdm::bind::ScalarMassData* unsafe_arena_release_totalmass();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.TissueCompartmentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::CompartmentData* compartment_;
  ::pulse::cdm::bind::ScalarMassPerMassData* acidicphospohlipidconcentration_;
  ::pulse::cdm::bind::ScalarVolumeData* matrixvolume_;
  ::pulse::cdm::bind::Scalar0To1Data* neutrallipidsvolumefraction_;
  ::pulse::cdm::bind::Scalar0To1Data* neutralphospholipidsvolumefraction_;
  ::pulse::cdm::bind::ScalarData* tissuetoplasmaalbuminratio_;
  ::pulse::cdm::bind::ScalarData* tissuetoplasmaalphaacidglycoproteinratio_;
  ::pulse::cdm::bind::ScalarData* tissuetoplasmalipoproteinratio_;
  ::pulse::cdm::bind::ScalarMassData* totalmass_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fCompartment_2eproto;
};
// -------------------------------------------------------------------

class ThermalCompartmentData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ThermalCompartmentData) */ {
 public:
  inline ThermalCompartmentData() : ThermalCompartmentData(nullptr) {}
  virtual ~ThermalCompartmentData();

  ThermalCompartmentData(const ThermalCompartmentData& from);
  ThermalCompartmentData(ThermalCompartmentData&& from) noexcept
    : ThermalCompartmentData() {
    *this = ::std::move(from);
  }

  inline ThermalCompartmentData& operator=(const ThermalCompartmentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThermalCompartmentData& operator=(ThermalCompartmentData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThermalCompartmentData& default_instance();

  static inline const ThermalCompartmentData* internal_default_instance() {
    return reinterpret_cast<const ThermalCompartmentData*>(
               &_ThermalCompartmentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ThermalCompartmentData& a, ThermalCompartmentData& b) {
    a.Swap(&b);
  }
  inline void Swap(ThermalCompartmentData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThermalCompartmentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThermalCompartmentData* New() const final {
    return CreateMaybeMessage<ThermalCompartmentData>(nullptr);
  }

  ThermalCompartmentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThermalCompartmentData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThermalCompartmentData& from);
  void MergeFrom(const ThermalCompartmentData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThermalCompartmentData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ThermalCompartmentData";
  }
  protected:
  explicit ThermalCompartmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompartmentFieldNumber = 1,
    kHeatTransferRateInFieldNumber = 2,
    kHeatTransferRateOutFieldNumber = 3,
    kTemperatureFieldNumber = 4,
    kHeatFieldNumber = 5,
  };
  // .pulse.cdm.bind.CompartmentData Compartment = 1;
  bool has_compartment() const;
  private:
  bool _internal_has_compartment() const;
  public:
  void clear_compartment();
  const ::pulse::cdm::bind::CompartmentData& compartment() const;
  ::pulse::cdm::bind::CompartmentData* release_compartment();
  ::pulse::cdm::bind::CompartmentData* mutable_compartment();
  void set_allocated_compartment(::pulse::cdm::bind::CompartmentData* compartment);
  private:
  const ::pulse::cdm::bind::CompartmentData& _internal_compartment() const;
  ::pulse::cdm::bind::CompartmentData* _internal_mutable_compartment();
  public:
  void unsafe_arena_set_allocated_compartment(
      ::pulse::cdm::bind::CompartmentData* compartment);
  ::pulse::cdm::bind::CompartmentData* unsafe_arena_release_compartment();

  // .pulse.cdm.bind.ScalarPowerData HeatTransferRateIn = 2;
  bool has_heattransferratein() const;
  private:
  bool _internal_has_heattransferratein() const;
  public:
  void clear_heattransferratein();
  const ::pulse::cdm::bind::ScalarPowerData& heattransferratein() const;
  ::pulse::cdm::bind::ScalarPowerData* release_heattransferratein();
  ::pulse::cdm::bind::ScalarPowerData* mutable_heattransferratein();
  void set_allocated_heattransferratein(::pulse::cdm::bind::ScalarPowerData* heattransferratein);
  private:
  const ::pulse::cdm::bind::ScalarPowerData& _internal_heattransferratein() const;
  ::pulse::cdm::bind::ScalarPowerData* _internal_mutable_heattransferratein();
  public:
  void unsafe_arena_set_allocated_heattransferratein(
      ::pulse::cdm::bind::ScalarPowerData* heattransferratein);
  ::pulse::cdm::bind::ScalarPowerData* unsafe_arena_release_heattransferratein();

  // .pulse.cdm.bind.ScalarPowerData HeatTransferRateOut = 3;
  bool has_heattransferrateout() const;
  private:
  bool _internal_has_heattransferrateout() const;
  public:
  void clear_heattransferrateout();
  const ::pulse::cdm::bind::ScalarPowerData& heattransferrateout() const;
  ::pulse::cdm::bind::ScalarPowerData* release_heattransferrateout();
  ::pulse::cdm::bind::ScalarPowerData* mutable_heattransferrateout();
  void set_allocated_heattransferrateout(::pulse::cdm::bind::ScalarPowerData* heattransferrateout);
  private:
  const ::pulse::cdm::bind::ScalarPowerData& _internal_heattransferrateout() const;
  ::pulse::cdm::bind::ScalarPowerData* _internal_mutable_heattransferrateout();
  public:
  void unsafe_arena_set_allocated_heattransferrateout(
      ::pulse::cdm::bind::ScalarPowerData* heattransferrateout);
  ::pulse::cdm::bind::ScalarPowerData* unsafe_arena_release_heattransferrateout();

  // .pulse.cdm.bind.ScalarTemperatureData Temperature = 4;
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  const ::pulse::cdm::bind::ScalarTemperatureData& temperature() const;
  ::pulse::cdm::bind::ScalarTemperatureData* release_temperature();
  ::pulse::cdm::bind::ScalarTemperatureData* mutable_temperature();
  void set_allocated_temperature(::pulse::cdm::bind::ScalarTemperatureData* temperature);
  private:
  const ::pulse::cdm::bind::ScalarTemperatureData& _internal_temperature() const;
  ::pulse::cdm::bind::ScalarTemperatureData* _internal_mutable_temperature();
  public:
  void unsafe_arena_set_allocated_temperature(
      ::pulse::cdm::bind::ScalarTemperatureData* temperature);
  ::pulse::cdm::bind::ScalarTemperatureData* unsafe_arena_release_temperature();

  // .pulse.cdm.bind.ScalarEnergyData Heat = 5;
  bool has_heat() const;
  private:
  bool _internal_has_heat() const;
  public:
  void clear_heat();
  const ::pulse::cdm::bind::ScalarEnergyData& heat() const;
  ::pulse::cdm::bind::ScalarEnergyData* release_heat();
  ::pulse::cdm::bind::ScalarEnergyData* mutable_heat();
  void set_allocated_heat(::pulse::cdm::bind::ScalarEnergyData* heat);
  private:
  const ::pulse::cdm::bind::ScalarEnergyData& _internal_heat() const;
  ::pulse::cdm::bind::ScalarEnergyData* _internal_mutable_heat();
  public:
  void unsafe_arena_set_allocated_heat(
      ::pulse::cdm::bind::ScalarEnergyData* heat);
  ::pulse::cdm::bind::ScalarEnergyData* unsafe_arena_release_heat();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ThermalCompartmentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::CompartmentData* compartment_;
  ::pulse::cdm::bind::ScalarPowerData* heattransferratein_;
  ::pulse::cdm::bind::ScalarPowerData* heattransferrateout_;
  ::pulse::cdm::bind::ScalarTemperatureData* temperature_;
  ::pulse::cdm::bind::ScalarEnergyData* heat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fCompartment_2eproto;
};
// -------------------------------------------------------------------

class ThermalCompartmentLinkData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ThermalCompartmentLinkData) */ {
 public:
  inline ThermalCompartmentLinkData() : ThermalCompartmentLinkData(nullptr) {}
  virtual ~ThermalCompartmentLinkData();

  ThermalCompartmentLinkData(const ThermalCompartmentLinkData& from);
  ThermalCompartmentLinkData(ThermalCompartmentLinkData&& from) noexcept
    : ThermalCompartmentLinkData() {
    *this = ::std::move(from);
  }

  inline ThermalCompartmentLinkData& operator=(const ThermalCompartmentLinkData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThermalCompartmentLinkData& operator=(ThermalCompartmentLinkData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThermalCompartmentLinkData& default_instance();

  static inline const ThermalCompartmentLinkData* internal_default_instance() {
    return reinterpret_cast<const ThermalCompartmentLinkData*>(
               &_ThermalCompartmentLinkData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ThermalCompartmentLinkData& a, ThermalCompartmentLinkData& b) {
    a.Swap(&b);
  }
  inline void Swap(ThermalCompartmentLinkData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThermalCompartmentLinkData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThermalCompartmentLinkData* New() const final {
    return CreateMaybeMessage<ThermalCompartmentLinkData>(nullptr);
  }

  ThermalCompartmentLinkData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThermalCompartmentLinkData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThermalCompartmentLinkData& from);
  void MergeFrom(const ThermalCompartmentLinkData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThermalCompartmentLinkData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ThermalCompartmentLinkData";
  }
  protected:
  explicit ThermalCompartmentLinkData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkFieldNumber = 1,
    kHeatTransferRateFieldNumber = 2,
  };
  // .pulse.cdm.bind.CompartmentLinkData Link = 1;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const ::pulse::cdm::bind::CompartmentLinkData& link() const;
  ::pulse::cdm::bind::CompartmentLinkData* release_link();
  ::pulse::cdm::bind::CompartmentLinkData* mutable_link();
  void set_allocated_link(::pulse::cdm::bind::CompartmentLinkData* link);
  private:
  const ::pulse::cdm::bind::CompartmentLinkData& _internal_link() const;
  ::pulse::cdm::bind::CompartmentLinkData* _internal_mutable_link();
  public:
  void unsafe_arena_set_allocated_link(
      ::pulse::cdm::bind::CompartmentLinkData* link);
  ::pulse::cdm::bind::CompartmentLinkData* unsafe_arena_release_link();

  // .pulse.cdm.bind.ScalarPowerData HeatTransferRate = 2;
  bool has_heattransferrate() const;
  private:
  bool _internal_has_heattransferrate() const;
  public:
  void clear_heattransferrate();
  const ::pulse::cdm::bind::ScalarPowerData& heattransferrate() const;
  ::pulse::cdm::bind::ScalarPowerData* release_heattransferrate();
  ::pulse::cdm::bind::ScalarPowerData* mutable_heattransferrate();
  void set_allocated_heattransferrate(::pulse::cdm::bind::ScalarPowerData* heattransferrate);
  private:
  const ::pulse::cdm::bind::ScalarPowerData& _internal_heattransferrate() const;
  ::pulse::cdm::bind::ScalarPowerData* _internal_mutable_heattransferrate();
  public:
  void unsafe_arena_set_allocated_heattransferrate(
      ::pulse::cdm::bind::ScalarPowerData* heattransferrate);
  ::pulse::cdm::bind::ScalarPowerData* unsafe_arena_release_heattransferrate();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ThermalCompartmentLinkData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::CompartmentLinkData* link_;
  ::pulse::cdm::bind::ScalarPowerData* heattransferrate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fCompartment_2eproto;
};
// -------------------------------------------------------------------

class ElectricalCompartmentData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ElectricalCompartmentData) */ {
 public:
  inline ElectricalCompartmentData() : ElectricalCompartmentData(nullptr) {}
  virtual ~ElectricalCompartmentData();

  ElectricalCompartmentData(const ElectricalCompartmentData& from);
  ElectricalCompartmentData(ElectricalCompartmentData&& from) noexcept
    : ElectricalCompartmentData() {
    *this = ::std::move(from);
  }

  inline ElectricalCompartmentData& operator=(const ElectricalCompartmentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ElectricalCompartmentData& operator=(ElectricalCompartmentData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ElectricalCompartmentData& default_instance();

  static inline const ElectricalCompartmentData* internal_default_instance() {
    return reinterpret_cast<const ElectricalCompartmentData*>(
               &_ElectricalCompartmentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ElectricalCompartmentData& a, ElectricalCompartmentData& b) {
    a.Swap(&b);
  }
  inline void Swap(ElectricalCompartmentData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ElectricalCompartmentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ElectricalCompartmentData* New() const final {
    return CreateMaybeMessage<ElectricalCompartmentData>(nullptr);
  }

  ElectricalCompartmentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ElectricalCompartmentData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ElectricalCompartmentData& from);
  void MergeFrom(const ElectricalCompartmentData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElectricalCompartmentData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ElectricalCompartmentData";
  }
  protected:
  explicit ElectricalCompartmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompartmentFieldNumber = 1,
    kCurrentInFieldNumber = 2,
    kCurrentOutFieldNumber = 3,
    kVoltageFieldNumber = 4,
    kChargeFieldNumber = 5,
  };
  // .pulse.cdm.bind.CompartmentData Compartment = 1;
  bool has_compartment() const;
  private:
  bool _internal_has_compartment() const;
  public:
  void clear_compartment();
  const ::pulse::cdm::bind::CompartmentData& compartment() const;
  ::pulse::cdm::bind::CompartmentData* release_compartment();
  ::pulse::cdm::bind::CompartmentData* mutable_compartment();
  void set_allocated_compartment(::pulse::cdm::bind::CompartmentData* compartment);
  private:
  const ::pulse::cdm::bind::CompartmentData& _internal_compartment() const;
  ::pulse::cdm::bind::CompartmentData* _internal_mutable_compartment();
  public:
  void unsafe_arena_set_allocated_compartment(
      ::pulse::cdm::bind::CompartmentData* compartment);
  ::pulse::cdm::bind::CompartmentData* unsafe_arena_release_compartment();

  // .pulse.cdm.bind.ScalarElectricCurrentData CurrentIn = 2;
  bool has_currentin() const;
  private:
  bool _internal_has_currentin() const;
  public:
  void clear_currentin();
  const ::pulse::cdm::bind::ScalarElectricCurrentData& currentin() const;
  ::pulse::cdm::bind::ScalarElectricCurrentData* release_currentin();
  ::pulse::cdm::bind::ScalarElectricCurrentData* mutable_currentin();
  void set_allocated_currentin(::pulse::cdm::bind::ScalarElectricCurrentData* currentin);
  private:
  const ::pulse::cdm::bind::ScalarElectricCurrentData& _internal_currentin() const;
  ::pulse::cdm::bind::ScalarElectricCurrentData* _internal_mutable_currentin();
  public:
  void unsafe_arena_set_allocated_currentin(
      ::pulse::cdm::bind::ScalarElectricCurrentData* currentin);
  ::pulse::cdm::bind::ScalarElectricCurrentData* unsafe_arena_release_currentin();

  // .pulse.cdm.bind.ScalarElectricCurrentData CurrentOut = 3;
  bool has_currentout() const;
  private:
  bool _internal_has_currentout() const;
  public:
  void clear_currentout();
  const ::pulse::cdm::bind::ScalarElectricCurrentData& currentout() const;
  ::pulse::cdm::bind::ScalarElectricCurrentData* release_currentout();
  ::pulse::cdm::bind::ScalarElectricCurrentData* mutable_currentout();
  void set_allocated_currentout(::pulse::cdm::bind::ScalarElectricCurrentData* currentout);
  private:
  const ::pulse::cdm::bind::ScalarElectricCurrentData& _internal_currentout() const;
  ::pulse::cdm::bind::ScalarElectricCurrentData* _internal_mutable_currentout();
  public:
  void unsafe_arena_set_allocated_currentout(
      ::pulse::cdm::bind::ScalarElectricCurrentData* currentout);
  ::pulse::cdm::bind::ScalarElectricCurrentData* unsafe_arena_release_currentout();

  // .pulse.cdm.bind.ScalarElectricPotentialData Voltage = 4;
  bool has_voltage() const;
  private:
  bool _internal_has_voltage() const;
  public:
  void clear_voltage();
  const ::pulse::cdm::bind::ScalarElectricPotentialData& voltage() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* release_voltage();
  ::pulse::cdm::bind::ScalarElectricPotentialData* mutable_voltage();
  void set_allocated_voltage(::pulse::cdm::bind::ScalarElectricPotentialData* voltage);
  private:
  const ::pulse::cdm::bind::ScalarElectricPotentialData& _internal_voltage() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* _internal_mutable_voltage();
  public:
  void unsafe_arena_set_allocated_voltage(
      ::pulse::cdm::bind::ScalarElectricPotentialData* voltage);
  ::pulse::cdm::bind::ScalarElectricPotentialData* unsafe_arena_release_voltage();

  // .pulse.cdm.bind.ScalarElectricChargeData Charge = 5;
  bool has_charge() const;
  private:
  bool _internal_has_charge() const;
  public:
  void clear_charge();
  const ::pulse::cdm::bind::ScalarElectricChargeData& charge() const;
  ::pulse::cdm::bind::ScalarElectricChargeData* release_charge();
  ::pulse::cdm::bind::ScalarElectricChargeData* mutable_charge();
  void set_allocated_charge(::pulse::cdm::bind::ScalarElectricChargeData* charge);
  private:
  const ::pulse::cdm::bind::ScalarElectricChargeData& _internal_charge() const;
  ::pulse::cdm::bind::ScalarElectricChargeData* _internal_mutable_charge();
  public:
  void unsafe_arena_set_allocated_charge(
      ::pulse::cdm::bind::ScalarElectricChargeData* charge);
  ::pulse::cdm::bind::ScalarElectricChargeData* unsafe_arena_release_charge();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ElectricalCompartmentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::CompartmentData* compartment_;
  ::pulse::cdm::bind::ScalarElectricCurrentData* currentin_;
  ::pulse::cdm::bind::ScalarElectricCurrentData* currentout_;
  ::pulse::cdm::bind::ScalarElectricPotentialData* voltage_;
  ::pulse::cdm::bind::ScalarElectricChargeData* charge_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fCompartment_2eproto;
};
// -------------------------------------------------------------------

class ElectricalCompartmentLinkData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ElectricalCompartmentLinkData) */ {
 public:
  inline ElectricalCompartmentLinkData() : ElectricalCompartmentLinkData(nullptr) {}
  virtual ~ElectricalCompartmentLinkData();

  ElectricalCompartmentLinkData(const ElectricalCompartmentLinkData& from);
  ElectricalCompartmentLinkData(ElectricalCompartmentLinkData&& from) noexcept
    : ElectricalCompartmentLinkData() {
    *this = ::std::move(from);
  }

  inline ElectricalCompartmentLinkData& operator=(const ElectricalCompartmentLinkData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ElectricalCompartmentLinkData& operator=(ElectricalCompartmentLinkData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ElectricalCompartmentLinkData& default_instance();

  static inline const ElectricalCompartmentLinkData* internal_default_instance() {
    return reinterpret_cast<const ElectricalCompartmentLinkData*>(
               &_ElectricalCompartmentLinkData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ElectricalCompartmentLinkData& a, ElectricalCompartmentLinkData& b) {
    a.Swap(&b);
  }
  inline void Swap(ElectricalCompartmentLinkData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ElectricalCompartmentLinkData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ElectricalCompartmentLinkData* New() const final {
    return CreateMaybeMessage<ElectricalCompartmentLinkData>(nullptr);
  }

  ElectricalCompartmentLinkData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ElectricalCompartmentLinkData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ElectricalCompartmentLinkData& from);
  void MergeFrom(const ElectricalCompartmentLinkData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElectricalCompartmentLinkData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ElectricalCompartmentLinkData";
  }
  protected:
  explicit ElectricalCompartmentLinkData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkFieldNumber = 1,
    kCurrentFieldNumber = 2,
  };
  // .pulse.cdm.bind.CompartmentLinkData Link = 1;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const ::pulse::cdm::bind::CompartmentLinkData& link() const;
  ::pulse::cdm::bind::CompartmentLinkData* release_link();
  ::pulse::cdm::bind::CompartmentLinkData* mutable_link();
  void set_allocated_link(::pulse::cdm::bind::CompartmentLinkData* link);
  private:
  const ::pulse::cdm::bind::CompartmentLinkData& _internal_link() const;
  ::pulse::cdm::bind::CompartmentLinkData* _internal_mutable_link();
  public:
  void unsafe_arena_set_allocated_link(
      ::pulse::cdm::bind::CompartmentLinkData* link);
  ::pulse::cdm::bind::CompartmentLinkData* unsafe_arena_release_link();

  // .pulse.cdm.bind.ScalarElectricCurrentData Current = 2;
  bool has_current() const;
  private:
  bool _internal_has_current() const;
  public:
  void clear_current();
  const ::pulse::cdm::bind::ScalarElectricCurrentData& current() const;
  ::pulse::cdm::bind::ScalarElectricCurrentData* release_current();
  ::pulse::cdm::bind::ScalarElectricCurrentData* mutable_current();
  void set_allocated_current(::pulse::cdm::bind::ScalarElectricCurrentData* current);
  private:
  const ::pulse::cdm::bind::ScalarElectricCurrentData& _internal_current() const;
  ::pulse::cdm::bind::ScalarElectricCurrentData* _internal_mutable_current();
  public:
  void unsafe_arena_set_allocated_current(
      ::pulse::cdm::bind::ScalarElectricCurrentData* current);
  ::pulse::cdm::bind::ScalarElectricCurrentData* unsafe_arena_release_current();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ElectricalCompartmentLinkData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::CompartmentLinkData* link_;
  ::pulse::cdm::bind::ScalarElectricCurrentData* current_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fCompartment_2eproto;
};
// -------------------------------------------------------------------

class CompartmentManagerData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.CompartmentManagerData) */ {
 public:
  inline CompartmentManagerData() : CompartmentManagerData(nullptr) {}
  virtual ~CompartmentManagerData();

  CompartmentManagerData(const CompartmentManagerData& from);
  CompartmentManagerData(CompartmentManagerData&& from) noexcept
    : CompartmentManagerData() {
    *this = ::std::move(from);
  }

  inline CompartmentManagerData& operator=(const CompartmentManagerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompartmentManagerData& operator=(CompartmentManagerData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompartmentManagerData& default_instance();

  static inline const CompartmentManagerData* internal_default_instance() {
    return reinterpret_cast<const CompartmentManagerData*>(
               &_CompartmentManagerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CompartmentManagerData& a, CompartmentManagerData& b) {
    a.Swap(&b);
  }
  inline void Swap(CompartmentManagerData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompartmentManagerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompartmentManagerData* New() const final {
    return CreateMaybeMessage<CompartmentManagerData>(nullptr);
  }

  CompartmentManagerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompartmentManagerData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompartmentManagerData& from);
  void MergeFrom(const CompartmentManagerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompartmentManagerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.CompartmentManagerData";
  }
  protected:
  explicit CompartmentManagerData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElectricalCompartmentFieldNumber = 1,
    kElectricalLinkFieldNumber = 2,
    kLiquidCompartmentFieldNumber = 3,
    kLiquidLinkFieldNumber = 4,
    kLiquidSubstanceFieldNumber = 5,
    kLiquidGraphFieldNumber = 6,
    kGasCompartmentFieldNumber = 7,
    kGasLinkFieldNumber = 8,
    kGasSubstanceFieldNumber = 9,
    kGasGraphFieldNumber = 10,
    kThermalCompartmentFieldNumber = 11,
    kThermalLinkFieldNumber = 12,
    kTissueCompartmentFieldNumber = 13,
    kTissueSubstanceFieldNumber = 14,
  };
  // repeated .pulse.cdm.bind.ElectricalCompartmentData ElectricalCompartment = 1;
  int electricalcompartment_size() const;
  private:
  int _internal_electricalcompartment_size() const;
  public:
  void clear_electricalcompartment();
  ::pulse::cdm::bind::ElectricalCompartmentData* mutable_electricalcompartment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ElectricalCompartmentData >*
      mutable_electricalcompartment();
  private:
  const ::pulse::cdm::bind::ElectricalCompartmentData& _internal_electricalcompartment(int index) const;
  ::pulse::cdm::bind::ElectricalCompartmentData* _internal_add_electricalcompartment();
  public:
  const ::pulse::cdm::bind::ElectricalCompartmentData& electricalcompartment(int index) const;
  ::pulse::cdm::bind::ElectricalCompartmentData* add_electricalcompartment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ElectricalCompartmentData >&
      electricalcompartment() const;

  // repeated .pulse.cdm.bind.ElectricalCompartmentLinkData ElectricalLink = 2;
  int electricallink_size() const;
  private:
  int _internal_electricallink_size() const;
  public:
  void clear_electricallink();
  ::pulse::cdm::bind::ElectricalCompartmentLinkData* mutable_electricallink(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ElectricalCompartmentLinkData >*
      mutable_electricallink();
  private:
  const ::pulse::cdm::bind::ElectricalCompartmentLinkData& _internal_electricallink(int index) const;
  ::pulse::cdm::bind::ElectricalCompartmentLinkData* _internal_add_electricallink();
  public:
  const ::pulse::cdm::bind::ElectricalCompartmentLinkData& electricallink(int index) const;
  ::pulse::cdm::bind::ElectricalCompartmentLinkData* add_electricallink();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ElectricalCompartmentLinkData >&
      electricallink() const;

  // repeated .pulse.cdm.bind.LiquidCompartmentData LiquidCompartment = 3;
  int liquidcompartment_size() const;
  private:
  int _internal_liquidcompartment_size() const;
  public:
  void clear_liquidcompartment();
  ::pulse::cdm::bind::LiquidCompartmentData* mutable_liquidcompartment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidCompartmentData >*
      mutable_liquidcompartment();
  private:
  const ::pulse::cdm::bind::LiquidCompartmentData& _internal_liquidcompartment(int index) const;
  ::pulse::cdm::bind::LiquidCompartmentData* _internal_add_liquidcompartment();
  public:
  const ::pulse::cdm::bind::LiquidCompartmentData& liquidcompartment(int index) const;
  ::pulse::cdm::bind::LiquidCompartmentData* add_liquidcompartment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidCompartmentData >&
      liquidcompartment() const;

  // repeated .pulse.cdm.bind.LiquidCompartmentLinkData LiquidLink = 4;
  int liquidlink_size() const;
  private:
  int _internal_liquidlink_size() const;
  public:
  void clear_liquidlink();
  ::pulse::cdm::bind::LiquidCompartmentLinkData* mutable_liquidlink(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidCompartmentLinkData >*
      mutable_liquidlink();
  private:
  const ::pulse::cdm::bind::LiquidCompartmentLinkData& _internal_liquidlink(int index) const;
  ::pulse::cdm::bind::LiquidCompartmentLinkData* _internal_add_liquidlink();
  public:
  const ::pulse::cdm::bind::LiquidCompartmentLinkData& liquidlink(int index) const;
  ::pulse::cdm::bind::LiquidCompartmentLinkData* add_liquidlink();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidCompartmentLinkData >&
      liquidlink() const;

  // repeated string LiquidSubstance = 5;
  int liquidsubstance_size() const;
  private:
  int _internal_liquidsubstance_size() const;
  public:
  void clear_liquidsubstance();
  const std::string& liquidsubstance(int index) const;
  std::string* mutable_liquidsubstance(int index);
  void set_liquidsubstance(int index, const std::string& value);
  void set_liquidsubstance(int index, std::string&& value);
  void set_liquidsubstance(int index, const char* value);
  void set_liquidsubstance(int index, const char* value, size_t size);
  std::string* add_liquidsubstance();
  void add_liquidsubstance(const std::string& value);
  void add_liquidsubstance(std::string&& value);
  void add_liquidsubstance(const char* value);
  void add_liquidsubstance(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& liquidsubstance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_liquidsubstance();
  private:
  const std::string& _internal_liquidsubstance(int index) const;
  std::string* _internal_add_liquidsubstance();
  public:

  // repeated .pulse.cdm.bind.LiquidCompartmentGraphData LiquidGraph = 6;
  int liquidgraph_size() const;
  private:
  int _internal_liquidgraph_size() const;
  public:
  void clear_liquidgraph();
  ::pulse::cdm::bind::LiquidCompartmentGraphData* mutable_liquidgraph(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidCompartmentGraphData >*
      mutable_liquidgraph();
  private:
  const ::pulse::cdm::bind::LiquidCompartmentGraphData& _internal_liquidgraph(int index) const;
  ::pulse::cdm::bind::LiquidCompartmentGraphData* _internal_add_liquidgraph();
  public:
  const ::pulse::cdm::bind::LiquidCompartmentGraphData& liquidgraph(int index) const;
  ::pulse::cdm::bind::LiquidCompartmentGraphData* add_liquidgraph();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidCompartmentGraphData >&
      liquidgraph() const;

  // repeated .pulse.cdm.bind.GasCompartmentData GasCompartment = 7;
  int gascompartment_size() const;
  private:
  int _internal_gascompartment_size() const;
  public:
  void clear_gascompartment();
  ::pulse::cdm::bind::GasCompartmentData* mutable_gascompartment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasCompartmentData >*
      mutable_gascompartment();
  private:
  const ::pulse::cdm::bind::GasCompartmentData& _internal_gascompartment(int index) const;
  ::pulse::cdm::bind::GasCompartmentData* _internal_add_gascompartment();
  public:
  const ::pulse::cdm::bind::GasCompartmentData& gascompartment(int index) const;
  ::pulse::cdm::bind::GasCompartmentData* add_gascompartment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasCompartmentData >&
      gascompartment() const;

  // repeated .pulse.cdm.bind.GasCompartmentLinkData GasLink = 8;
  int gaslink_size() const;
  private:
  int _internal_gaslink_size() const;
  public:
  void clear_gaslink();
  ::pulse::cdm::bind::GasCompartmentLinkData* mutable_gaslink(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasCompartmentLinkData >*
      mutable_gaslink();
  private:
  const ::pulse::cdm::bind::GasCompartmentLinkData& _internal_gaslink(int index) const;
  ::pulse::cdm::bind::GasCompartmentLinkData* _internal_add_gaslink();
  public:
  const ::pulse::cdm::bind::GasCompartmentLinkData& gaslink(int index) const;
  ::pulse::cdm::bind::GasCompartmentLinkData* add_gaslink();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasCompartmentLinkData >&
      gaslink() const;

  // repeated string GasSubstance = 9;
  int gassubstance_size() const;
  private:
  int _internal_gassubstance_size() const;
  public:
  void clear_gassubstance();
  const std::string& gassubstance(int index) const;
  std::string* mutable_gassubstance(int index);
  void set_gassubstance(int index, const std::string& value);
  void set_gassubstance(int index, std::string&& value);
  void set_gassubstance(int index, const char* value);
  void set_gassubstance(int index, const char* value, size_t size);
  std::string* add_gassubstance();
  void add_gassubstance(const std::string& value);
  void add_gassubstance(std::string&& value);
  void add_gassubstance(const char* value);
  void add_gassubstance(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& gassubstance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_gassubstance();
  private:
  const std::string& _internal_gassubstance(int index) const;
  std::string* _internal_add_gassubstance();
  public:

  // repeated .pulse.cdm.bind.GasCompartmentGraphData GasGraph = 10;
  int gasgraph_size() const;
  private:
  int _internal_gasgraph_size() const;
  public:
  void clear_gasgraph();
  ::pulse::cdm::bind::GasCompartmentGraphData* mutable_gasgraph(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasCompartmentGraphData >*
      mutable_gasgraph();
  private:
  const ::pulse::cdm::bind::GasCompartmentGraphData& _internal_gasgraph(int index) const;
  ::pulse::cdm::bind::GasCompartmentGraphData* _internal_add_gasgraph();
  public:
  const ::pulse::cdm::bind::GasCompartmentGraphData& gasgraph(int index) const;
  ::pulse::cdm::bind::GasCompartmentGraphData* add_gasgraph();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasCompartmentGraphData >&
      gasgraph() const;

  // repeated .pulse.cdm.bind.ThermalCompartmentData ThermalCompartment = 11;
  int thermalcompartment_size() const;
  private:
  int _internal_thermalcompartment_size() const;
  public:
  void clear_thermalcompartment();
  ::pulse::cdm::bind::ThermalCompartmentData* mutable_thermalcompartment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ThermalCompartmentData >*
      mutable_thermalcompartment();
  private:
  const ::pulse::cdm::bind::ThermalCompartmentData& _internal_thermalcompartment(int index) const;
  ::pulse::cdm::bind::ThermalCompartmentData* _internal_add_thermalcompartment();
  public:
  const ::pulse::cdm::bind::ThermalCompartmentData& thermalcompartment(int index) const;
  ::pulse::cdm::bind::ThermalCompartmentData* add_thermalcompartment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ThermalCompartmentData >&
      thermalcompartment() const;

  // repeated .pulse.cdm.bind.ThermalCompartmentLinkData ThermalLink = 12;
  int thermallink_size() const;
  private:
  int _internal_thermallink_size() const;
  public:
  void clear_thermallink();
  ::pulse::cdm::bind::ThermalCompartmentLinkData* mutable_thermallink(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ThermalCompartmentLinkData >*
      mutable_thermallink();
  private:
  const ::pulse::cdm::bind::ThermalCompartmentLinkData& _internal_thermallink(int index) const;
  ::pulse::cdm::bind::ThermalCompartmentLinkData* _internal_add_thermallink();
  public:
  const ::pulse::cdm::bind::ThermalCompartmentLinkData& thermallink(int index) const;
  ::pulse::cdm::bind::ThermalCompartmentLinkData* add_thermallink();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ThermalCompartmentLinkData >&
      thermallink() const;

  // repeated .pulse.cdm.bind.TissueCompartmentData TissueCompartment = 13;
  int tissuecompartment_size() const;
  private:
  int _internal_tissuecompartment_size() const;
  public:
  void clear_tissuecompartment();
  ::pulse::cdm::bind::TissueCompartmentData* mutable_tissuecompartment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TissueCompartmentData >*
      mutable_tissuecompartment();
  private:
  const ::pulse::cdm::bind::TissueCompartmentData& _internal_tissuecompartment(int index) const;
  ::pulse::cdm::bind::TissueCompartmentData* _internal_add_tissuecompartment();
  public:
  const ::pulse::cdm::bind::TissueCompartmentData& tissuecompartment(int index) const;
  ::pulse::cdm::bind::TissueCompartmentData* add_tissuecompartment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TissueCompartmentData >&
      tissuecompartment() const;

  // repeated string TissueSubstance = 14;
  int tissuesubstance_size() const;
  private:
  int _internal_tissuesubstance_size() const;
  public:
  void clear_tissuesubstance();
  const std::string& tissuesubstance(int index) const;
  std::string* mutable_tissuesubstance(int index);
  void set_tissuesubstance(int index, const std::string& value);
  void set_tissuesubstance(int index, std::string&& value);
  void set_tissuesubstance(int index, const char* value);
  void set_tissuesubstance(int index, const char* value, size_t size);
  std::string* add_tissuesubstance();
  void add_tissuesubstance(const std::string& value);
  void add_tissuesubstance(std::string&& value);
  void add_tissuesubstance(const char* value);
  void add_tissuesubstance(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tissuesubstance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tissuesubstance();
  private:
  const std::string& _internal_tissuesubstance(int index) const;
  std::string* _internal_add_tissuesubstance();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.CompartmentManagerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ElectricalCompartmentData > electricalcompartment_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ElectricalCompartmentLinkData > electricallink_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidCompartmentData > liquidcompartment_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidCompartmentLinkData > liquidlink_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> liquidsubstance_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidCompartmentGraphData > liquidgraph_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasCompartmentData > gascompartment_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasCompartmentLinkData > gaslink_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> gassubstance_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasCompartmentGraphData > gasgraph_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ThermalCompartmentData > thermalcompartment_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ThermalCompartmentLinkData > thermallink_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TissueCompartmentData > tissuecompartment_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tissuesubstance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fCompartment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CompartmentData

// string Name = 1;
inline void CompartmentData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CompartmentData::name() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentData.Name)
  return _internal_name();
}
inline void CompartmentData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.CompartmentData.Name)
}
inline std::string* CompartmentData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentData.Name)
  return _internal_mutable_name();
}
inline const std::string& CompartmentData::_internal_name() const {
  return name_.Get();
}
inline void CompartmentData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompartmentData::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.CompartmentData.Name)
}
inline void CompartmentData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.CompartmentData.Name)
}
inline void CompartmentData::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.CompartmentData.Name)
}
inline std::string* CompartmentData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompartmentData::release_name() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CompartmentData.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompartmentData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CompartmentData.Name)
}

// repeated string Node = 2;
inline int CompartmentData::_internal_node_size() const {
  return node_.size();
}
inline int CompartmentData::node_size() const {
  return _internal_node_size();
}
inline void CompartmentData::clear_node() {
  node_.Clear();
}
inline std::string* CompartmentData::add_node() {
  // @@protoc_insertion_point(field_add_mutable:pulse.cdm.bind.CompartmentData.Node)
  return _internal_add_node();
}
inline const std::string& CompartmentData::_internal_node(int index) const {
  return node_.Get(index);
}
inline const std::string& CompartmentData::node(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentData.Node)
  return _internal_node(index);
}
inline std::string* CompartmentData::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentData.Node)
  return node_.Mutable(index);
}
inline void CompartmentData::set_node(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.CompartmentData.Node)
  node_.Mutable(index)->assign(value);
}
inline void CompartmentData::set_node(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.CompartmentData.Node)
  node_.Mutable(index)->assign(std::move(value));
}
inline void CompartmentData::set_node(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  node_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.CompartmentData.Node)
}
inline void CompartmentData::set_node(int index, const char* value, size_t size) {
  node_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.CompartmentData.Node)
}
inline std::string* CompartmentData::_internal_add_node() {
  return node_.Add();
}
inline void CompartmentData::add_node(const std::string& value) {
  node_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentData.Node)
}
inline void CompartmentData::add_node(std::string&& value) {
  node_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentData.Node)
}
inline void CompartmentData::add_node(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  node_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pulse.cdm.bind.CompartmentData.Node)
}
inline void CompartmentData::add_node(const char* value, size_t size) {
  node_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pulse.cdm.bind.CompartmentData.Node)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CompartmentData::node() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.CompartmentData.Node)
  return node_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CompartmentData::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.CompartmentData.Node)
  return &node_;
}

// repeated string Child = 3;
inline int CompartmentData::_internal_child_size() const {
  return child_.size();
}
inline int CompartmentData::child_size() const {
  return _internal_child_size();
}
inline void CompartmentData::clear_child() {
  child_.Clear();
}
inline std::string* CompartmentData::add_child() {
  // @@protoc_insertion_point(field_add_mutable:pulse.cdm.bind.CompartmentData.Child)
  return _internal_add_child();
}
inline const std::string& CompartmentData::_internal_child(int index) const {
  return child_.Get(index);
}
inline const std::string& CompartmentData::child(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentData.Child)
  return _internal_child(index);
}
inline std::string* CompartmentData::mutable_child(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentData.Child)
  return child_.Mutable(index);
}
inline void CompartmentData::set_child(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.CompartmentData.Child)
  child_.Mutable(index)->assign(value);
}
inline void CompartmentData::set_child(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.CompartmentData.Child)
  child_.Mutable(index)->assign(std::move(value));
}
inline void CompartmentData::set_child(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  child_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.CompartmentData.Child)
}
inline void CompartmentData::set_child(int index, const char* value, size_t size) {
  child_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.CompartmentData.Child)
}
inline std::string* CompartmentData::_internal_add_child() {
  return child_.Add();
}
inline void CompartmentData::add_child(const std::string& value) {
  child_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentData.Child)
}
inline void CompartmentData::add_child(std::string&& value) {
  child_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentData.Child)
}
inline void CompartmentData::add_child(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  child_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pulse.cdm.bind.CompartmentData.Child)
}
inline void CompartmentData::add_child(const char* value, size_t size) {
  child_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pulse.cdm.bind.CompartmentData.Child)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CompartmentData::child() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.CompartmentData.Child)
  return child_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CompartmentData::mutable_child() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.CompartmentData.Child)
  return &child_;
}

// -------------------------------------------------------------------

// CompartmentLinkData

// string Name = 1;
inline void CompartmentLinkData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CompartmentLinkData::name() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentLinkData.Name)
  return _internal_name();
}
inline void CompartmentLinkData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.CompartmentLinkData.Name)
}
inline std::string* CompartmentLinkData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentLinkData.Name)
  return _internal_mutable_name();
}
inline const std::string& CompartmentLinkData::_internal_name() const {
  return name_.Get();
}
inline void CompartmentLinkData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompartmentLinkData::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.CompartmentLinkData.Name)
}
inline void CompartmentLinkData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.CompartmentLinkData.Name)
}
inline void CompartmentLinkData::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.CompartmentLinkData.Name)
}
inline std::string* CompartmentLinkData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompartmentLinkData::release_name() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CompartmentLinkData.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompartmentLinkData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CompartmentLinkData.Name)
}

// string Path = 2;
inline void CompartmentLinkData::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& CompartmentLinkData::path() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentLinkData.Path)
  return _internal_path();
}
inline void CompartmentLinkData::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.CompartmentLinkData.Path)
}
inline std::string* CompartmentLinkData::mutable_path() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentLinkData.Path)
  return _internal_mutable_path();
}
inline const std::string& CompartmentLinkData::_internal_path() const {
  return path_.Get();
}
inline void CompartmentLinkData::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompartmentLinkData::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.CompartmentLinkData.Path)
}
inline void CompartmentLinkData::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.CompartmentLinkData.Path)
}
inline void CompartmentLinkData::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.CompartmentLinkData.Path)
}
inline std::string* CompartmentLinkData::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompartmentLinkData::release_path() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CompartmentLinkData.Path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompartmentLinkData::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CompartmentLinkData.Path)
}

// string SourceCompartment = 3;
inline void CompartmentLinkData::clear_sourcecompartment() {
  sourcecompartment_.ClearToEmpty();
}
inline const std::string& CompartmentLinkData::sourcecompartment() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentLinkData.SourceCompartment)
  return _internal_sourcecompartment();
}
inline void CompartmentLinkData::set_sourcecompartment(const std::string& value) {
  _internal_set_sourcecompartment(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.CompartmentLinkData.SourceCompartment)
}
inline std::string* CompartmentLinkData::mutable_sourcecompartment() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentLinkData.SourceCompartment)
  return _internal_mutable_sourcecompartment();
}
inline const std::string& CompartmentLinkData::_internal_sourcecompartment() const {
  return sourcecompartment_.Get();
}
inline void CompartmentLinkData::_internal_set_sourcecompartment(const std::string& value) {
  
  sourcecompartment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompartmentLinkData::set_sourcecompartment(std::string&& value) {
  
  sourcecompartment_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.CompartmentLinkData.SourceCompartment)
}
inline void CompartmentLinkData::set_sourcecompartment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sourcecompartment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.CompartmentLinkData.SourceCompartment)
}
inline void CompartmentLinkData::set_sourcecompartment(const char* value,
    size_t size) {
  
  sourcecompartment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.CompartmentLinkData.SourceCompartment)
}
inline std::string* CompartmentLinkData::_internal_mutable_sourcecompartment() {
  
  return sourcecompartment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompartmentLinkData::release_sourcecompartment() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CompartmentLinkData.SourceCompartment)
  return sourcecompartment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompartmentLinkData::set_allocated_sourcecompartment(std::string* sourcecompartment) {
  if (sourcecompartment != nullptr) {
    
  } else {
    
  }
  sourcecompartment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourcecompartment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CompartmentLinkData.SourceCompartment)
}

// string TargetCompartment = 4;
inline void CompartmentLinkData::clear_targetcompartment() {
  targetcompartment_.ClearToEmpty();
}
inline const std::string& CompartmentLinkData::targetcompartment() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentLinkData.TargetCompartment)
  return _internal_targetcompartment();
}
inline void CompartmentLinkData::set_targetcompartment(const std::string& value) {
  _internal_set_targetcompartment(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.CompartmentLinkData.TargetCompartment)
}
inline std::string* CompartmentLinkData::mutable_targetcompartment() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentLinkData.TargetCompartment)
  return _internal_mutable_targetcompartment();
}
inline const std::string& CompartmentLinkData::_internal_targetcompartment() const {
  return targetcompartment_.Get();
}
inline void CompartmentLinkData::_internal_set_targetcompartment(const std::string& value) {
  
  targetcompartment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompartmentLinkData::set_targetcompartment(std::string&& value) {
  
  targetcompartment_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.CompartmentLinkData.TargetCompartment)
}
inline void CompartmentLinkData::set_targetcompartment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  targetcompartment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.CompartmentLinkData.TargetCompartment)
}
inline void CompartmentLinkData::set_targetcompartment(const char* value,
    size_t size) {
  
  targetcompartment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.CompartmentLinkData.TargetCompartment)
}
inline std::string* CompartmentLinkData::_internal_mutable_targetcompartment() {
  
  return targetcompartment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompartmentLinkData::release_targetcompartment() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CompartmentLinkData.TargetCompartment)
  return targetcompartment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompartmentLinkData::set_allocated_targetcompartment(std::string* targetcompartment) {
  if (targetcompartment != nullptr) {
    
  } else {
    
  }
  targetcompartment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetcompartment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CompartmentLinkData.TargetCompartment)
}

// -------------------------------------------------------------------

// CompartmentGraphData

// string Name = 1;
inline void CompartmentGraphData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CompartmentGraphData::name() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentGraphData.Name)
  return _internal_name();
}
inline void CompartmentGraphData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.CompartmentGraphData.Name)
}
inline std::string* CompartmentGraphData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentGraphData.Name)
  return _internal_mutable_name();
}
inline const std::string& CompartmentGraphData::_internal_name() const {
  return name_.Get();
}
inline void CompartmentGraphData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompartmentGraphData::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.CompartmentGraphData.Name)
}
inline void CompartmentGraphData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.CompartmentGraphData.Name)
}
inline void CompartmentGraphData::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.CompartmentGraphData.Name)
}
inline std::string* CompartmentGraphData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompartmentGraphData::release_name() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CompartmentGraphData.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompartmentGraphData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CompartmentGraphData.Name)
}

// repeated string Compartment = 2;
inline int CompartmentGraphData::_internal_compartment_size() const {
  return compartment_.size();
}
inline int CompartmentGraphData::compartment_size() const {
  return _internal_compartment_size();
}
inline void CompartmentGraphData::clear_compartment() {
  compartment_.Clear();
}
inline std::string* CompartmentGraphData::add_compartment() {
  // @@protoc_insertion_point(field_add_mutable:pulse.cdm.bind.CompartmentGraphData.Compartment)
  return _internal_add_compartment();
}
inline const std::string& CompartmentGraphData::_internal_compartment(int index) const {
  return compartment_.Get(index);
}
inline const std::string& CompartmentGraphData::compartment(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentGraphData.Compartment)
  return _internal_compartment(index);
}
inline std::string* CompartmentGraphData::mutable_compartment(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentGraphData.Compartment)
  return compartment_.Mutable(index);
}
inline void CompartmentGraphData::set_compartment(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.CompartmentGraphData.Compartment)
  compartment_.Mutable(index)->assign(value);
}
inline void CompartmentGraphData::set_compartment(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.CompartmentGraphData.Compartment)
  compartment_.Mutable(index)->assign(std::move(value));
}
inline void CompartmentGraphData::set_compartment(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  compartment_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.CompartmentGraphData.Compartment)
}
inline void CompartmentGraphData::set_compartment(int index, const char* value, size_t size) {
  compartment_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.CompartmentGraphData.Compartment)
}
inline std::string* CompartmentGraphData::_internal_add_compartment() {
  return compartment_.Add();
}
inline void CompartmentGraphData::add_compartment(const std::string& value) {
  compartment_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentGraphData.Compartment)
}
inline void CompartmentGraphData::add_compartment(std::string&& value) {
  compartment_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentGraphData.Compartment)
}
inline void CompartmentGraphData::add_compartment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  compartment_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pulse.cdm.bind.CompartmentGraphData.Compartment)
}
inline void CompartmentGraphData::add_compartment(const char* value, size_t size) {
  compartment_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pulse.cdm.bind.CompartmentGraphData.Compartment)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CompartmentGraphData::compartment() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.CompartmentGraphData.Compartment)
  return compartment_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CompartmentGraphData::mutable_compartment() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.CompartmentGraphData.Compartment)
  return &compartment_;
}

// repeated string Link = 3;
inline int CompartmentGraphData::_internal_link_size() const {
  return link_.size();
}
inline int CompartmentGraphData::link_size() const {
  return _internal_link_size();
}
inline void CompartmentGraphData::clear_link() {
  link_.Clear();
}
inline std::string* CompartmentGraphData::add_link() {
  // @@protoc_insertion_point(field_add_mutable:pulse.cdm.bind.CompartmentGraphData.Link)
  return _internal_add_link();
}
inline const std::string& CompartmentGraphData::_internal_link(int index) const {
  return link_.Get(index);
}
inline const std::string& CompartmentGraphData::link(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentGraphData.Link)
  return _internal_link(index);
}
inline std::string* CompartmentGraphData::mutable_link(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentGraphData.Link)
  return link_.Mutable(index);
}
inline void CompartmentGraphData::set_link(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.CompartmentGraphData.Link)
  link_.Mutable(index)->assign(value);
}
inline void CompartmentGraphData::set_link(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.CompartmentGraphData.Link)
  link_.Mutable(index)->assign(std::move(value));
}
inline void CompartmentGraphData::set_link(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  link_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.CompartmentGraphData.Link)
}
inline void CompartmentGraphData::set_link(int index, const char* value, size_t size) {
  link_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.CompartmentGraphData.Link)
}
inline std::string* CompartmentGraphData::_internal_add_link() {
  return link_.Add();
}
inline void CompartmentGraphData::add_link(const std::string& value) {
  link_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentGraphData.Link)
}
inline void CompartmentGraphData::add_link(std::string&& value) {
  link_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentGraphData.Link)
}
inline void CompartmentGraphData::add_link(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  link_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pulse.cdm.bind.CompartmentGraphData.Link)
}
inline void CompartmentGraphData::add_link(const char* value, size_t size) {
  link_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pulse.cdm.bind.CompartmentGraphData.Link)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CompartmentGraphData::link() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.CompartmentGraphData.Link)
  return link_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CompartmentGraphData::mutable_link() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.CompartmentGraphData.Link)
  return &link_;
}

// -------------------------------------------------------------------

// FluidCompartmentData

// .pulse.cdm.bind.CompartmentData Compartment = 1;
inline bool FluidCompartmentData::_internal_has_compartment() const {
  return this != internal_default_instance() && compartment_ != nullptr;
}
inline bool FluidCompartmentData::has_compartment() const {
  return _internal_has_compartment();
}
inline void FluidCompartmentData::clear_compartment() {
  if (GetArena() == nullptr && compartment_ != nullptr) {
    delete compartment_;
  }
  compartment_ = nullptr;
}
inline const ::pulse::cdm::bind::CompartmentData& FluidCompartmentData::_internal_compartment() const {
  const ::pulse::cdm::bind::CompartmentData* p = compartment_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::CompartmentData&>(
      ::pulse::cdm::bind::_CompartmentData_default_instance_);
}
inline const ::pulse::cdm::bind::CompartmentData& FluidCompartmentData::compartment() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.FluidCompartmentData.Compartment)
  return _internal_compartment();
}
inline void FluidCompartmentData::unsafe_arena_set_allocated_compartment(
    ::pulse::cdm::bind::CompartmentData* compartment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compartment_);
  }
  compartment_ = compartment;
  if (compartment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.FluidCompartmentData.Compartment)
}
inline ::pulse::cdm::bind::CompartmentData* FluidCompartmentData::release_compartment() {
  
  ::pulse::cdm::bind::CompartmentData* temp = compartment_;
  compartment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::CompartmentData* FluidCompartmentData::unsafe_arena_release_compartment() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.FluidCompartmentData.Compartment)
  
  ::pulse::cdm::bind::CompartmentData* temp = compartment_;
  compartment_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::CompartmentData* FluidCompartmentData::_internal_mutable_compartment() {
  
  if (compartment_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::CompartmentData>(GetArena());
    compartment_ = p;
  }
  return compartment_;
}
inline ::pulse::cdm::bind::CompartmentData* FluidCompartmentData::mutable_compartment() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.FluidCompartmentData.Compartment)
  return _internal_mutable_compartment();
}
inline void FluidCompartmentData::set_allocated_compartment(::pulse::cdm::bind::CompartmentData* compartment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete compartment_;
  }
  if (compartment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(compartment);
    if (message_arena != submessage_arena) {
      compartment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compartment, submessage_arena);
    }
    
  } else {
    
  }
  compartment_ = compartment;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.FluidCompartmentData.Compartment)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData InFlow = 2;
inline bool FluidCompartmentData::_internal_has_inflow() const {
  return this != internal_default_instance() && inflow_ != nullptr;
}
inline bool FluidCompartmentData::has_inflow() const {
  return _internal_has_inflow();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& FluidCompartmentData::_internal_inflow() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = inflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& FluidCompartmentData::inflow() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.FluidCompartmentData.InFlow)
  return _internal_inflow();
}
inline void FluidCompartmentData::unsafe_arena_set_allocated_inflow(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* inflow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inflow_);
  }
  inflow_ = inflow;
  if (inflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.FluidCompartmentData.InFlow)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* FluidCompartmentData::release_inflow() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = inflow_;
  inflow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* FluidCompartmentData::unsafe_arena_release_inflow() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.FluidCompartmentData.InFlow)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = inflow_;
  inflow_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* FluidCompartmentData::_internal_mutable_inflow() {
  
  if (inflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    inflow_ = p;
  }
  return inflow_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* FluidCompartmentData::mutable_inflow() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.FluidCompartmentData.InFlow)
  return _internal_mutable_inflow();
}
inline void FluidCompartmentData::set_allocated_inflow(::pulse::cdm::bind::ScalarVolumePerTimeData* inflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inflow_);
  }
  if (inflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inflow)->GetArena();
    if (message_arena != submessage_arena) {
      inflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inflow, submessage_arena);
    }
    
  } else {
    
  }
  inflow_ = inflow;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.FluidCompartmentData.InFlow)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData OutFlow = 3;
inline bool FluidCompartmentData::_internal_has_outflow() const {
  return this != internal_default_instance() && outflow_ != nullptr;
}
inline bool FluidCompartmentData::has_outflow() const {
  return _internal_has_outflow();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& FluidCompartmentData::_internal_outflow() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = outflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& FluidCompartmentData::outflow() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.FluidCompartmentData.OutFlow)
  return _internal_outflow();
}
inline void FluidCompartmentData::unsafe_arena_set_allocated_outflow(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* outflow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outflow_);
  }
  outflow_ = outflow;
  if (outflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.FluidCompartmentData.OutFlow)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* FluidCompartmentData::release_outflow() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = outflow_;
  outflow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* FluidCompartmentData::unsafe_arena_release_outflow() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.FluidCompartmentData.OutFlow)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = outflow_;
  outflow_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* FluidCompartmentData::_internal_mutable_outflow() {
  
  if (outflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    outflow_ = p;
  }
  return outflow_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* FluidCompartmentData::mutable_outflow() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.FluidCompartmentData.OutFlow)
  return _internal_mutable_outflow();
}
inline void FluidCompartmentData::set_allocated_outflow(::pulse::cdm::bind::ScalarVolumePerTimeData* outflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(outflow_);
  }
  if (outflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outflow)->GetArena();
    if (message_arena != submessage_arena) {
      outflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outflow, submessage_arena);
    }
    
  } else {
    
  }
  outflow_ = outflow;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.FluidCompartmentData.OutFlow)
}

// .pulse.cdm.bind.ScalarPressureData Pressure = 4;
inline bool FluidCompartmentData::_internal_has_pressure() const {
  return this != internal_default_instance() && pressure_ != nullptr;
}
inline bool FluidCompartmentData::has_pressure() const {
  return _internal_has_pressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& FluidCompartmentData::_internal_pressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = pressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& FluidCompartmentData::pressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.FluidCompartmentData.Pressure)
  return _internal_pressure();
}
inline void FluidCompartmentData::unsafe_arena_set_allocated_pressure(
    ::pulse::cdm::bind::ScalarPressureData* pressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pressure_);
  }
  pressure_ = pressure;
  if (pressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.FluidCompartmentData.Pressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* FluidCompartmentData::release_pressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pressure_;
  pressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* FluidCompartmentData::unsafe_arena_release_pressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.FluidCompartmentData.Pressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pressure_;
  pressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* FluidCompartmentData::_internal_mutable_pressure() {
  
  if (pressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    pressure_ = p;
  }
  return pressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* FluidCompartmentData::mutable_pressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.FluidCompartmentData.Pressure)
  return _internal_mutable_pressure();
}
inline void FluidCompartmentData::set_allocated_pressure(::pulse::cdm::bind::ScalarPressureData* pressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pressure_);
  }
  if (pressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pressure)->GetArena();
    if (message_arena != submessage_arena) {
      pressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pressure, submessage_arena);
    }
    
  } else {
    
  }
  pressure_ = pressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.FluidCompartmentData.Pressure)
}

// .pulse.cdm.bind.ScalarVolumeData Volume = 5;
inline bool FluidCompartmentData::_internal_has_volume() const {
  return this != internal_default_instance() && volume_ != nullptr;
}
inline bool FluidCompartmentData::has_volume() const {
  return _internal_has_volume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& FluidCompartmentData::_internal_volume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = volume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& FluidCompartmentData::volume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.FluidCompartmentData.Volume)
  return _internal_volume();
}
inline void FluidCompartmentData::unsafe_arena_set_allocated_volume(
    ::pulse::cdm::bind::ScalarVolumeData* volume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_);
  }
  volume_ = volume;
  if (volume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.FluidCompartmentData.Volume)
}
inline ::pulse::cdm::bind::ScalarVolumeData* FluidCompartmentData::release_volume() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = volume_;
  volume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* FluidCompartmentData::unsafe_arena_release_volume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.FluidCompartmentData.Volume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = volume_;
  volume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* FluidCompartmentData::_internal_mutable_volume() {
  
  if (volume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    volume_ = p;
  }
  return volume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* FluidCompartmentData::mutable_volume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.FluidCompartmentData.Volume)
  return _internal_mutable_volume();
}
inline void FluidCompartmentData::set_allocated_volume(::pulse::cdm::bind::ScalarVolumeData* volume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_);
  }
  if (volume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume)->GetArena();
    if (message_arena != submessage_arena) {
      volume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volume, submessage_arena);
    }
    
  } else {
    
  }
  volume_ = volume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.FluidCompartmentData.Volume)
}

// -------------------------------------------------------------------

// FluidCompartmentLinkData

// .pulse.cdm.bind.CompartmentLinkData Link = 1;
inline bool FluidCompartmentLinkData::_internal_has_link() const {
  return this != internal_default_instance() && link_ != nullptr;
}
inline bool FluidCompartmentLinkData::has_link() const {
  return _internal_has_link();
}
inline void FluidCompartmentLinkData::clear_link() {
  if (GetArena() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
}
inline const ::pulse::cdm::bind::CompartmentLinkData& FluidCompartmentLinkData::_internal_link() const {
  const ::pulse::cdm::bind::CompartmentLinkData* p = link_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::CompartmentLinkData&>(
      ::pulse::cdm::bind::_CompartmentLinkData_default_instance_);
}
inline const ::pulse::cdm::bind::CompartmentLinkData& FluidCompartmentLinkData::link() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.FluidCompartmentLinkData.Link)
  return _internal_link();
}
inline void FluidCompartmentLinkData::unsafe_arena_set_allocated_link(
    ::pulse::cdm::bind::CompartmentLinkData* link) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(link_);
  }
  link_ = link;
  if (link) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.FluidCompartmentLinkData.Link)
}
inline ::pulse::cdm::bind::CompartmentLinkData* FluidCompartmentLinkData::release_link() {
  
  ::pulse::cdm::bind::CompartmentLinkData* temp = link_;
  link_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::CompartmentLinkData* FluidCompartmentLinkData::unsafe_arena_release_link() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.FluidCompartmentLinkData.Link)
  
  ::pulse::cdm::bind::CompartmentLinkData* temp = link_;
  link_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::CompartmentLinkData* FluidCompartmentLinkData::_internal_mutable_link() {
  
  if (link_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::CompartmentLinkData>(GetArena());
    link_ = p;
  }
  return link_;
}
inline ::pulse::cdm::bind::CompartmentLinkData* FluidCompartmentLinkData::mutable_link() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.FluidCompartmentLinkData.Link)
  return _internal_mutable_link();
}
inline void FluidCompartmentLinkData::set_allocated_link(::pulse::cdm::bind::CompartmentLinkData* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete link_;
  }
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(link);
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    
  } else {
    
  }
  link_ = link;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.FluidCompartmentLinkData.Link)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData Flow = 2;
inline bool FluidCompartmentLinkData::_internal_has_flow() const {
  return this != internal_default_instance() && flow_ != nullptr;
}
inline bool FluidCompartmentLinkData::has_flow() const {
  return _internal_has_flow();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& FluidCompartmentLinkData::_internal_flow() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = flow_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& FluidCompartmentLinkData::flow() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.FluidCompartmentLinkData.Flow)
  return _internal_flow();
}
inline void FluidCompartmentLinkData::unsafe_arena_set_allocated_flow(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* flow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_);
  }
  flow_ = flow;
  if (flow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.FluidCompartmentLinkData.Flow)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* FluidCompartmentLinkData::release_flow() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = flow_;
  flow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* FluidCompartmentLinkData::unsafe_arena_release_flow() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.FluidCompartmentLinkData.Flow)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = flow_;
  flow_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* FluidCompartmentLinkData::_internal_mutable_flow() {
  
  if (flow_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    flow_ = p;
  }
  return flow_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* FluidCompartmentLinkData::mutable_flow() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.FluidCompartmentLinkData.Flow)
  return _internal_mutable_flow();
}
inline void FluidCompartmentLinkData::set_allocated_flow(::pulse::cdm::bind::ScalarVolumePerTimeData* flow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_);
  }
  if (flow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow)->GetArena();
    if (message_arena != submessage_arena) {
      flow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flow, submessage_arena);
    }
    
  } else {
    
  }
  flow_ = flow;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.FluidCompartmentLinkData.Flow)
}

// -------------------------------------------------------------------

// FluidCompartmentGraphData

// .pulse.cdm.bind.CompartmentGraphData Graph = 1;
inline bool FluidCompartmentGraphData::_internal_has_graph() const {
  return this != internal_default_instance() && graph_ != nullptr;
}
inline bool FluidCompartmentGraphData::has_graph() const {
  return _internal_has_graph();
}
inline void FluidCompartmentGraphData::clear_graph() {
  if (GetArena() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
}
inline const ::pulse::cdm::bind::CompartmentGraphData& FluidCompartmentGraphData::_internal_graph() const {
  const ::pulse::cdm::bind::CompartmentGraphData* p = graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::CompartmentGraphData&>(
      ::pulse::cdm::bind::_CompartmentGraphData_default_instance_);
}
inline const ::pulse::cdm::bind::CompartmentGraphData& FluidCompartmentGraphData::graph() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.FluidCompartmentGraphData.Graph)
  return _internal_graph();
}
inline void FluidCompartmentGraphData::unsafe_arena_set_allocated_graph(
    ::pulse::cdm::bind::CompartmentGraphData* graph) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.FluidCompartmentGraphData.Graph)
}
inline ::pulse::cdm::bind::CompartmentGraphData* FluidCompartmentGraphData::release_graph() {
  
  ::pulse::cdm::bind::CompartmentGraphData* temp = graph_;
  graph_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::CompartmentGraphData* FluidCompartmentGraphData::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.FluidCompartmentGraphData.Graph)
  
  ::pulse::cdm::bind::CompartmentGraphData* temp = graph_;
  graph_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::CompartmentGraphData* FluidCompartmentGraphData::_internal_mutable_graph() {
  
  if (graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::CompartmentGraphData>(GetArena());
    graph_ = p;
  }
  return graph_;
}
inline ::pulse::cdm::bind::CompartmentGraphData* FluidCompartmentGraphData::mutable_graph() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.FluidCompartmentGraphData.Graph)
  return _internal_mutable_graph();
}
inline void FluidCompartmentGraphData::set_allocated_graph(::pulse::cdm::bind::CompartmentGraphData* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete graph_;
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(graph);
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.FluidCompartmentGraphData.Graph)
}

// -------------------------------------------------------------------

// GasCompartmentData

// .pulse.cdm.bind.FluidCompartmentData FluidCompartment = 1;
inline bool GasCompartmentData::_internal_has_fluidcompartment() const {
  return this != internal_default_instance() && fluidcompartment_ != nullptr;
}
inline bool GasCompartmentData::has_fluidcompartment() const {
  return _internal_has_fluidcompartment();
}
inline void GasCompartmentData::clear_fluidcompartment() {
  if (GetArena() == nullptr && fluidcompartment_ != nullptr) {
    delete fluidcompartment_;
  }
  fluidcompartment_ = nullptr;
}
inline const ::pulse::cdm::bind::FluidCompartmentData& GasCompartmentData::_internal_fluidcompartment() const {
  const ::pulse::cdm::bind::FluidCompartmentData* p = fluidcompartment_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::FluidCompartmentData&>(
      ::pulse::cdm::bind::_FluidCompartmentData_default_instance_);
}
inline const ::pulse::cdm::bind::FluidCompartmentData& GasCompartmentData::fluidcompartment() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.GasCompartmentData.FluidCompartment)
  return _internal_fluidcompartment();
}
inline void GasCompartmentData::unsafe_arena_set_allocated_fluidcompartment(
    ::pulse::cdm::bind::FluidCompartmentData* fluidcompartment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fluidcompartment_);
  }
  fluidcompartment_ = fluidcompartment;
  if (fluidcompartment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.GasCompartmentData.FluidCompartment)
}
inline ::pulse::cdm::bind::FluidCompartmentData* GasCompartmentData::release_fluidcompartment() {
  
  ::pulse::cdm::bind::FluidCompartmentData* temp = fluidcompartment_;
  fluidcompartment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::FluidCompartmentData* GasCompartmentData::unsafe_arena_release_fluidcompartment() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.GasCompartmentData.FluidCompartment)
  
  ::pulse::cdm::bind::FluidCompartmentData* temp = fluidcompartment_;
  fluidcompartment_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::FluidCompartmentData* GasCompartmentData::_internal_mutable_fluidcompartment() {
  
  if (fluidcompartment_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::FluidCompartmentData>(GetArena());
    fluidcompartment_ = p;
  }
  return fluidcompartment_;
}
inline ::pulse::cdm::bind::FluidCompartmentData* GasCompartmentData::mutable_fluidcompartment() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.GasCompartmentData.FluidCompartment)
  return _internal_mutable_fluidcompartment();
}
inline void GasCompartmentData::set_allocated_fluidcompartment(::pulse::cdm::bind::FluidCompartmentData* fluidcompartment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fluidcompartment_;
  }
  if (fluidcompartment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fluidcompartment);
    if (message_arena != submessage_arena) {
      fluidcompartment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fluidcompartment, submessage_arena);
    }
    
  } else {
    
  }
  fluidcompartment_ = fluidcompartment;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.GasCompartmentData.FluidCompartment)
}

// repeated .pulse.cdm.bind.GasSubstanceQuantityData SubstanceQuantity = 2;
inline int GasCompartmentData::_internal_substancequantity_size() const {
  return substancequantity_.size();
}
inline int GasCompartmentData::substancequantity_size() const {
  return _internal_substancequantity_size();
}
inline ::pulse::cdm::bind::GasSubstanceQuantityData* GasCompartmentData::mutable_substancequantity(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.GasCompartmentData.SubstanceQuantity)
  return substancequantity_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasSubstanceQuantityData >*
GasCompartmentData::mutable_substancequantity() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.GasCompartmentData.SubstanceQuantity)
  return &substancequantity_;
}
inline const ::pulse::cdm::bind::GasSubstanceQuantityData& GasCompartmentData::_internal_substancequantity(int index) const {
  return substancequantity_.Get(index);
}
inline const ::pulse::cdm::bind::GasSubstanceQuantityData& GasCompartmentData::substancequantity(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.GasCompartmentData.SubstanceQuantity)
  return _internal_substancequantity(index);
}
inline ::pulse::cdm::bind::GasSubstanceQuantityData* GasCompartmentData::_internal_add_substancequantity() {
  return substancequantity_.Add();
}
inline ::pulse::cdm::bind::GasSubstanceQuantityData* GasCompartmentData::add_substancequantity() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.GasCompartmentData.SubstanceQuantity)
  return _internal_add_substancequantity();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasSubstanceQuantityData >&
GasCompartmentData::substancequantity() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.GasCompartmentData.SubstanceQuantity)
  return substancequantity_;
}

// -------------------------------------------------------------------

// GasCompartmentLinkData

// .pulse.cdm.bind.FluidCompartmentLinkData FluidLink = 1;
inline bool GasCompartmentLinkData::_internal_has_fluidlink() const {
  return this != internal_default_instance() && fluidlink_ != nullptr;
}
inline bool GasCompartmentLinkData::has_fluidlink() const {
  return _internal_has_fluidlink();
}
inline void GasCompartmentLinkData::clear_fluidlink() {
  if (GetArena() == nullptr && fluidlink_ != nullptr) {
    delete fluidlink_;
  }
  fluidlink_ = nullptr;
}
inline const ::pulse::cdm::bind::FluidCompartmentLinkData& GasCompartmentLinkData::_internal_fluidlink() const {
  const ::pulse::cdm::bind::FluidCompartmentLinkData* p = fluidlink_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::FluidCompartmentLinkData&>(
      ::pulse::cdm::bind::_FluidCompartmentLinkData_default_instance_);
}
inline const ::pulse::cdm::bind::FluidCompartmentLinkData& GasCompartmentLinkData::fluidlink() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.GasCompartmentLinkData.FluidLink)
  return _internal_fluidlink();
}
inline void GasCompartmentLinkData::unsafe_arena_set_allocated_fluidlink(
    ::pulse::cdm::bind::FluidCompartmentLinkData* fluidlink) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fluidlink_);
  }
  fluidlink_ = fluidlink;
  if (fluidlink) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.GasCompartmentLinkData.FluidLink)
}
inline ::pulse::cdm::bind::FluidCompartmentLinkData* GasCompartmentLinkData::release_fluidlink() {
  
  ::pulse::cdm::bind::FluidCompartmentLinkData* temp = fluidlink_;
  fluidlink_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::FluidCompartmentLinkData* GasCompartmentLinkData::unsafe_arena_release_fluidlink() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.GasCompartmentLinkData.FluidLink)
  
  ::pulse::cdm::bind::FluidCompartmentLinkData* temp = fluidlink_;
  fluidlink_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::FluidCompartmentLinkData* GasCompartmentLinkData::_internal_mutable_fluidlink() {
  
  if (fluidlink_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::FluidCompartmentLinkData>(GetArena());
    fluidlink_ = p;
  }
  return fluidlink_;
}
inline ::pulse::cdm::bind::FluidCompartmentLinkData* GasCompartmentLinkData::mutable_fluidlink() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.GasCompartmentLinkData.FluidLink)
  return _internal_mutable_fluidlink();
}
inline void GasCompartmentLinkData::set_allocated_fluidlink(::pulse::cdm::bind::FluidCompartmentLinkData* fluidlink) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fluidlink_;
  }
  if (fluidlink) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fluidlink);
    if (message_arena != submessage_arena) {
      fluidlink = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fluidlink, submessage_arena);
    }
    
  } else {
    
  }
  fluidlink_ = fluidlink;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.GasCompartmentLinkData.FluidLink)
}

// -------------------------------------------------------------------

// GasCompartmentGraphData

// .pulse.cdm.bind.FluidCompartmentGraphData FluidGraph = 1;
inline bool GasCompartmentGraphData::_internal_has_fluidgraph() const {
  return this != internal_default_instance() && fluidgraph_ != nullptr;
}
inline bool GasCompartmentGraphData::has_fluidgraph() const {
  return _internal_has_fluidgraph();
}
inline void GasCompartmentGraphData::clear_fluidgraph() {
  if (GetArena() == nullptr && fluidgraph_ != nullptr) {
    delete fluidgraph_;
  }
  fluidgraph_ = nullptr;
}
inline const ::pulse::cdm::bind::FluidCompartmentGraphData& GasCompartmentGraphData::_internal_fluidgraph() const {
  const ::pulse::cdm::bind::FluidCompartmentGraphData* p = fluidgraph_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::FluidCompartmentGraphData&>(
      ::pulse::cdm::bind::_FluidCompartmentGraphData_default_instance_);
}
inline const ::pulse::cdm::bind::FluidCompartmentGraphData& GasCompartmentGraphData::fluidgraph() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.GasCompartmentGraphData.FluidGraph)
  return _internal_fluidgraph();
}
inline void GasCompartmentGraphData::unsafe_arena_set_allocated_fluidgraph(
    ::pulse::cdm::bind::FluidCompartmentGraphData* fluidgraph) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fluidgraph_);
  }
  fluidgraph_ = fluidgraph;
  if (fluidgraph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.GasCompartmentGraphData.FluidGraph)
}
inline ::pulse::cdm::bind::FluidCompartmentGraphData* GasCompartmentGraphData::release_fluidgraph() {
  
  ::pulse::cdm::bind::FluidCompartmentGraphData* temp = fluidgraph_;
  fluidgraph_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::FluidCompartmentGraphData* GasCompartmentGraphData::unsafe_arena_release_fluidgraph() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.GasCompartmentGraphData.FluidGraph)
  
  ::pulse::cdm::bind::FluidCompartmentGraphData* temp = fluidgraph_;
  fluidgraph_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::FluidCompartmentGraphData* GasCompartmentGraphData::_internal_mutable_fluidgraph() {
  
  if (fluidgraph_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::FluidCompartmentGraphData>(GetArena());
    fluidgraph_ = p;
  }
  return fluidgraph_;
}
inline ::pulse::cdm::bind::FluidCompartmentGraphData* GasCompartmentGraphData::mutable_fluidgraph() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.GasCompartmentGraphData.FluidGraph)
  return _internal_mutable_fluidgraph();
}
inline void GasCompartmentGraphData::set_allocated_fluidgraph(::pulse::cdm::bind::FluidCompartmentGraphData* fluidgraph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fluidgraph_;
  }
  if (fluidgraph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fluidgraph);
    if (message_arena != submessage_arena) {
      fluidgraph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fluidgraph, submessage_arena);
    }
    
  } else {
    
  }
  fluidgraph_ = fluidgraph;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.GasCompartmentGraphData.FluidGraph)
}

// -------------------------------------------------------------------

// LiquidCompartmentData

// .pulse.cdm.bind.FluidCompartmentData FluidCompartment = 1;
inline bool LiquidCompartmentData::_internal_has_fluidcompartment() const {
  return this != internal_default_instance() && fluidcompartment_ != nullptr;
}
inline bool LiquidCompartmentData::has_fluidcompartment() const {
  return _internal_has_fluidcompartment();
}
inline void LiquidCompartmentData::clear_fluidcompartment() {
  if (GetArena() == nullptr && fluidcompartment_ != nullptr) {
    delete fluidcompartment_;
  }
  fluidcompartment_ = nullptr;
}
inline const ::pulse::cdm::bind::FluidCompartmentData& LiquidCompartmentData::_internal_fluidcompartment() const {
  const ::pulse::cdm::bind::FluidCompartmentData* p = fluidcompartment_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::FluidCompartmentData&>(
      ::pulse::cdm::bind::_FluidCompartmentData_default_instance_);
}
inline const ::pulse::cdm::bind::FluidCompartmentData& LiquidCompartmentData::fluidcompartment() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LiquidCompartmentData.FluidCompartment)
  return _internal_fluidcompartment();
}
inline void LiquidCompartmentData::unsafe_arena_set_allocated_fluidcompartment(
    ::pulse::cdm::bind::FluidCompartmentData* fluidcompartment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fluidcompartment_);
  }
  fluidcompartment_ = fluidcompartment;
  if (fluidcompartment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.LiquidCompartmentData.FluidCompartment)
}
inline ::pulse::cdm::bind::FluidCompartmentData* LiquidCompartmentData::release_fluidcompartment() {
  
  ::pulse::cdm::bind::FluidCompartmentData* temp = fluidcompartment_;
  fluidcompartment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::FluidCompartmentData* LiquidCompartmentData::unsafe_arena_release_fluidcompartment() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LiquidCompartmentData.FluidCompartment)
  
  ::pulse::cdm::bind::FluidCompartmentData* temp = fluidcompartment_;
  fluidcompartment_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::FluidCompartmentData* LiquidCompartmentData::_internal_mutable_fluidcompartment() {
  
  if (fluidcompartment_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::FluidCompartmentData>(GetArena());
    fluidcompartment_ = p;
  }
  return fluidcompartment_;
}
inline ::pulse::cdm::bind::FluidCompartmentData* LiquidCompartmentData::mutable_fluidcompartment() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LiquidCompartmentData.FluidCompartment)
  return _internal_mutable_fluidcompartment();
}
inline void LiquidCompartmentData::set_allocated_fluidcompartment(::pulse::cdm::bind::FluidCompartmentData* fluidcompartment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fluidcompartment_;
  }
  if (fluidcompartment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fluidcompartment);
    if (message_arena != submessage_arena) {
      fluidcompartment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fluidcompartment, submessage_arena);
    }
    
  } else {
    
  }
  fluidcompartment_ = fluidcompartment;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LiquidCompartmentData.FluidCompartment)
}

// .pulse.cdm.bind.ScalarData pH = 2;
inline bool LiquidCompartmentData::_internal_has_ph() const {
  return this != internal_default_instance() && ph_ != nullptr;
}
inline bool LiquidCompartmentData::has_ph() const {
  return _internal_has_ph();
}
inline const ::pulse::cdm::bind::ScalarData& LiquidCompartmentData::_internal_ph() const {
  const ::pulse::cdm::bind::ScalarData* p = ph_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& LiquidCompartmentData::ph() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LiquidCompartmentData.pH)
  return _internal_ph();
}
inline void LiquidCompartmentData::unsafe_arena_set_allocated_ph(
    ::pulse::cdm::bind::ScalarData* ph) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ph_);
  }
  ph_ = ph;
  if (ph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.LiquidCompartmentData.pH)
}
inline ::pulse::cdm::bind::ScalarData* LiquidCompartmentData::release_ph() {
  
  ::pulse::cdm::bind::ScalarData* temp = ph_;
  ph_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* LiquidCompartmentData::unsafe_arena_release_ph() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LiquidCompartmentData.pH)
  
  ::pulse::cdm::bind::ScalarData* temp = ph_;
  ph_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* LiquidCompartmentData::_internal_mutable_ph() {
  
  if (ph_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    ph_ = p;
  }
  return ph_;
}
inline ::pulse::cdm::bind::ScalarData* LiquidCompartmentData::mutable_ph() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LiquidCompartmentData.pH)
  return _internal_mutable_ph();
}
inline void LiquidCompartmentData::set_allocated_ph(::pulse::cdm::bind::ScalarData* ph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ph_);
  }
  if (ph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ph)->GetArena();
    if (message_arena != submessage_arena) {
      ph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ph, submessage_arena);
    }
    
  } else {
    
  }
  ph_ = ph;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LiquidCompartmentData.pH)
}

// .pulse.cdm.bind.Scalar0To1Data WaterVolumeFraction = 3;
inline bool LiquidCompartmentData::_internal_has_watervolumefraction() const {
  return this != internal_default_instance() && watervolumefraction_ != nullptr;
}
inline bool LiquidCompartmentData::has_watervolumefraction() const {
  return _internal_has_watervolumefraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& LiquidCompartmentData::_internal_watervolumefraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = watervolumefraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& LiquidCompartmentData::watervolumefraction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LiquidCompartmentData.WaterVolumeFraction)
  return _internal_watervolumefraction();
}
inline void LiquidCompartmentData::unsafe_arena_set_allocated_watervolumefraction(
    ::pulse::cdm::bind::Scalar0To1Data* watervolumefraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(watervolumefraction_);
  }
  watervolumefraction_ = watervolumefraction;
  if (watervolumefraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.LiquidCompartmentData.WaterVolumeFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* LiquidCompartmentData::release_watervolumefraction() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = watervolumefraction_;
  watervolumefraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* LiquidCompartmentData::unsafe_arena_release_watervolumefraction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LiquidCompartmentData.WaterVolumeFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = watervolumefraction_;
  watervolumefraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* LiquidCompartmentData::_internal_mutable_watervolumefraction() {
  
  if (watervolumefraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    watervolumefraction_ = p;
  }
  return watervolumefraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* LiquidCompartmentData::mutable_watervolumefraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LiquidCompartmentData.WaterVolumeFraction)
  return _internal_mutable_watervolumefraction();
}
inline void LiquidCompartmentData::set_allocated_watervolumefraction(::pulse::cdm::bind::Scalar0To1Data* watervolumefraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(watervolumefraction_);
  }
  if (watervolumefraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(watervolumefraction)->GetArena();
    if (message_arena != submessage_arena) {
      watervolumefraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, watervolumefraction, submessage_arena);
    }
    
  } else {
    
  }
  watervolumefraction_ = watervolumefraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LiquidCompartmentData.WaterVolumeFraction)
}

// repeated .pulse.cdm.bind.LiquidSubstanceQuantityData SubstanceQuantity = 4;
inline int LiquidCompartmentData::_internal_substancequantity_size() const {
  return substancequantity_.size();
}
inline int LiquidCompartmentData::substancequantity_size() const {
  return _internal_substancequantity_size();
}
inline ::pulse::cdm::bind::LiquidSubstanceQuantityData* LiquidCompartmentData::mutable_substancequantity(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LiquidCompartmentData.SubstanceQuantity)
  return substancequantity_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidSubstanceQuantityData >*
LiquidCompartmentData::mutable_substancequantity() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.LiquidCompartmentData.SubstanceQuantity)
  return &substancequantity_;
}
inline const ::pulse::cdm::bind::LiquidSubstanceQuantityData& LiquidCompartmentData::_internal_substancequantity(int index) const {
  return substancequantity_.Get(index);
}
inline const ::pulse::cdm::bind::LiquidSubstanceQuantityData& LiquidCompartmentData::substancequantity(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LiquidCompartmentData.SubstanceQuantity)
  return _internal_substancequantity(index);
}
inline ::pulse::cdm::bind::LiquidSubstanceQuantityData* LiquidCompartmentData::_internal_add_substancequantity() {
  return substancequantity_.Add();
}
inline ::pulse::cdm::bind::LiquidSubstanceQuantityData* LiquidCompartmentData::add_substancequantity() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.LiquidCompartmentData.SubstanceQuantity)
  return _internal_add_substancequantity();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidSubstanceQuantityData >&
LiquidCompartmentData::substancequantity() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.LiquidCompartmentData.SubstanceQuantity)
  return substancequantity_;
}

// -------------------------------------------------------------------

// LiquidCompartmentLinkData

// .pulse.cdm.bind.FluidCompartmentLinkData FluidLink = 1;
inline bool LiquidCompartmentLinkData::_internal_has_fluidlink() const {
  return this != internal_default_instance() && fluidlink_ != nullptr;
}
inline bool LiquidCompartmentLinkData::has_fluidlink() const {
  return _internal_has_fluidlink();
}
inline void LiquidCompartmentLinkData::clear_fluidlink() {
  if (GetArena() == nullptr && fluidlink_ != nullptr) {
    delete fluidlink_;
  }
  fluidlink_ = nullptr;
}
inline const ::pulse::cdm::bind::FluidCompartmentLinkData& LiquidCompartmentLinkData::_internal_fluidlink() const {
  const ::pulse::cdm::bind::FluidCompartmentLinkData* p = fluidlink_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::FluidCompartmentLinkData&>(
      ::pulse::cdm::bind::_FluidCompartmentLinkData_default_instance_);
}
inline const ::pulse::cdm::bind::FluidCompartmentLinkData& LiquidCompartmentLinkData::fluidlink() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LiquidCompartmentLinkData.FluidLink)
  return _internal_fluidlink();
}
inline void LiquidCompartmentLinkData::unsafe_arena_set_allocated_fluidlink(
    ::pulse::cdm::bind::FluidCompartmentLinkData* fluidlink) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fluidlink_);
  }
  fluidlink_ = fluidlink;
  if (fluidlink) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.LiquidCompartmentLinkData.FluidLink)
}
inline ::pulse::cdm::bind::FluidCompartmentLinkData* LiquidCompartmentLinkData::release_fluidlink() {
  
  ::pulse::cdm::bind::FluidCompartmentLinkData* temp = fluidlink_;
  fluidlink_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::FluidCompartmentLinkData* LiquidCompartmentLinkData::unsafe_arena_release_fluidlink() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LiquidCompartmentLinkData.FluidLink)
  
  ::pulse::cdm::bind::FluidCompartmentLinkData* temp = fluidlink_;
  fluidlink_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::FluidCompartmentLinkData* LiquidCompartmentLinkData::_internal_mutable_fluidlink() {
  
  if (fluidlink_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::FluidCompartmentLinkData>(GetArena());
    fluidlink_ = p;
  }
  return fluidlink_;
}
inline ::pulse::cdm::bind::FluidCompartmentLinkData* LiquidCompartmentLinkData::mutable_fluidlink() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LiquidCompartmentLinkData.FluidLink)
  return _internal_mutable_fluidlink();
}
inline void LiquidCompartmentLinkData::set_allocated_fluidlink(::pulse::cdm::bind::FluidCompartmentLinkData* fluidlink) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fluidlink_;
  }
  if (fluidlink) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fluidlink);
    if (message_arena != submessage_arena) {
      fluidlink = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fluidlink, submessage_arena);
    }
    
  } else {
    
  }
  fluidlink_ = fluidlink;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LiquidCompartmentLinkData.FluidLink)
}

// -------------------------------------------------------------------

// LiquidCompartmentGraphData

// .pulse.cdm.bind.FluidCompartmentGraphData FluidGraph = 1;
inline bool LiquidCompartmentGraphData::_internal_has_fluidgraph() const {
  return this != internal_default_instance() && fluidgraph_ != nullptr;
}
inline bool LiquidCompartmentGraphData::has_fluidgraph() const {
  return _internal_has_fluidgraph();
}
inline void LiquidCompartmentGraphData::clear_fluidgraph() {
  if (GetArena() == nullptr && fluidgraph_ != nullptr) {
    delete fluidgraph_;
  }
  fluidgraph_ = nullptr;
}
inline const ::pulse::cdm::bind::FluidCompartmentGraphData& LiquidCompartmentGraphData::_internal_fluidgraph() const {
  const ::pulse::cdm::bind::FluidCompartmentGraphData* p = fluidgraph_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::FluidCompartmentGraphData&>(
      ::pulse::cdm::bind::_FluidCompartmentGraphData_default_instance_);
}
inline const ::pulse::cdm::bind::FluidCompartmentGraphData& LiquidCompartmentGraphData::fluidgraph() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LiquidCompartmentGraphData.FluidGraph)
  return _internal_fluidgraph();
}
inline void LiquidCompartmentGraphData::unsafe_arena_set_allocated_fluidgraph(
    ::pulse::cdm::bind::FluidCompartmentGraphData* fluidgraph) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fluidgraph_);
  }
  fluidgraph_ = fluidgraph;
  if (fluidgraph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.LiquidCompartmentGraphData.FluidGraph)
}
inline ::pulse::cdm::bind::FluidCompartmentGraphData* LiquidCompartmentGraphData::release_fluidgraph() {
  
  ::pulse::cdm::bind::FluidCompartmentGraphData* temp = fluidgraph_;
  fluidgraph_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::FluidCompartmentGraphData* LiquidCompartmentGraphData::unsafe_arena_release_fluidgraph() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LiquidCompartmentGraphData.FluidGraph)
  
  ::pulse::cdm::bind::FluidCompartmentGraphData* temp = fluidgraph_;
  fluidgraph_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::FluidCompartmentGraphData* LiquidCompartmentGraphData::_internal_mutable_fluidgraph() {
  
  if (fluidgraph_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::FluidCompartmentGraphData>(GetArena());
    fluidgraph_ = p;
  }
  return fluidgraph_;
}
inline ::pulse::cdm::bind::FluidCompartmentGraphData* LiquidCompartmentGraphData::mutable_fluidgraph() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LiquidCompartmentGraphData.FluidGraph)
  return _internal_mutable_fluidgraph();
}
inline void LiquidCompartmentGraphData::set_allocated_fluidgraph(::pulse::cdm::bind::FluidCompartmentGraphData* fluidgraph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fluidgraph_;
  }
  if (fluidgraph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fluidgraph);
    if (message_arena != submessage_arena) {
      fluidgraph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fluidgraph, submessage_arena);
    }
    
  } else {
    
  }
  fluidgraph_ = fluidgraph;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LiquidCompartmentGraphData.FluidGraph)
}

// -------------------------------------------------------------------

// TissueCompartmentData

// .pulse.cdm.bind.CompartmentData Compartment = 1;
inline bool TissueCompartmentData::_internal_has_compartment() const {
  return this != internal_default_instance() && compartment_ != nullptr;
}
inline bool TissueCompartmentData::has_compartment() const {
  return _internal_has_compartment();
}
inline void TissueCompartmentData::clear_compartment() {
  if (GetArena() == nullptr && compartment_ != nullptr) {
    delete compartment_;
  }
  compartment_ = nullptr;
}
inline const ::pulse::cdm::bind::CompartmentData& TissueCompartmentData::_internal_compartment() const {
  const ::pulse::cdm::bind::CompartmentData* p = compartment_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::CompartmentData&>(
      ::pulse::cdm::bind::_CompartmentData_default_instance_);
}
inline const ::pulse::cdm::bind::CompartmentData& TissueCompartmentData::compartment() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TissueCompartmentData.Compartment)
  return _internal_compartment();
}
inline void TissueCompartmentData::unsafe_arena_set_allocated_compartment(
    ::pulse::cdm::bind::CompartmentData* compartment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compartment_);
  }
  compartment_ = compartment;
  if (compartment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TissueCompartmentData.Compartment)
}
inline ::pulse::cdm::bind::CompartmentData* TissueCompartmentData::release_compartment() {
  
  ::pulse::cdm::bind::CompartmentData* temp = compartment_;
  compartment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::CompartmentData* TissueCompartmentData::unsafe_arena_release_compartment() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TissueCompartmentData.Compartment)
  
  ::pulse::cdm::bind::CompartmentData* temp = compartment_;
  compartment_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::CompartmentData* TissueCompartmentData::_internal_mutable_compartment() {
  
  if (compartment_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::CompartmentData>(GetArena());
    compartment_ = p;
  }
  return compartment_;
}
inline ::pulse::cdm::bind::CompartmentData* TissueCompartmentData::mutable_compartment() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TissueCompartmentData.Compartment)
  return _internal_mutable_compartment();
}
inline void TissueCompartmentData::set_allocated_compartment(::pulse::cdm::bind::CompartmentData* compartment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete compartment_;
  }
  if (compartment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(compartment);
    if (message_arena != submessage_arena) {
      compartment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compartment, submessage_arena);
    }
    
  } else {
    
  }
  compartment_ = compartment;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TissueCompartmentData.Compartment)
}

// .pulse.cdm.bind.ScalarMassPerMassData AcidicPhospohlipidConcentration = 2;
inline bool TissueCompartmentData::_internal_has_acidicphospohlipidconcentration() const {
  return this != internal_default_instance() && acidicphospohlipidconcentration_ != nullptr;
}
inline bool TissueCompartmentData::has_acidicphospohlipidconcentration() const {
  return _internal_has_acidicphospohlipidconcentration();
}
inline const ::pulse::cdm::bind::ScalarMassPerMassData& TissueCompartmentData::_internal_acidicphospohlipidconcentration() const {
  const ::pulse::cdm::bind::ScalarMassPerMassData* p = acidicphospohlipidconcentration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerMassData&>(
      ::pulse::cdm::bind::_ScalarMassPerMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerMassData& TissueCompartmentData::acidicphospohlipidconcentration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TissueCompartmentData.AcidicPhospohlipidConcentration)
  return _internal_acidicphospohlipidconcentration();
}
inline void TissueCompartmentData::unsafe_arena_set_allocated_acidicphospohlipidconcentration(
    ::pulse::cdm::bind::ScalarMassPerMassData* acidicphospohlipidconcentration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acidicphospohlipidconcentration_);
  }
  acidicphospohlipidconcentration_ = acidicphospohlipidconcentration;
  if (acidicphospohlipidconcentration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TissueCompartmentData.AcidicPhospohlipidConcentration)
}
inline ::pulse::cdm::bind::ScalarMassPerMassData* TissueCompartmentData::release_acidicphospohlipidconcentration() {
  
  ::pulse::cdm::bind::ScalarMassPerMassData* temp = acidicphospohlipidconcentration_;
  acidicphospohlipidconcentration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerMassData* TissueCompartmentData::unsafe_arena_release_acidicphospohlipidconcentration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TissueCompartmentData.AcidicPhospohlipidConcentration)
  
  ::pulse::cdm::bind::ScalarMassPerMassData* temp = acidicphospohlipidconcentration_;
  acidicphospohlipidconcentration_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerMassData* TissueCompartmentData::_internal_mutable_acidicphospohlipidconcentration() {
  
  if (acidicphospohlipidconcentration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerMassData>(GetArena());
    acidicphospohlipidconcentration_ = p;
  }
  return acidicphospohlipidconcentration_;
}
inline ::pulse::cdm::bind::ScalarMassPerMassData* TissueCompartmentData::mutable_acidicphospohlipidconcentration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TissueCompartmentData.AcidicPhospohlipidConcentration)
  return _internal_mutable_acidicphospohlipidconcentration();
}
inline void TissueCompartmentData::set_allocated_acidicphospohlipidconcentration(::pulse::cdm::bind::ScalarMassPerMassData* acidicphospohlipidconcentration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(acidicphospohlipidconcentration_);
  }
  if (acidicphospohlipidconcentration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acidicphospohlipidconcentration)->GetArena();
    if (message_arena != submessage_arena) {
      acidicphospohlipidconcentration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acidicphospohlipidconcentration, submessage_arena);
    }
    
  } else {
    
  }
  acidicphospohlipidconcentration_ = acidicphospohlipidconcentration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TissueCompartmentData.AcidicPhospohlipidConcentration)
}

// .pulse.cdm.bind.ScalarVolumeData MatrixVolume = 3;
inline bool TissueCompartmentData::_internal_has_matrixvolume() const {
  return this != internal_default_instance() && matrixvolume_ != nullptr;
}
inline bool TissueCompartmentData::has_matrixvolume() const {
  return _internal_has_matrixvolume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& TissueCompartmentData::_internal_matrixvolume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = matrixvolume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& TissueCompartmentData::matrixvolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TissueCompartmentData.MatrixVolume)
  return _internal_matrixvolume();
}
inline void TissueCompartmentData::unsafe_arena_set_allocated_matrixvolume(
    ::pulse::cdm::bind::ScalarVolumeData* matrixvolume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(matrixvolume_);
  }
  matrixvolume_ = matrixvolume;
  if (matrixvolume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TissueCompartmentData.MatrixVolume)
}
inline ::pulse::cdm::bind::ScalarVolumeData* TissueCompartmentData::release_matrixvolume() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = matrixvolume_;
  matrixvolume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* TissueCompartmentData::unsafe_arena_release_matrixvolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TissueCompartmentData.MatrixVolume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = matrixvolume_;
  matrixvolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* TissueCompartmentData::_internal_mutable_matrixvolume() {
  
  if (matrixvolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    matrixvolume_ = p;
  }
  return matrixvolume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* TissueCompartmentData::mutable_matrixvolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TissueCompartmentData.MatrixVolume)
  return _internal_mutable_matrixvolume();
}
inline void TissueCompartmentData::set_allocated_matrixvolume(::pulse::cdm::bind::ScalarVolumeData* matrixvolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(matrixvolume_);
  }
  if (matrixvolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(matrixvolume)->GetArena();
    if (message_arena != submessage_arena) {
      matrixvolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matrixvolume, submessage_arena);
    }
    
  } else {
    
  }
  matrixvolume_ = matrixvolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TissueCompartmentData.MatrixVolume)
}

// .pulse.cdm.bind.Scalar0To1Data NeutralLipidsVolumeFraction = 4;
inline bool TissueCompartmentData::_internal_has_neutrallipidsvolumefraction() const {
  return this != internal_default_instance() && neutrallipidsvolumefraction_ != nullptr;
}
inline bool TissueCompartmentData::has_neutrallipidsvolumefraction() const {
  return _internal_has_neutrallipidsvolumefraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& TissueCompartmentData::_internal_neutrallipidsvolumefraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = neutrallipidsvolumefraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& TissueCompartmentData::neutrallipidsvolumefraction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TissueCompartmentData.NeutralLipidsVolumeFraction)
  return _internal_neutrallipidsvolumefraction();
}
inline void TissueCompartmentData::unsafe_arena_set_allocated_neutrallipidsvolumefraction(
    ::pulse::cdm::bind::Scalar0To1Data* neutrallipidsvolumefraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neutrallipidsvolumefraction_);
  }
  neutrallipidsvolumefraction_ = neutrallipidsvolumefraction;
  if (neutrallipidsvolumefraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TissueCompartmentData.NeutralLipidsVolumeFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* TissueCompartmentData::release_neutrallipidsvolumefraction() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = neutrallipidsvolumefraction_;
  neutrallipidsvolumefraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* TissueCompartmentData::unsafe_arena_release_neutrallipidsvolumefraction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TissueCompartmentData.NeutralLipidsVolumeFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = neutrallipidsvolumefraction_;
  neutrallipidsvolumefraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* TissueCompartmentData::_internal_mutable_neutrallipidsvolumefraction() {
  
  if (neutrallipidsvolumefraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    neutrallipidsvolumefraction_ = p;
  }
  return neutrallipidsvolumefraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* TissueCompartmentData::mutable_neutrallipidsvolumefraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TissueCompartmentData.NeutralLipidsVolumeFraction)
  return _internal_mutable_neutrallipidsvolumefraction();
}
inline void TissueCompartmentData::set_allocated_neutrallipidsvolumefraction(::pulse::cdm::bind::Scalar0To1Data* neutrallipidsvolumefraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(neutrallipidsvolumefraction_);
  }
  if (neutrallipidsvolumefraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neutrallipidsvolumefraction)->GetArena();
    if (message_arena != submessage_arena) {
      neutrallipidsvolumefraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neutrallipidsvolumefraction, submessage_arena);
    }
    
  } else {
    
  }
  neutrallipidsvolumefraction_ = neutrallipidsvolumefraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TissueCompartmentData.NeutralLipidsVolumeFraction)
}

// .pulse.cdm.bind.Scalar0To1Data NeutralPhospholipidsVolumeFraction = 5;
inline bool TissueCompartmentData::_internal_has_neutralphospholipidsvolumefraction() const {
  return this != internal_default_instance() && neutralphospholipidsvolumefraction_ != nullptr;
}
inline bool TissueCompartmentData::has_neutralphospholipidsvolumefraction() const {
  return _internal_has_neutralphospholipidsvolumefraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& TissueCompartmentData::_internal_neutralphospholipidsvolumefraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = neutralphospholipidsvolumefraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& TissueCompartmentData::neutralphospholipidsvolumefraction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TissueCompartmentData.NeutralPhospholipidsVolumeFraction)
  return _internal_neutralphospholipidsvolumefraction();
}
inline void TissueCompartmentData::unsafe_arena_set_allocated_neutralphospholipidsvolumefraction(
    ::pulse::cdm::bind::Scalar0To1Data* neutralphospholipidsvolumefraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neutralphospholipidsvolumefraction_);
  }
  neutralphospholipidsvolumefraction_ = neutralphospholipidsvolumefraction;
  if (neutralphospholipidsvolumefraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TissueCompartmentData.NeutralPhospholipidsVolumeFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* TissueCompartmentData::release_neutralphospholipidsvolumefraction() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = neutralphospholipidsvolumefraction_;
  neutralphospholipidsvolumefraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* TissueCompartmentData::unsafe_arena_release_neutralphospholipidsvolumefraction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TissueCompartmentData.NeutralPhospholipidsVolumeFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = neutralphospholipidsvolumefraction_;
  neutralphospholipidsvolumefraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* TissueCompartmentData::_internal_mutable_neutralphospholipidsvolumefraction() {
  
  if (neutralphospholipidsvolumefraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    neutralphospholipidsvolumefraction_ = p;
  }
  return neutralphospholipidsvolumefraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* TissueCompartmentData::mutable_neutralphospholipidsvolumefraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TissueCompartmentData.NeutralPhospholipidsVolumeFraction)
  return _internal_mutable_neutralphospholipidsvolumefraction();
}
inline void TissueCompartmentData::set_allocated_neutralphospholipidsvolumefraction(::pulse::cdm::bind::Scalar0To1Data* neutralphospholipidsvolumefraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(neutralphospholipidsvolumefraction_);
  }
  if (neutralphospholipidsvolumefraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neutralphospholipidsvolumefraction)->GetArena();
    if (message_arena != submessage_arena) {
      neutralphospholipidsvolumefraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neutralphospholipidsvolumefraction, submessage_arena);
    }
    
  } else {
    
  }
  neutralphospholipidsvolumefraction_ = neutralphospholipidsvolumefraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TissueCompartmentData.NeutralPhospholipidsVolumeFraction)
}

// .pulse.cdm.bind.ScalarData TissueToPlasmaAlbuminRatio = 6;
inline bool TissueCompartmentData::_internal_has_tissuetoplasmaalbuminratio() const {
  return this != internal_default_instance() && tissuetoplasmaalbuminratio_ != nullptr;
}
inline bool TissueCompartmentData::has_tissuetoplasmaalbuminratio() const {
  return _internal_has_tissuetoplasmaalbuminratio();
}
inline const ::pulse::cdm::bind::ScalarData& TissueCompartmentData::_internal_tissuetoplasmaalbuminratio() const {
  const ::pulse::cdm::bind::ScalarData* p = tissuetoplasmaalbuminratio_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& TissueCompartmentData::tissuetoplasmaalbuminratio() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TissueCompartmentData.TissueToPlasmaAlbuminRatio)
  return _internal_tissuetoplasmaalbuminratio();
}
inline void TissueCompartmentData::unsafe_arena_set_allocated_tissuetoplasmaalbuminratio(
    ::pulse::cdm::bind::ScalarData* tissuetoplasmaalbuminratio) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tissuetoplasmaalbuminratio_);
  }
  tissuetoplasmaalbuminratio_ = tissuetoplasmaalbuminratio;
  if (tissuetoplasmaalbuminratio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TissueCompartmentData.TissueToPlasmaAlbuminRatio)
}
inline ::pulse::cdm::bind::ScalarData* TissueCompartmentData::release_tissuetoplasmaalbuminratio() {
  
  ::pulse::cdm::bind::ScalarData* temp = tissuetoplasmaalbuminratio_;
  tissuetoplasmaalbuminratio_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* TissueCompartmentData::unsafe_arena_release_tissuetoplasmaalbuminratio() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TissueCompartmentData.TissueToPlasmaAlbuminRatio)
  
  ::pulse::cdm::bind::ScalarData* temp = tissuetoplasmaalbuminratio_;
  tissuetoplasmaalbuminratio_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* TissueCompartmentData::_internal_mutable_tissuetoplasmaalbuminratio() {
  
  if (tissuetoplasmaalbuminratio_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    tissuetoplasmaalbuminratio_ = p;
  }
  return tissuetoplasmaalbuminratio_;
}
inline ::pulse::cdm::bind::ScalarData* TissueCompartmentData::mutable_tissuetoplasmaalbuminratio() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TissueCompartmentData.TissueToPlasmaAlbuminRatio)
  return _internal_mutable_tissuetoplasmaalbuminratio();
}
inline void TissueCompartmentData::set_allocated_tissuetoplasmaalbuminratio(::pulse::cdm::bind::ScalarData* tissuetoplasmaalbuminratio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tissuetoplasmaalbuminratio_);
  }
  if (tissuetoplasmaalbuminratio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tissuetoplasmaalbuminratio)->GetArena();
    if (message_arena != submessage_arena) {
      tissuetoplasmaalbuminratio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tissuetoplasmaalbuminratio, submessage_arena);
    }
    
  } else {
    
  }
  tissuetoplasmaalbuminratio_ = tissuetoplasmaalbuminratio;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TissueCompartmentData.TissueToPlasmaAlbuminRatio)
}

// .pulse.cdm.bind.ScalarData TissueToPlasmaAlphaAcidGlycoproteinRatio = 7;
inline bool TissueCompartmentData::_internal_has_tissuetoplasmaalphaacidglycoproteinratio() const {
  return this != internal_default_instance() && tissuetoplasmaalphaacidglycoproteinratio_ != nullptr;
}
inline bool TissueCompartmentData::has_tissuetoplasmaalphaacidglycoproteinratio() const {
  return _internal_has_tissuetoplasmaalphaacidglycoproteinratio();
}
inline const ::pulse::cdm::bind::ScalarData& TissueCompartmentData::_internal_tissuetoplasmaalphaacidglycoproteinratio() const {
  const ::pulse::cdm::bind::ScalarData* p = tissuetoplasmaalphaacidglycoproteinratio_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& TissueCompartmentData::tissuetoplasmaalphaacidglycoproteinratio() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TissueCompartmentData.TissueToPlasmaAlphaAcidGlycoproteinRatio)
  return _internal_tissuetoplasmaalphaacidglycoproteinratio();
}
inline void TissueCompartmentData::unsafe_arena_set_allocated_tissuetoplasmaalphaacidglycoproteinratio(
    ::pulse::cdm::bind::ScalarData* tissuetoplasmaalphaacidglycoproteinratio) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tissuetoplasmaalphaacidglycoproteinratio_);
  }
  tissuetoplasmaalphaacidglycoproteinratio_ = tissuetoplasmaalphaacidglycoproteinratio;
  if (tissuetoplasmaalphaacidglycoproteinratio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TissueCompartmentData.TissueToPlasmaAlphaAcidGlycoproteinRatio)
}
inline ::pulse::cdm::bind::ScalarData* TissueCompartmentData::release_tissuetoplasmaalphaacidglycoproteinratio() {
  
  ::pulse::cdm::bind::ScalarData* temp = tissuetoplasmaalphaacidglycoproteinratio_;
  tissuetoplasmaalphaacidglycoproteinratio_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* TissueCompartmentData::unsafe_arena_release_tissuetoplasmaalphaacidglycoproteinratio() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TissueCompartmentData.TissueToPlasmaAlphaAcidGlycoproteinRatio)
  
  ::pulse::cdm::bind::ScalarData* temp = tissuetoplasmaalphaacidglycoproteinratio_;
  tissuetoplasmaalphaacidglycoproteinratio_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* TissueCompartmentData::_internal_mutable_tissuetoplasmaalphaacidglycoproteinratio() {
  
  if (tissuetoplasmaalphaacidglycoproteinratio_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    tissuetoplasmaalphaacidglycoproteinratio_ = p;
  }
  return tissuetoplasmaalphaacidglycoproteinratio_;
}
inline ::pulse::cdm::bind::ScalarData* TissueCompartmentData::mutable_tissuetoplasmaalphaacidglycoproteinratio() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TissueCompartmentData.TissueToPlasmaAlphaAcidGlycoproteinRatio)
  return _internal_mutable_tissuetoplasmaalphaacidglycoproteinratio();
}
inline void TissueCompartmentData::set_allocated_tissuetoplasmaalphaacidglycoproteinratio(::pulse::cdm::bind::ScalarData* tissuetoplasmaalphaacidglycoproteinratio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tissuetoplasmaalphaacidglycoproteinratio_);
  }
  if (tissuetoplasmaalphaacidglycoproteinratio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tissuetoplasmaalphaacidglycoproteinratio)->GetArena();
    if (message_arena != submessage_arena) {
      tissuetoplasmaalphaacidglycoproteinratio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tissuetoplasmaalphaacidglycoproteinratio, submessage_arena);
    }
    
  } else {
    
  }
  tissuetoplasmaalphaacidglycoproteinratio_ = tissuetoplasmaalphaacidglycoproteinratio;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TissueCompartmentData.TissueToPlasmaAlphaAcidGlycoproteinRatio)
}

// .pulse.cdm.bind.ScalarData TissueToPlasmaLipoproteinRatio = 8;
inline bool TissueCompartmentData::_internal_has_tissuetoplasmalipoproteinratio() const {
  return this != internal_default_instance() && tissuetoplasmalipoproteinratio_ != nullptr;
}
inline bool TissueCompartmentData::has_tissuetoplasmalipoproteinratio() const {
  return _internal_has_tissuetoplasmalipoproteinratio();
}
inline const ::pulse::cdm::bind::ScalarData& TissueCompartmentData::_internal_tissuetoplasmalipoproteinratio() const {
  const ::pulse::cdm::bind::ScalarData* p = tissuetoplasmalipoproteinratio_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& TissueCompartmentData::tissuetoplasmalipoproteinratio() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TissueCompartmentData.TissueToPlasmaLipoproteinRatio)
  return _internal_tissuetoplasmalipoproteinratio();
}
inline void TissueCompartmentData::unsafe_arena_set_allocated_tissuetoplasmalipoproteinratio(
    ::pulse::cdm::bind::ScalarData* tissuetoplasmalipoproteinratio) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tissuetoplasmalipoproteinratio_);
  }
  tissuetoplasmalipoproteinratio_ = tissuetoplasmalipoproteinratio;
  if (tissuetoplasmalipoproteinratio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TissueCompartmentData.TissueToPlasmaLipoproteinRatio)
}
inline ::pulse::cdm::bind::ScalarData* TissueCompartmentData::release_tissuetoplasmalipoproteinratio() {
  
  ::pulse::cdm::bind::ScalarData* temp = tissuetoplasmalipoproteinratio_;
  tissuetoplasmalipoproteinratio_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* TissueCompartmentData::unsafe_arena_release_tissuetoplasmalipoproteinratio() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TissueCompartmentData.TissueToPlasmaLipoproteinRatio)
  
  ::pulse::cdm::bind::ScalarData* temp = tissuetoplasmalipoproteinratio_;
  tissuetoplasmalipoproteinratio_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* TissueCompartmentData::_internal_mutable_tissuetoplasmalipoproteinratio() {
  
  if (tissuetoplasmalipoproteinratio_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    tissuetoplasmalipoproteinratio_ = p;
  }
  return tissuetoplasmalipoproteinratio_;
}
inline ::pulse::cdm::bind::ScalarData* TissueCompartmentData::mutable_tissuetoplasmalipoproteinratio() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TissueCompartmentData.TissueToPlasmaLipoproteinRatio)
  return _internal_mutable_tissuetoplasmalipoproteinratio();
}
inline void TissueCompartmentData::set_allocated_tissuetoplasmalipoproteinratio(::pulse::cdm::bind::ScalarData* tissuetoplasmalipoproteinratio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tissuetoplasmalipoproteinratio_);
  }
  if (tissuetoplasmalipoproteinratio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tissuetoplasmalipoproteinratio)->GetArena();
    if (message_arena != submessage_arena) {
      tissuetoplasmalipoproteinratio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tissuetoplasmalipoproteinratio, submessage_arena);
    }
    
  } else {
    
  }
  tissuetoplasmalipoproteinratio_ = tissuetoplasmalipoproteinratio;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TissueCompartmentData.TissueToPlasmaLipoproteinRatio)
}

// .pulse.cdm.bind.ScalarMassData TotalMass = 9;
inline bool TissueCompartmentData::_internal_has_totalmass() const {
  return this != internal_default_instance() && totalmass_ != nullptr;
}
inline bool TissueCompartmentData::has_totalmass() const {
  return _internal_has_totalmass();
}
inline const ::pulse::cdm::bind::ScalarMassData& TissueCompartmentData::_internal_totalmass() const {
  const ::pulse::cdm::bind::ScalarMassData* p = totalmass_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassData&>(
      ::pulse::cdm::bind::_ScalarMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassData& TissueCompartmentData::totalmass() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TissueCompartmentData.TotalMass)
  return _internal_totalmass();
}
inline void TissueCompartmentData::unsafe_arena_set_allocated_totalmass(
    ::pulse::cdm::bind::ScalarMassData* totalmass) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalmass_);
  }
  totalmass_ = totalmass;
  if (totalmass) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TissueCompartmentData.TotalMass)
}
inline ::pulse::cdm::bind::ScalarMassData* TissueCompartmentData::release_totalmass() {
  
  ::pulse::cdm::bind::ScalarMassData* temp = totalmass_;
  totalmass_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* TissueCompartmentData::unsafe_arena_release_totalmass() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TissueCompartmentData.TotalMass)
  
  ::pulse::cdm::bind::ScalarMassData* temp = totalmass_;
  totalmass_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* TissueCompartmentData::_internal_mutable_totalmass() {
  
  if (totalmass_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassData>(GetArena());
    totalmass_ = p;
  }
  return totalmass_;
}
inline ::pulse::cdm::bind::ScalarMassData* TissueCompartmentData::mutable_totalmass() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TissueCompartmentData.TotalMass)
  return _internal_mutable_totalmass();
}
inline void TissueCompartmentData::set_allocated_totalmass(::pulse::cdm::bind::ScalarMassData* totalmass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalmass_);
  }
  if (totalmass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalmass)->GetArena();
    if (message_arena != submessage_arena) {
      totalmass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totalmass, submessage_arena);
    }
    
  } else {
    
  }
  totalmass_ = totalmass;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TissueCompartmentData.TotalMass)
}

// -------------------------------------------------------------------

// ThermalCompartmentData

// .pulse.cdm.bind.CompartmentData Compartment = 1;
inline bool ThermalCompartmentData::_internal_has_compartment() const {
  return this != internal_default_instance() && compartment_ != nullptr;
}
inline bool ThermalCompartmentData::has_compartment() const {
  return _internal_has_compartment();
}
inline void ThermalCompartmentData::clear_compartment() {
  if (GetArena() == nullptr && compartment_ != nullptr) {
    delete compartment_;
  }
  compartment_ = nullptr;
}
inline const ::pulse::cdm::bind::CompartmentData& ThermalCompartmentData::_internal_compartment() const {
  const ::pulse::cdm::bind::CompartmentData* p = compartment_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::CompartmentData&>(
      ::pulse::cdm::bind::_CompartmentData_default_instance_);
}
inline const ::pulse::cdm::bind::CompartmentData& ThermalCompartmentData::compartment() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ThermalCompartmentData.Compartment)
  return _internal_compartment();
}
inline void ThermalCompartmentData::unsafe_arena_set_allocated_compartment(
    ::pulse::cdm::bind::CompartmentData* compartment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compartment_);
  }
  compartment_ = compartment;
  if (compartment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ThermalCompartmentData.Compartment)
}
inline ::pulse::cdm::bind::CompartmentData* ThermalCompartmentData::release_compartment() {
  
  ::pulse::cdm::bind::CompartmentData* temp = compartment_;
  compartment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::CompartmentData* ThermalCompartmentData::unsafe_arena_release_compartment() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ThermalCompartmentData.Compartment)
  
  ::pulse::cdm::bind::CompartmentData* temp = compartment_;
  compartment_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::CompartmentData* ThermalCompartmentData::_internal_mutable_compartment() {
  
  if (compartment_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::CompartmentData>(GetArena());
    compartment_ = p;
  }
  return compartment_;
}
inline ::pulse::cdm::bind::CompartmentData* ThermalCompartmentData::mutable_compartment() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ThermalCompartmentData.Compartment)
  return _internal_mutable_compartment();
}
inline void ThermalCompartmentData::set_allocated_compartment(::pulse::cdm::bind::CompartmentData* compartment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete compartment_;
  }
  if (compartment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(compartment);
    if (message_arena != submessage_arena) {
      compartment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compartment, submessage_arena);
    }
    
  } else {
    
  }
  compartment_ = compartment;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ThermalCompartmentData.Compartment)
}

// .pulse.cdm.bind.ScalarPowerData HeatTransferRateIn = 2;
inline bool ThermalCompartmentData::_internal_has_heattransferratein() const {
  return this != internal_default_instance() && heattransferratein_ != nullptr;
}
inline bool ThermalCompartmentData::has_heattransferratein() const {
  return _internal_has_heattransferratein();
}
inline const ::pulse::cdm::bind::ScalarPowerData& ThermalCompartmentData::_internal_heattransferratein() const {
  const ::pulse::cdm::bind::ScalarPowerData* p = heattransferratein_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPowerData&>(
      ::pulse::cdm::bind::_ScalarPowerData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPowerData& ThermalCompartmentData::heattransferratein() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ThermalCompartmentData.HeatTransferRateIn)
  return _internal_heattransferratein();
}
inline void ThermalCompartmentData::unsafe_arena_set_allocated_heattransferratein(
    ::pulse::cdm::bind::ScalarPowerData* heattransferratein) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heattransferratein_);
  }
  heattransferratein_ = heattransferratein;
  if (heattransferratein) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ThermalCompartmentData.HeatTransferRateIn)
}
inline ::pulse::cdm::bind::ScalarPowerData* ThermalCompartmentData::release_heattransferratein() {
  
  ::pulse::cdm::bind::ScalarPowerData* temp = heattransferratein_;
  heattransferratein_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* ThermalCompartmentData::unsafe_arena_release_heattransferratein() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ThermalCompartmentData.HeatTransferRateIn)
  
  ::pulse::cdm::bind::ScalarPowerData* temp = heattransferratein_;
  heattransferratein_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* ThermalCompartmentData::_internal_mutable_heattransferratein() {
  
  if (heattransferratein_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPowerData>(GetArena());
    heattransferratein_ = p;
  }
  return heattransferratein_;
}
inline ::pulse::cdm::bind::ScalarPowerData* ThermalCompartmentData::mutable_heattransferratein() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ThermalCompartmentData.HeatTransferRateIn)
  return _internal_mutable_heattransferratein();
}
inline void ThermalCompartmentData::set_allocated_heattransferratein(::pulse::cdm::bind::ScalarPowerData* heattransferratein) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heattransferratein_);
  }
  if (heattransferratein) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heattransferratein)->GetArena();
    if (message_arena != submessage_arena) {
      heattransferratein = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heattransferratein, submessage_arena);
    }
    
  } else {
    
  }
  heattransferratein_ = heattransferratein;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ThermalCompartmentData.HeatTransferRateIn)
}

// .pulse.cdm.bind.ScalarPowerData HeatTransferRateOut = 3;
inline bool ThermalCompartmentData::_internal_has_heattransferrateout() const {
  return this != internal_default_instance() && heattransferrateout_ != nullptr;
}
inline bool ThermalCompartmentData::has_heattransferrateout() const {
  return _internal_has_heattransferrateout();
}
inline const ::pulse::cdm::bind::ScalarPowerData& ThermalCompartmentData::_internal_heattransferrateout() const {
  const ::pulse::cdm::bind::ScalarPowerData* p = heattransferrateout_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPowerData&>(
      ::pulse::cdm::bind::_ScalarPowerData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPowerData& ThermalCompartmentData::heattransferrateout() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ThermalCompartmentData.HeatTransferRateOut)
  return _internal_heattransferrateout();
}
inline void ThermalCompartmentData::unsafe_arena_set_allocated_heattransferrateout(
    ::pulse::cdm::bind::ScalarPowerData* heattransferrateout) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heattransferrateout_);
  }
  heattransferrateout_ = heattransferrateout;
  if (heattransferrateout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ThermalCompartmentData.HeatTransferRateOut)
}
inline ::pulse::cdm::bind::ScalarPowerData* ThermalCompartmentData::release_heattransferrateout() {
  
  ::pulse::cdm::bind::ScalarPowerData* temp = heattransferrateout_;
  heattransferrateout_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* ThermalCompartmentData::unsafe_arena_release_heattransferrateout() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ThermalCompartmentData.HeatTransferRateOut)
  
  ::pulse::cdm::bind::ScalarPowerData* temp = heattransferrateout_;
  heattransferrateout_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* ThermalCompartmentData::_internal_mutable_heattransferrateout() {
  
  if (heattransferrateout_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPowerData>(GetArena());
    heattransferrateout_ = p;
  }
  return heattransferrateout_;
}
inline ::pulse::cdm::bind::ScalarPowerData* ThermalCompartmentData::mutable_heattransferrateout() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ThermalCompartmentData.HeatTransferRateOut)
  return _internal_mutable_heattransferrateout();
}
inline void ThermalCompartmentData::set_allocated_heattransferrateout(::pulse::cdm::bind::ScalarPowerData* heattransferrateout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heattransferrateout_);
  }
  if (heattransferrateout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heattransferrateout)->GetArena();
    if (message_arena != submessage_arena) {
      heattransferrateout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heattransferrateout, submessage_arena);
    }
    
  } else {
    
  }
  heattransferrateout_ = heattransferrateout;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ThermalCompartmentData.HeatTransferRateOut)
}

// .pulse.cdm.bind.ScalarTemperatureData Temperature = 4;
inline bool ThermalCompartmentData::_internal_has_temperature() const {
  return this != internal_default_instance() && temperature_ != nullptr;
}
inline bool ThermalCompartmentData::has_temperature() const {
  return _internal_has_temperature();
}
inline const ::pulse::cdm::bind::ScalarTemperatureData& ThermalCompartmentData::_internal_temperature() const {
  const ::pulse::cdm::bind::ScalarTemperatureData* p = temperature_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTemperatureData&>(
      ::pulse::cdm::bind::_ScalarTemperatureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTemperatureData& ThermalCompartmentData::temperature() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ThermalCompartmentData.Temperature)
  return _internal_temperature();
}
inline void ThermalCompartmentData::unsafe_arena_set_allocated_temperature(
    ::pulse::cdm::bind::ScalarTemperatureData* temperature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temperature_);
  }
  temperature_ = temperature;
  if (temperature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ThermalCompartmentData.Temperature)
}
inline ::pulse::cdm::bind::ScalarTemperatureData* ThermalCompartmentData::release_temperature() {
  
  ::pulse::cdm::bind::ScalarTemperatureData* temp = temperature_;
  temperature_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* ThermalCompartmentData::unsafe_arena_release_temperature() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ThermalCompartmentData.Temperature)
  
  ::pulse::cdm::bind::ScalarTemperatureData* temp = temperature_;
  temperature_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* ThermalCompartmentData::_internal_mutable_temperature() {
  
  if (temperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTemperatureData>(GetArena());
    temperature_ = p;
  }
  return temperature_;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* ThermalCompartmentData::mutable_temperature() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ThermalCompartmentData.Temperature)
  return _internal_mutable_temperature();
}
inline void ThermalCompartmentData::set_allocated_temperature(::pulse::cdm::bind::ScalarTemperatureData* temperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(temperature_);
  }
  if (temperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temperature)->GetArena();
    if (message_arena != submessage_arena) {
      temperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, temperature, submessage_arena);
    }
    
  } else {
    
  }
  temperature_ = temperature;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ThermalCompartmentData.Temperature)
}

// .pulse.cdm.bind.ScalarEnergyData Heat = 5;
inline bool ThermalCompartmentData::_internal_has_heat() const {
  return this != internal_default_instance() && heat_ != nullptr;
}
inline bool ThermalCompartmentData::has_heat() const {
  return _internal_has_heat();
}
inline const ::pulse::cdm::bind::ScalarEnergyData& ThermalCompartmentData::_internal_heat() const {
  const ::pulse::cdm::bind::ScalarEnergyData* p = heat_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarEnergyData&>(
      ::pulse::cdm::bind::_ScalarEnergyData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarEnergyData& ThermalCompartmentData::heat() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ThermalCompartmentData.Heat)
  return _internal_heat();
}
inline void ThermalCompartmentData::unsafe_arena_set_allocated_heat(
    ::pulse::cdm::bind::ScalarEnergyData* heat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heat_);
  }
  heat_ = heat;
  if (heat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ThermalCompartmentData.Heat)
}
inline ::pulse::cdm::bind::ScalarEnergyData* ThermalCompartmentData::release_heat() {
  
  ::pulse::cdm::bind::ScalarEnergyData* temp = heat_;
  heat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarEnergyData* ThermalCompartmentData::unsafe_arena_release_heat() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ThermalCompartmentData.Heat)
  
  ::pulse::cdm::bind::ScalarEnergyData* temp = heat_;
  heat_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarEnergyData* ThermalCompartmentData::_internal_mutable_heat() {
  
  if (heat_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarEnergyData>(GetArena());
    heat_ = p;
  }
  return heat_;
}
inline ::pulse::cdm::bind::ScalarEnergyData* ThermalCompartmentData::mutable_heat() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ThermalCompartmentData.Heat)
  return _internal_mutable_heat();
}
inline void ThermalCompartmentData::set_allocated_heat(::pulse::cdm::bind::ScalarEnergyData* heat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heat_);
  }
  if (heat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heat)->GetArena();
    if (message_arena != submessage_arena) {
      heat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heat, submessage_arena);
    }
    
  } else {
    
  }
  heat_ = heat;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ThermalCompartmentData.Heat)
}

// -------------------------------------------------------------------

// ThermalCompartmentLinkData

// .pulse.cdm.bind.CompartmentLinkData Link = 1;
inline bool ThermalCompartmentLinkData::_internal_has_link() const {
  return this != internal_default_instance() && link_ != nullptr;
}
inline bool ThermalCompartmentLinkData::has_link() const {
  return _internal_has_link();
}
inline void ThermalCompartmentLinkData::clear_link() {
  if (GetArena() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
}
inline const ::pulse::cdm::bind::CompartmentLinkData& ThermalCompartmentLinkData::_internal_link() const {
  const ::pulse::cdm::bind::CompartmentLinkData* p = link_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::CompartmentLinkData&>(
      ::pulse::cdm::bind::_CompartmentLinkData_default_instance_);
}
inline const ::pulse::cdm::bind::CompartmentLinkData& ThermalCompartmentLinkData::link() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ThermalCompartmentLinkData.Link)
  return _internal_link();
}
inline void ThermalCompartmentLinkData::unsafe_arena_set_allocated_link(
    ::pulse::cdm::bind::CompartmentLinkData* link) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(link_);
  }
  link_ = link;
  if (link) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ThermalCompartmentLinkData.Link)
}
inline ::pulse::cdm::bind::CompartmentLinkData* ThermalCompartmentLinkData::release_link() {
  
  ::pulse::cdm::bind::CompartmentLinkData* temp = link_;
  link_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::CompartmentLinkData* ThermalCompartmentLinkData::unsafe_arena_release_link() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ThermalCompartmentLinkData.Link)
  
  ::pulse::cdm::bind::CompartmentLinkData* temp = link_;
  link_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::CompartmentLinkData* ThermalCompartmentLinkData::_internal_mutable_link() {
  
  if (link_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::CompartmentLinkData>(GetArena());
    link_ = p;
  }
  return link_;
}
inline ::pulse::cdm::bind::CompartmentLinkData* ThermalCompartmentLinkData::mutable_link() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ThermalCompartmentLinkData.Link)
  return _internal_mutable_link();
}
inline void ThermalCompartmentLinkData::set_allocated_link(::pulse::cdm::bind::CompartmentLinkData* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete link_;
  }
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(link);
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    
  } else {
    
  }
  link_ = link;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ThermalCompartmentLinkData.Link)
}

// .pulse.cdm.bind.ScalarPowerData HeatTransferRate = 2;
inline bool ThermalCompartmentLinkData::_internal_has_heattransferrate() const {
  return this != internal_default_instance() && heattransferrate_ != nullptr;
}
inline bool ThermalCompartmentLinkData::has_heattransferrate() const {
  return _internal_has_heattransferrate();
}
inline const ::pulse::cdm::bind::ScalarPowerData& ThermalCompartmentLinkData::_internal_heattransferrate() const {
  const ::pulse::cdm::bind::ScalarPowerData* p = heattransferrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPowerData&>(
      ::pulse::cdm::bind::_ScalarPowerData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPowerData& ThermalCompartmentLinkData::heattransferrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ThermalCompartmentLinkData.HeatTransferRate)
  return _internal_heattransferrate();
}
inline void ThermalCompartmentLinkData::unsafe_arena_set_allocated_heattransferrate(
    ::pulse::cdm::bind::ScalarPowerData* heattransferrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heattransferrate_);
  }
  heattransferrate_ = heattransferrate;
  if (heattransferrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ThermalCompartmentLinkData.HeatTransferRate)
}
inline ::pulse::cdm::bind::ScalarPowerData* ThermalCompartmentLinkData::release_heattransferrate() {
  
  ::pulse::cdm::bind::ScalarPowerData* temp = heattransferrate_;
  heattransferrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* ThermalCompartmentLinkData::unsafe_arena_release_heattransferrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ThermalCompartmentLinkData.HeatTransferRate)
  
  ::pulse::cdm::bind::ScalarPowerData* temp = heattransferrate_;
  heattransferrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* ThermalCompartmentLinkData::_internal_mutable_heattransferrate() {
  
  if (heattransferrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPowerData>(GetArena());
    heattransferrate_ = p;
  }
  return heattransferrate_;
}
inline ::pulse::cdm::bind::ScalarPowerData* ThermalCompartmentLinkData::mutable_heattransferrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ThermalCompartmentLinkData.HeatTransferRate)
  return _internal_mutable_heattransferrate();
}
inline void ThermalCompartmentLinkData::set_allocated_heattransferrate(::pulse::cdm::bind::ScalarPowerData* heattransferrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heattransferrate_);
  }
  if (heattransferrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heattransferrate)->GetArena();
    if (message_arena != submessage_arena) {
      heattransferrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heattransferrate, submessage_arena);
    }
    
  } else {
    
  }
  heattransferrate_ = heattransferrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ThermalCompartmentLinkData.HeatTransferRate)
}

// -------------------------------------------------------------------

// ElectricalCompartmentData

// .pulse.cdm.bind.CompartmentData Compartment = 1;
inline bool ElectricalCompartmentData::_internal_has_compartment() const {
  return this != internal_default_instance() && compartment_ != nullptr;
}
inline bool ElectricalCompartmentData::has_compartment() const {
  return _internal_has_compartment();
}
inline void ElectricalCompartmentData::clear_compartment() {
  if (GetArena() == nullptr && compartment_ != nullptr) {
    delete compartment_;
  }
  compartment_ = nullptr;
}
inline const ::pulse::cdm::bind::CompartmentData& ElectricalCompartmentData::_internal_compartment() const {
  const ::pulse::cdm::bind::CompartmentData* p = compartment_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::CompartmentData&>(
      ::pulse::cdm::bind::_CompartmentData_default_instance_);
}
inline const ::pulse::cdm::bind::CompartmentData& ElectricalCompartmentData::compartment() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectricalCompartmentData.Compartment)
  return _internal_compartment();
}
inline void ElectricalCompartmentData::unsafe_arena_set_allocated_compartment(
    ::pulse::cdm::bind::CompartmentData* compartment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compartment_);
  }
  compartment_ = compartment;
  if (compartment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectricalCompartmentData.Compartment)
}
inline ::pulse::cdm::bind::CompartmentData* ElectricalCompartmentData::release_compartment() {
  
  ::pulse::cdm::bind::CompartmentData* temp = compartment_;
  compartment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::CompartmentData* ElectricalCompartmentData::unsafe_arena_release_compartment() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectricalCompartmentData.Compartment)
  
  ::pulse::cdm::bind::CompartmentData* temp = compartment_;
  compartment_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::CompartmentData* ElectricalCompartmentData::_internal_mutable_compartment() {
  
  if (compartment_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::CompartmentData>(GetArena());
    compartment_ = p;
  }
  return compartment_;
}
inline ::pulse::cdm::bind::CompartmentData* ElectricalCompartmentData::mutable_compartment() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectricalCompartmentData.Compartment)
  return _internal_mutable_compartment();
}
inline void ElectricalCompartmentData::set_allocated_compartment(::pulse::cdm::bind::CompartmentData* compartment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete compartment_;
  }
  if (compartment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(compartment);
    if (message_arena != submessage_arena) {
      compartment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compartment, submessage_arena);
    }
    
  } else {
    
  }
  compartment_ = compartment;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectricalCompartmentData.Compartment)
}

// .pulse.cdm.bind.ScalarElectricCurrentData CurrentIn = 2;
inline bool ElectricalCompartmentData::_internal_has_currentin() const {
  return this != internal_default_instance() && currentin_ != nullptr;
}
inline bool ElectricalCompartmentData::has_currentin() const {
  return _internal_has_currentin();
}
inline const ::pulse::cdm::bind::ScalarElectricCurrentData& ElectricalCompartmentData::_internal_currentin() const {
  const ::pulse::cdm::bind::ScalarElectricCurrentData* p = currentin_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarElectricCurrentData&>(
      ::pulse::cdm::bind::_ScalarElectricCurrentData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarElectricCurrentData& ElectricalCompartmentData::currentin() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectricalCompartmentData.CurrentIn)
  return _internal_currentin();
}
inline void ElectricalCompartmentData::unsafe_arena_set_allocated_currentin(
    ::pulse::cdm::bind::ScalarElectricCurrentData* currentin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(currentin_);
  }
  currentin_ = currentin;
  if (currentin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectricalCompartmentData.CurrentIn)
}
inline ::pulse::cdm::bind::ScalarElectricCurrentData* ElectricalCompartmentData::release_currentin() {
  
  ::pulse::cdm::bind::ScalarElectricCurrentData* temp = currentin_;
  currentin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricCurrentData* ElectricalCompartmentData::unsafe_arena_release_currentin() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectricalCompartmentData.CurrentIn)
  
  ::pulse::cdm::bind::ScalarElectricCurrentData* temp = currentin_;
  currentin_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricCurrentData* ElectricalCompartmentData::_internal_mutable_currentin() {
  
  if (currentin_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricCurrentData>(GetArena());
    currentin_ = p;
  }
  return currentin_;
}
inline ::pulse::cdm::bind::ScalarElectricCurrentData* ElectricalCompartmentData::mutable_currentin() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectricalCompartmentData.CurrentIn)
  return _internal_mutable_currentin();
}
inline void ElectricalCompartmentData::set_allocated_currentin(::pulse::cdm::bind::ScalarElectricCurrentData* currentin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(currentin_);
  }
  if (currentin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(currentin)->GetArena();
    if (message_arena != submessage_arena) {
      currentin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currentin, submessage_arena);
    }
    
  } else {
    
  }
  currentin_ = currentin;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectricalCompartmentData.CurrentIn)
}

// .pulse.cdm.bind.ScalarElectricCurrentData CurrentOut = 3;
inline bool ElectricalCompartmentData::_internal_has_currentout() const {
  return this != internal_default_instance() && currentout_ != nullptr;
}
inline bool ElectricalCompartmentData::has_currentout() const {
  return _internal_has_currentout();
}
inline const ::pulse::cdm::bind::ScalarElectricCurrentData& ElectricalCompartmentData::_internal_currentout() const {
  const ::pulse::cdm::bind::ScalarElectricCurrentData* p = currentout_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarElectricCurrentData&>(
      ::pulse::cdm::bind::_ScalarElectricCurrentData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarElectricCurrentData& ElectricalCompartmentData::currentout() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectricalCompartmentData.CurrentOut)
  return _internal_currentout();
}
inline void ElectricalCompartmentData::unsafe_arena_set_allocated_currentout(
    ::pulse::cdm::bind::ScalarElectricCurrentData* currentout) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(currentout_);
  }
  currentout_ = currentout;
  if (currentout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectricalCompartmentData.CurrentOut)
}
inline ::pulse::cdm::bind::ScalarElectricCurrentData* ElectricalCompartmentData::release_currentout() {
  
  ::pulse::cdm::bind::ScalarElectricCurrentData* temp = currentout_;
  currentout_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricCurrentData* ElectricalCompartmentData::unsafe_arena_release_currentout() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectricalCompartmentData.CurrentOut)
  
  ::pulse::cdm::bind::ScalarElectricCurrentData* temp = currentout_;
  currentout_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricCurrentData* ElectricalCompartmentData::_internal_mutable_currentout() {
  
  if (currentout_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricCurrentData>(GetArena());
    currentout_ = p;
  }
  return currentout_;
}
inline ::pulse::cdm::bind::ScalarElectricCurrentData* ElectricalCompartmentData::mutable_currentout() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectricalCompartmentData.CurrentOut)
  return _internal_mutable_currentout();
}
inline void ElectricalCompartmentData::set_allocated_currentout(::pulse::cdm::bind::ScalarElectricCurrentData* currentout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(currentout_);
  }
  if (currentout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(currentout)->GetArena();
    if (message_arena != submessage_arena) {
      currentout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currentout, submessage_arena);
    }
    
  } else {
    
  }
  currentout_ = currentout;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectricalCompartmentData.CurrentOut)
}

// .pulse.cdm.bind.ScalarElectricPotentialData Voltage = 4;
inline bool ElectricalCompartmentData::_internal_has_voltage() const {
  return this != internal_default_instance() && voltage_ != nullptr;
}
inline bool ElectricalCompartmentData::has_voltage() const {
  return _internal_has_voltage();
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectricalCompartmentData::_internal_voltage() const {
  const ::pulse::cdm::bind::ScalarElectricPotentialData* p = voltage_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarElectricPotentialData&>(
      ::pulse::cdm::bind::_ScalarElectricPotentialData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectricalCompartmentData::voltage() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectricalCompartmentData.Voltage)
  return _internal_voltage();
}
inline void ElectricalCompartmentData::unsafe_arena_set_allocated_voltage(
    ::pulse::cdm::bind::ScalarElectricPotentialData* voltage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltage_);
  }
  voltage_ = voltage;
  if (voltage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectricalCompartmentData.Voltage)
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectricalCompartmentData::release_voltage() {
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = voltage_;
  voltage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectricalCompartmentData::unsafe_arena_release_voltage() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectricalCompartmentData.Voltage)
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = voltage_;
  voltage_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectricalCompartmentData::_internal_mutable_voltage() {
  
  if (voltage_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricPotentialData>(GetArena());
    voltage_ = p;
  }
  return voltage_;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectricalCompartmentData::mutable_voltage() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectricalCompartmentData.Voltage)
  return _internal_mutable_voltage();
}
inline void ElectricalCompartmentData::set_allocated_voltage(::pulse::cdm::bind::ScalarElectricPotentialData* voltage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltage_);
  }
  if (voltage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltage)->GetArena();
    if (message_arena != submessage_arena) {
      voltage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voltage, submessage_arena);
    }
    
  } else {
    
  }
  voltage_ = voltage;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectricalCompartmentData.Voltage)
}

// .pulse.cdm.bind.ScalarElectricChargeData Charge = 5;
inline bool ElectricalCompartmentData::_internal_has_charge() const {
  return this != internal_default_instance() && charge_ != nullptr;
}
inline bool ElectricalCompartmentData::has_charge() const {
  return _internal_has_charge();
}
inline const ::pulse::cdm::bind::ScalarElectricChargeData& ElectricalCompartmentData::_internal_charge() const {
  const ::pulse::cdm::bind::ScalarElectricChargeData* p = charge_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarElectricChargeData&>(
      ::pulse::cdm::bind::_ScalarElectricChargeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarElectricChargeData& ElectricalCompartmentData::charge() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectricalCompartmentData.Charge)
  return _internal_charge();
}
inline void ElectricalCompartmentData::unsafe_arena_set_allocated_charge(
    ::pulse::cdm::bind::ScalarElectricChargeData* charge) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(charge_);
  }
  charge_ = charge;
  if (charge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectricalCompartmentData.Charge)
}
inline ::pulse::cdm::bind::ScalarElectricChargeData* ElectricalCompartmentData::release_charge() {
  
  ::pulse::cdm::bind::ScalarElectricChargeData* temp = charge_;
  charge_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricChargeData* ElectricalCompartmentData::unsafe_arena_release_charge() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectricalCompartmentData.Charge)
  
  ::pulse::cdm::bind::ScalarElectricChargeData* temp = charge_;
  charge_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricChargeData* ElectricalCompartmentData::_internal_mutable_charge() {
  
  if (charge_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricChargeData>(GetArena());
    charge_ = p;
  }
  return charge_;
}
inline ::pulse::cdm::bind::ScalarElectricChargeData* ElectricalCompartmentData::mutable_charge() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectricalCompartmentData.Charge)
  return _internal_mutable_charge();
}
inline void ElectricalCompartmentData::set_allocated_charge(::pulse::cdm::bind::ScalarElectricChargeData* charge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(charge_);
  }
  if (charge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(charge)->GetArena();
    if (message_arena != submessage_arena) {
      charge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, charge, submessage_arena);
    }
    
  } else {
    
  }
  charge_ = charge;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectricalCompartmentData.Charge)
}

// -------------------------------------------------------------------

// ElectricalCompartmentLinkData

// .pulse.cdm.bind.CompartmentLinkData Link = 1;
inline bool ElectricalCompartmentLinkData::_internal_has_link() const {
  return this != internal_default_instance() && link_ != nullptr;
}
inline bool ElectricalCompartmentLinkData::has_link() const {
  return _internal_has_link();
}
inline void ElectricalCompartmentLinkData::clear_link() {
  if (GetArena() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
}
inline const ::pulse::cdm::bind::CompartmentLinkData& ElectricalCompartmentLinkData::_internal_link() const {
  const ::pulse::cdm::bind::CompartmentLinkData* p = link_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::CompartmentLinkData&>(
      ::pulse::cdm::bind::_CompartmentLinkData_default_instance_);
}
inline const ::pulse::cdm::bind::CompartmentLinkData& ElectricalCompartmentLinkData::link() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectricalCompartmentLinkData.Link)
  return _internal_link();
}
inline void ElectricalCompartmentLinkData::unsafe_arena_set_allocated_link(
    ::pulse::cdm::bind::CompartmentLinkData* link) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(link_);
  }
  link_ = link;
  if (link) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectricalCompartmentLinkData.Link)
}
inline ::pulse::cdm::bind::CompartmentLinkData* ElectricalCompartmentLinkData::release_link() {
  
  ::pulse::cdm::bind::CompartmentLinkData* temp = link_;
  link_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::CompartmentLinkData* ElectricalCompartmentLinkData::unsafe_arena_release_link() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectricalCompartmentLinkData.Link)
  
  ::pulse::cdm::bind::CompartmentLinkData* temp = link_;
  link_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::CompartmentLinkData* ElectricalCompartmentLinkData::_internal_mutable_link() {
  
  if (link_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::CompartmentLinkData>(GetArena());
    link_ = p;
  }
  return link_;
}
inline ::pulse::cdm::bind::CompartmentLinkData* ElectricalCompartmentLinkData::mutable_link() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectricalCompartmentLinkData.Link)
  return _internal_mutable_link();
}
inline void ElectricalCompartmentLinkData::set_allocated_link(::pulse::cdm::bind::CompartmentLinkData* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete link_;
  }
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(link);
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    
  } else {
    
  }
  link_ = link;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectricalCompartmentLinkData.Link)
}

// .pulse.cdm.bind.ScalarElectricCurrentData Current = 2;
inline bool ElectricalCompartmentLinkData::_internal_has_current() const {
  return this != internal_default_instance() && current_ != nullptr;
}
inline bool ElectricalCompartmentLinkData::has_current() const {
  return _internal_has_current();
}
inline const ::pulse::cdm::bind::ScalarElectricCurrentData& ElectricalCompartmentLinkData::_internal_current() const {
  const ::pulse::cdm::bind::ScalarElectricCurrentData* p = current_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarElectricCurrentData&>(
      ::pulse::cdm::bind::_ScalarElectricCurrentData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarElectricCurrentData& ElectricalCompartmentLinkData::current() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectricalCompartmentLinkData.Current)
  return _internal_current();
}
inline void ElectricalCompartmentLinkData::unsafe_arena_set_allocated_current(
    ::pulse::cdm::bind::ScalarElectricCurrentData* current) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_);
  }
  current_ = current;
  if (current) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectricalCompartmentLinkData.Current)
}
inline ::pulse::cdm::bind::ScalarElectricCurrentData* ElectricalCompartmentLinkData::release_current() {
  
  ::pulse::cdm::bind::ScalarElectricCurrentData* temp = current_;
  current_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricCurrentData* ElectricalCompartmentLinkData::unsafe_arena_release_current() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectricalCompartmentLinkData.Current)
  
  ::pulse::cdm::bind::ScalarElectricCurrentData* temp = current_;
  current_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricCurrentData* ElectricalCompartmentLinkData::_internal_mutable_current() {
  
  if (current_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricCurrentData>(GetArena());
    current_ = p;
  }
  return current_;
}
inline ::pulse::cdm::bind::ScalarElectricCurrentData* ElectricalCompartmentLinkData::mutable_current() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectricalCompartmentLinkData.Current)
  return _internal_mutable_current();
}
inline void ElectricalCompartmentLinkData::set_allocated_current(::pulse::cdm::bind::ScalarElectricCurrentData* current) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_);
  }
  if (current) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current)->GetArena();
    if (message_arena != submessage_arena) {
      current = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current, submessage_arena);
    }
    
  } else {
    
  }
  current_ = current;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectricalCompartmentLinkData.Current)
}

// -------------------------------------------------------------------

// CompartmentManagerData

// repeated .pulse.cdm.bind.ElectricalCompartmentData ElectricalCompartment = 1;
inline int CompartmentManagerData::_internal_electricalcompartment_size() const {
  return electricalcompartment_.size();
}
inline int CompartmentManagerData::electricalcompartment_size() const {
  return _internal_electricalcompartment_size();
}
inline void CompartmentManagerData::clear_electricalcompartment() {
  electricalcompartment_.Clear();
}
inline ::pulse::cdm::bind::ElectricalCompartmentData* CompartmentManagerData::mutable_electricalcompartment(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentManagerData.ElectricalCompartment)
  return electricalcompartment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ElectricalCompartmentData >*
CompartmentManagerData::mutable_electricalcompartment() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.CompartmentManagerData.ElectricalCompartment)
  return &electricalcompartment_;
}
inline const ::pulse::cdm::bind::ElectricalCompartmentData& CompartmentManagerData::_internal_electricalcompartment(int index) const {
  return electricalcompartment_.Get(index);
}
inline const ::pulse::cdm::bind::ElectricalCompartmentData& CompartmentManagerData::electricalcompartment(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentManagerData.ElectricalCompartment)
  return _internal_electricalcompartment(index);
}
inline ::pulse::cdm::bind::ElectricalCompartmentData* CompartmentManagerData::_internal_add_electricalcompartment() {
  return electricalcompartment_.Add();
}
inline ::pulse::cdm::bind::ElectricalCompartmentData* CompartmentManagerData::add_electricalcompartment() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentManagerData.ElectricalCompartment)
  return _internal_add_electricalcompartment();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ElectricalCompartmentData >&
CompartmentManagerData::electricalcompartment() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.CompartmentManagerData.ElectricalCompartment)
  return electricalcompartment_;
}

// repeated .pulse.cdm.bind.ElectricalCompartmentLinkData ElectricalLink = 2;
inline int CompartmentManagerData::_internal_electricallink_size() const {
  return electricallink_.size();
}
inline int CompartmentManagerData::electricallink_size() const {
  return _internal_electricallink_size();
}
inline void CompartmentManagerData::clear_electricallink() {
  electricallink_.Clear();
}
inline ::pulse::cdm::bind::ElectricalCompartmentLinkData* CompartmentManagerData::mutable_electricallink(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentManagerData.ElectricalLink)
  return electricallink_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ElectricalCompartmentLinkData >*
CompartmentManagerData::mutable_electricallink() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.CompartmentManagerData.ElectricalLink)
  return &electricallink_;
}
inline const ::pulse::cdm::bind::ElectricalCompartmentLinkData& CompartmentManagerData::_internal_electricallink(int index) const {
  return electricallink_.Get(index);
}
inline const ::pulse::cdm::bind::ElectricalCompartmentLinkData& CompartmentManagerData::electricallink(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentManagerData.ElectricalLink)
  return _internal_electricallink(index);
}
inline ::pulse::cdm::bind::ElectricalCompartmentLinkData* CompartmentManagerData::_internal_add_electricallink() {
  return electricallink_.Add();
}
inline ::pulse::cdm::bind::ElectricalCompartmentLinkData* CompartmentManagerData::add_electricallink() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentManagerData.ElectricalLink)
  return _internal_add_electricallink();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ElectricalCompartmentLinkData >&
CompartmentManagerData::electricallink() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.CompartmentManagerData.ElectricalLink)
  return electricallink_;
}

// repeated .pulse.cdm.bind.LiquidCompartmentData LiquidCompartment = 3;
inline int CompartmentManagerData::_internal_liquidcompartment_size() const {
  return liquidcompartment_.size();
}
inline int CompartmentManagerData::liquidcompartment_size() const {
  return _internal_liquidcompartment_size();
}
inline void CompartmentManagerData::clear_liquidcompartment() {
  liquidcompartment_.Clear();
}
inline ::pulse::cdm::bind::LiquidCompartmentData* CompartmentManagerData::mutable_liquidcompartment(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentManagerData.LiquidCompartment)
  return liquidcompartment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidCompartmentData >*
CompartmentManagerData::mutable_liquidcompartment() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.CompartmentManagerData.LiquidCompartment)
  return &liquidcompartment_;
}
inline const ::pulse::cdm::bind::LiquidCompartmentData& CompartmentManagerData::_internal_liquidcompartment(int index) const {
  return liquidcompartment_.Get(index);
}
inline const ::pulse::cdm::bind::LiquidCompartmentData& CompartmentManagerData::liquidcompartment(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentManagerData.LiquidCompartment)
  return _internal_liquidcompartment(index);
}
inline ::pulse::cdm::bind::LiquidCompartmentData* CompartmentManagerData::_internal_add_liquidcompartment() {
  return liquidcompartment_.Add();
}
inline ::pulse::cdm::bind::LiquidCompartmentData* CompartmentManagerData::add_liquidcompartment() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentManagerData.LiquidCompartment)
  return _internal_add_liquidcompartment();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidCompartmentData >&
CompartmentManagerData::liquidcompartment() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.CompartmentManagerData.LiquidCompartment)
  return liquidcompartment_;
}

// repeated .pulse.cdm.bind.LiquidCompartmentLinkData LiquidLink = 4;
inline int CompartmentManagerData::_internal_liquidlink_size() const {
  return liquidlink_.size();
}
inline int CompartmentManagerData::liquidlink_size() const {
  return _internal_liquidlink_size();
}
inline void CompartmentManagerData::clear_liquidlink() {
  liquidlink_.Clear();
}
inline ::pulse::cdm::bind::LiquidCompartmentLinkData* CompartmentManagerData::mutable_liquidlink(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentManagerData.LiquidLink)
  return liquidlink_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidCompartmentLinkData >*
CompartmentManagerData::mutable_liquidlink() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.CompartmentManagerData.LiquidLink)
  return &liquidlink_;
}
inline const ::pulse::cdm::bind::LiquidCompartmentLinkData& CompartmentManagerData::_internal_liquidlink(int index) const {
  return liquidlink_.Get(index);
}
inline const ::pulse::cdm::bind::LiquidCompartmentLinkData& CompartmentManagerData::liquidlink(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentManagerData.LiquidLink)
  return _internal_liquidlink(index);
}
inline ::pulse::cdm::bind::LiquidCompartmentLinkData* CompartmentManagerData::_internal_add_liquidlink() {
  return liquidlink_.Add();
}
inline ::pulse::cdm::bind::LiquidCompartmentLinkData* CompartmentManagerData::add_liquidlink() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentManagerData.LiquidLink)
  return _internal_add_liquidlink();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidCompartmentLinkData >&
CompartmentManagerData::liquidlink() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.CompartmentManagerData.LiquidLink)
  return liquidlink_;
}

// repeated string LiquidSubstance = 5;
inline int CompartmentManagerData::_internal_liquidsubstance_size() const {
  return liquidsubstance_.size();
}
inline int CompartmentManagerData::liquidsubstance_size() const {
  return _internal_liquidsubstance_size();
}
inline void CompartmentManagerData::clear_liquidsubstance() {
  liquidsubstance_.Clear();
}
inline std::string* CompartmentManagerData::add_liquidsubstance() {
  // @@protoc_insertion_point(field_add_mutable:pulse.cdm.bind.CompartmentManagerData.LiquidSubstance)
  return _internal_add_liquidsubstance();
}
inline const std::string& CompartmentManagerData::_internal_liquidsubstance(int index) const {
  return liquidsubstance_.Get(index);
}
inline const std::string& CompartmentManagerData::liquidsubstance(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentManagerData.LiquidSubstance)
  return _internal_liquidsubstance(index);
}
inline std::string* CompartmentManagerData::mutable_liquidsubstance(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentManagerData.LiquidSubstance)
  return liquidsubstance_.Mutable(index);
}
inline void CompartmentManagerData::set_liquidsubstance(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.CompartmentManagerData.LiquidSubstance)
  liquidsubstance_.Mutable(index)->assign(value);
}
inline void CompartmentManagerData::set_liquidsubstance(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.CompartmentManagerData.LiquidSubstance)
  liquidsubstance_.Mutable(index)->assign(std::move(value));
}
inline void CompartmentManagerData::set_liquidsubstance(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  liquidsubstance_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.CompartmentManagerData.LiquidSubstance)
}
inline void CompartmentManagerData::set_liquidsubstance(int index, const char* value, size_t size) {
  liquidsubstance_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.CompartmentManagerData.LiquidSubstance)
}
inline std::string* CompartmentManagerData::_internal_add_liquidsubstance() {
  return liquidsubstance_.Add();
}
inline void CompartmentManagerData::add_liquidsubstance(const std::string& value) {
  liquidsubstance_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentManagerData.LiquidSubstance)
}
inline void CompartmentManagerData::add_liquidsubstance(std::string&& value) {
  liquidsubstance_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentManagerData.LiquidSubstance)
}
inline void CompartmentManagerData::add_liquidsubstance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  liquidsubstance_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pulse.cdm.bind.CompartmentManagerData.LiquidSubstance)
}
inline void CompartmentManagerData::add_liquidsubstance(const char* value, size_t size) {
  liquidsubstance_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pulse.cdm.bind.CompartmentManagerData.LiquidSubstance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CompartmentManagerData::liquidsubstance() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.CompartmentManagerData.LiquidSubstance)
  return liquidsubstance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CompartmentManagerData::mutable_liquidsubstance() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.CompartmentManagerData.LiquidSubstance)
  return &liquidsubstance_;
}

// repeated .pulse.cdm.bind.LiquidCompartmentGraphData LiquidGraph = 6;
inline int CompartmentManagerData::_internal_liquidgraph_size() const {
  return liquidgraph_.size();
}
inline int CompartmentManagerData::liquidgraph_size() const {
  return _internal_liquidgraph_size();
}
inline void CompartmentManagerData::clear_liquidgraph() {
  liquidgraph_.Clear();
}
inline ::pulse::cdm::bind::LiquidCompartmentGraphData* CompartmentManagerData::mutable_liquidgraph(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentManagerData.LiquidGraph)
  return liquidgraph_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidCompartmentGraphData >*
CompartmentManagerData::mutable_liquidgraph() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.CompartmentManagerData.LiquidGraph)
  return &liquidgraph_;
}
inline const ::pulse::cdm::bind::LiquidCompartmentGraphData& CompartmentManagerData::_internal_liquidgraph(int index) const {
  return liquidgraph_.Get(index);
}
inline const ::pulse::cdm::bind::LiquidCompartmentGraphData& CompartmentManagerData::liquidgraph(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentManagerData.LiquidGraph)
  return _internal_liquidgraph(index);
}
inline ::pulse::cdm::bind::LiquidCompartmentGraphData* CompartmentManagerData::_internal_add_liquidgraph() {
  return liquidgraph_.Add();
}
inline ::pulse::cdm::bind::LiquidCompartmentGraphData* CompartmentManagerData::add_liquidgraph() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentManagerData.LiquidGraph)
  return _internal_add_liquidgraph();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidCompartmentGraphData >&
CompartmentManagerData::liquidgraph() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.CompartmentManagerData.LiquidGraph)
  return liquidgraph_;
}

// repeated .pulse.cdm.bind.GasCompartmentData GasCompartment = 7;
inline int CompartmentManagerData::_internal_gascompartment_size() const {
  return gascompartment_.size();
}
inline int CompartmentManagerData::gascompartment_size() const {
  return _internal_gascompartment_size();
}
inline void CompartmentManagerData::clear_gascompartment() {
  gascompartment_.Clear();
}
inline ::pulse::cdm::bind::GasCompartmentData* CompartmentManagerData::mutable_gascompartment(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentManagerData.GasCompartment)
  return gascompartment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasCompartmentData >*
CompartmentManagerData::mutable_gascompartment() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.CompartmentManagerData.GasCompartment)
  return &gascompartment_;
}
inline const ::pulse::cdm::bind::GasCompartmentData& CompartmentManagerData::_internal_gascompartment(int index) const {
  return gascompartment_.Get(index);
}
inline const ::pulse::cdm::bind::GasCompartmentData& CompartmentManagerData::gascompartment(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentManagerData.GasCompartment)
  return _internal_gascompartment(index);
}
inline ::pulse::cdm::bind::GasCompartmentData* CompartmentManagerData::_internal_add_gascompartment() {
  return gascompartment_.Add();
}
inline ::pulse::cdm::bind::GasCompartmentData* CompartmentManagerData::add_gascompartment() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentManagerData.GasCompartment)
  return _internal_add_gascompartment();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasCompartmentData >&
CompartmentManagerData::gascompartment() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.CompartmentManagerData.GasCompartment)
  return gascompartment_;
}

// repeated .pulse.cdm.bind.GasCompartmentLinkData GasLink = 8;
inline int CompartmentManagerData::_internal_gaslink_size() const {
  return gaslink_.size();
}
inline int CompartmentManagerData::gaslink_size() const {
  return _internal_gaslink_size();
}
inline void CompartmentManagerData::clear_gaslink() {
  gaslink_.Clear();
}
inline ::pulse::cdm::bind::GasCompartmentLinkData* CompartmentManagerData::mutable_gaslink(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentManagerData.GasLink)
  return gaslink_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasCompartmentLinkData >*
CompartmentManagerData::mutable_gaslink() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.CompartmentManagerData.GasLink)
  return &gaslink_;
}
inline const ::pulse::cdm::bind::GasCompartmentLinkData& CompartmentManagerData::_internal_gaslink(int index) const {
  return gaslink_.Get(index);
}
inline const ::pulse::cdm::bind::GasCompartmentLinkData& CompartmentManagerData::gaslink(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentManagerData.GasLink)
  return _internal_gaslink(index);
}
inline ::pulse::cdm::bind::GasCompartmentLinkData* CompartmentManagerData::_internal_add_gaslink() {
  return gaslink_.Add();
}
inline ::pulse::cdm::bind::GasCompartmentLinkData* CompartmentManagerData::add_gaslink() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentManagerData.GasLink)
  return _internal_add_gaslink();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasCompartmentLinkData >&
CompartmentManagerData::gaslink() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.CompartmentManagerData.GasLink)
  return gaslink_;
}

// repeated string GasSubstance = 9;
inline int CompartmentManagerData::_internal_gassubstance_size() const {
  return gassubstance_.size();
}
inline int CompartmentManagerData::gassubstance_size() const {
  return _internal_gassubstance_size();
}
inline void CompartmentManagerData::clear_gassubstance() {
  gassubstance_.Clear();
}
inline std::string* CompartmentManagerData::add_gassubstance() {
  // @@protoc_insertion_point(field_add_mutable:pulse.cdm.bind.CompartmentManagerData.GasSubstance)
  return _internal_add_gassubstance();
}
inline const std::string& CompartmentManagerData::_internal_gassubstance(int index) const {
  return gassubstance_.Get(index);
}
inline const std::string& CompartmentManagerData::gassubstance(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentManagerData.GasSubstance)
  return _internal_gassubstance(index);
}
inline std::string* CompartmentManagerData::mutable_gassubstance(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentManagerData.GasSubstance)
  return gassubstance_.Mutable(index);
}
inline void CompartmentManagerData::set_gassubstance(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.CompartmentManagerData.GasSubstance)
  gassubstance_.Mutable(index)->assign(value);
}
inline void CompartmentManagerData::set_gassubstance(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.CompartmentManagerData.GasSubstance)
  gassubstance_.Mutable(index)->assign(std::move(value));
}
inline void CompartmentManagerData::set_gassubstance(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  gassubstance_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.CompartmentManagerData.GasSubstance)
}
inline void CompartmentManagerData::set_gassubstance(int index, const char* value, size_t size) {
  gassubstance_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.CompartmentManagerData.GasSubstance)
}
inline std::string* CompartmentManagerData::_internal_add_gassubstance() {
  return gassubstance_.Add();
}
inline void CompartmentManagerData::add_gassubstance(const std::string& value) {
  gassubstance_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentManagerData.GasSubstance)
}
inline void CompartmentManagerData::add_gassubstance(std::string&& value) {
  gassubstance_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentManagerData.GasSubstance)
}
inline void CompartmentManagerData::add_gassubstance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  gassubstance_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pulse.cdm.bind.CompartmentManagerData.GasSubstance)
}
inline void CompartmentManagerData::add_gassubstance(const char* value, size_t size) {
  gassubstance_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pulse.cdm.bind.CompartmentManagerData.GasSubstance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CompartmentManagerData::gassubstance() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.CompartmentManagerData.GasSubstance)
  return gassubstance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CompartmentManagerData::mutable_gassubstance() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.CompartmentManagerData.GasSubstance)
  return &gassubstance_;
}

// repeated .pulse.cdm.bind.GasCompartmentGraphData GasGraph = 10;
inline int CompartmentManagerData::_internal_gasgraph_size() const {
  return gasgraph_.size();
}
inline int CompartmentManagerData::gasgraph_size() const {
  return _internal_gasgraph_size();
}
inline void CompartmentManagerData::clear_gasgraph() {
  gasgraph_.Clear();
}
inline ::pulse::cdm::bind::GasCompartmentGraphData* CompartmentManagerData::mutable_gasgraph(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentManagerData.GasGraph)
  return gasgraph_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasCompartmentGraphData >*
CompartmentManagerData::mutable_gasgraph() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.CompartmentManagerData.GasGraph)
  return &gasgraph_;
}
inline const ::pulse::cdm::bind::GasCompartmentGraphData& CompartmentManagerData::_internal_gasgraph(int index) const {
  return gasgraph_.Get(index);
}
inline const ::pulse::cdm::bind::GasCompartmentGraphData& CompartmentManagerData::gasgraph(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentManagerData.GasGraph)
  return _internal_gasgraph(index);
}
inline ::pulse::cdm::bind::GasCompartmentGraphData* CompartmentManagerData::_internal_add_gasgraph() {
  return gasgraph_.Add();
}
inline ::pulse::cdm::bind::GasCompartmentGraphData* CompartmentManagerData::add_gasgraph() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentManagerData.GasGraph)
  return _internal_add_gasgraph();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasCompartmentGraphData >&
CompartmentManagerData::gasgraph() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.CompartmentManagerData.GasGraph)
  return gasgraph_;
}

// repeated .pulse.cdm.bind.ThermalCompartmentData ThermalCompartment = 11;
inline int CompartmentManagerData::_internal_thermalcompartment_size() const {
  return thermalcompartment_.size();
}
inline int CompartmentManagerData::thermalcompartment_size() const {
  return _internal_thermalcompartment_size();
}
inline void CompartmentManagerData::clear_thermalcompartment() {
  thermalcompartment_.Clear();
}
inline ::pulse::cdm::bind::ThermalCompartmentData* CompartmentManagerData::mutable_thermalcompartment(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentManagerData.ThermalCompartment)
  return thermalcompartment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ThermalCompartmentData >*
CompartmentManagerData::mutable_thermalcompartment() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.CompartmentManagerData.ThermalCompartment)
  return &thermalcompartment_;
}
inline const ::pulse::cdm::bind::ThermalCompartmentData& CompartmentManagerData::_internal_thermalcompartment(int index) const {
  return thermalcompartment_.Get(index);
}
inline const ::pulse::cdm::bind::ThermalCompartmentData& CompartmentManagerData::thermalcompartment(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentManagerData.ThermalCompartment)
  return _internal_thermalcompartment(index);
}
inline ::pulse::cdm::bind::ThermalCompartmentData* CompartmentManagerData::_internal_add_thermalcompartment() {
  return thermalcompartment_.Add();
}
inline ::pulse::cdm::bind::ThermalCompartmentData* CompartmentManagerData::add_thermalcompartment() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentManagerData.ThermalCompartment)
  return _internal_add_thermalcompartment();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ThermalCompartmentData >&
CompartmentManagerData::thermalcompartment() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.CompartmentManagerData.ThermalCompartment)
  return thermalcompartment_;
}

// repeated .pulse.cdm.bind.ThermalCompartmentLinkData ThermalLink = 12;
inline int CompartmentManagerData::_internal_thermallink_size() const {
  return thermallink_.size();
}
inline int CompartmentManagerData::thermallink_size() const {
  return _internal_thermallink_size();
}
inline void CompartmentManagerData::clear_thermallink() {
  thermallink_.Clear();
}
inline ::pulse::cdm::bind::ThermalCompartmentLinkData* CompartmentManagerData::mutable_thermallink(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentManagerData.ThermalLink)
  return thermallink_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ThermalCompartmentLinkData >*
CompartmentManagerData::mutable_thermallink() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.CompartmentManagerData.ThermalLink)
  return &thermallink_;
}
inline const ::pulse::cdm::bind::ThermalCompartmentLinkData& CompartmentManagerData::_internal_thermallink(int index) const {
  return thermallink_.Get(index);
}
inline const ::pulse::cdm::bind::ThermalCompartmentLinkData& CompartmentManagerData::thermallink(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentManagerData.ThermalLink)
  return _internal_thermallink(index);
}
inline ::pulse::cdm::bind::ThermalCompartmentLinkData* CompartmentManagerData::_internal_add_thermallink() {
  return thermallink_.Add();
}
inline ::pulse::cdm::bind::ThermalCompartmentLinkData* CompartmentManagerData::add_thermallink() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentManagerData.ThermalLink)
  return _internal_add_thermallink();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ThermalCompartmentLinkData >&
CompartmentManagerData::thermallink() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.CompartmentManagerData.ThermalLink)
  return thermallink_;
}

// repeated .pulse.cdm.bind.TissueCompartmentData TissueCompartment = 13;
inline int CompartmentManagerData::_internal_tissuecompartment_size() const {
  return tissuecompartment_.size();
}
inline int CompartmentManagerData::tissuecompartment_size() const {
  return _internal_tissuecompartment_size();
}
inline void CompartmentManagerData::clear_tissuecompartment() {
  tissuecompartment_.Clear();
}
inline ::pulse::cdm::bind::TissueCompartmentData* CompartmentManagerData::mutable_tissuecompartment(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentManagerData.TissueCompartment)
  return tissuecompartment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TissueCompartmentData >*
CompartmentManagerData::mutable_tissuecompartment() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.CompartmentManagerData.TissueCompartment)
  return &tissuecompartment_;
}
inline const ::pulse::cdm::bind::TissueCompartmentData& CompartmentManagerData::_internal_tissuecompartment(int index) const {
  return tissuecompartment_.Get(index);
}
inline const ::pulse::cdm::bind::TissueCompartmentData& CompartmentManagerData::tissuecompartment(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentManagerData.TissueCompartment)
  return _internal_tissuecompartment(index);
}
inline ::pulse::cdm::bind::TissueCompartmentData* CompartmentManagerData::_internal_add_tissuecompartment() {
  return tissuecompartment_.Add();
}
inline ::pulse::cdm::bind::TissueCompartmentData* CompartmentManagerData::add_tissuecompartment() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentManagerData.TissueCompartment)
  return _internal_add_tissuecompartment();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TissueCompartmentData >&
CompartmentManagerData::tissuecompartment() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.CompartmentManagerData.TissueCompartment)
  return tissuecompartment_;
}

// repeated string TissueSubstance = 14;
inline int CompartmentManagerData::_internal_tissuesubstance_size() const {
  return tissuesubstance_.size();
}
inline int CompartmentManagerData::tissuesubstance_size() const {
  return _internal_tissuesubstance_size();
}
inline void CompartmentManagerData::clear_tissuesubstance() {
  tissuesubstance_.Clear();
}
inline std::string* CompartmentManagerData::add_tissuesubstance() {
  // @@protoc_insertion_point(field_add_mutable:pulse.cdm.bind.CompartmentManagerData.TissueSubstance)
  return _internal_add_tissuesubstance();
}
inline const std::string& CompartmentManagerData::_internal_tissuesubstance(int index) const {
  return tissuesubstance_.Get(index);
}
inline const std::string& CompartmentManagerData::tissuesubstance(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CompartmentManagerData.TissueSubstance)
  return _internal_tissuesubstance(index);
}
inline std::string* CompartmentManagerData::mutable_tissuesubstance(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CompartmentManagerData.TissueSubstance)
  return tissuesubstance_.Mutable(index);
}
inline void CompartmentManagerData::set_tissuesubstance(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.CompartmentManagerData.TissueSubstance)
  tissuesubstance_.Mutable(index)->assign(value);
}
inline void CompartmentManagerData::set_tissuesubstance(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.CompartmentManagerData.TissueSubstance)
  tissuesubstance_.Mutable(index)->assign(std::move(value));
}
inline void CompartmentManagerData::set_tissuesubstance(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tissuesubstance_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.CompartmentManagerData.TissueSubstance)
}
inline void CompartmentManagerData::set_tissuesubstance(int index, const char* value, size_t size) {
  tissuesubstance_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.CompartmentManagerData.TissueSubstance)
}
inline std::string* CompartmentManagerData::_internal_add_tissuesubstance() {
  return tissuesubstance_.Add();
}
inline void CompartmentManagerData::add_tissuesubstance(const std::string& value) {
  tissuesubstance_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentManagerData.TissueSubstance)
}
inline void CompartmentManagerData::add_tissuesubstance(std::string&& value) {
  tissuesubstance_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.CompartmentManagerData.TissueSubstance)
}
inline void CompartmentManagerData::add_tissuesubstance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tissuesubstance_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pulse.cdm.bind.CompartmentManagerData.TissueSubstance)
}
inline void CompartmentManagerData::add_tissuesubstance(const char* value, size_t size) {
  tissuesubstance_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pulse.cdm.bind.CompartmentManagerData.TissueSubstance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CompartmentManagerData::tissuesubstance() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.CompartmentManagerData.TissueSubstance)
  return tissuesubstance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CompartmentManagerData::mutable_tissuesubstance() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.CompartmentManagerData.TissueSubstance)
  return &tissuesubstance_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pulse::cdm::bind::CompartmentData_eType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::CompartmentData_eType>() {
  return ::pulse::cdm::bind::CompartmentData_eType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fCompartment_2eproto
